import { Auth0Provider, useAuth0 } from "@auth0/auth0-react";

import React, { useEffect, useState, ReactNode, ReactElement } from "react";
import { AuthTokenFetcher, ConvexProvider } from "../react/index.js";

// Duplicate type from CLI, which doesn't export types for users.
// Careful if removing, if this entry point exports no interfaces or classes
// doc generation works differently: the sidebar label cannot be overriden.
/**
 * Type representing authentication configuration, from the authInfo array
 * of a convex.json config file.
 *
 * @public
 */
export interface AuthInfo {
  domain: string;
  applicationID: string;
}

// Until we can import from our own entry points (requires TypeScript 4.7),
// just describe the interface enough to help users pass the right type.
type IConvexReactClient = {
  setAuth(fetchToken: AuthTokenFetcher): Promise<void>;
  clearAuth(): void;
};

/**
 * A wrapper React component which provides a {@link react.ConvexReactClient}
 * authenticated with Auth0.
 *
 * Using this component requires
 * 1. Installing the Auth0 React SDK with `npm install @auth0/auth0-react`
 * 2. [Setting up an Auth0 app](https://docs.convex.dev/using/auth#auth0), and
 * 3. [Registering that app](https://docs.convex.dev/using/auth#configuring-convex) with `npx convex auth add`.
 *
 *
 * ```tsx
 * function AppWrapper() {
 *   return (
 *     <ConvexProviderWithAuth0 client={convex} authInfo={authInfo}>
 *       <App/>
 *     </ConvexProviderWithAuth0>
 *   );
 * }
 * ```
 *
 * Using this component instead of {@link react.ConvexProvider}
 * makes the [useAuth0](https://auth0.com/docs/libraries/auth0-react)
 * hook available.
 *
 * If a user is not logged in, this component renders the loading prop
 * with a fallback of a simple "Log in" button if that prop is not passed in.
 * To write your own login component, use the
 * `loginWithRedirect` property of the return value of `useAuth0()`
 * in the click handler of your login button.
 *
 * ```tsx
 * function YourLoggedOutComponent() {
 *   const { loginWithRedirect } = useAuth0();
 *   return (
 *     <div>
 *       <h1>Please log in :)</h1>
 *       <button onClick={loginWithRedirect}>Log in</button>
 *     </div>
 *   );
 * }
 *
 * <ConvexProviderWithAuth0
 *   client={convex}
 *   authInfo={authInfo}
 *   loggedOut={<YourLoggedOutComponent/>}
 * >
 *   <App/>
 * </ConvexProviderWithAuth0>
 * ```
 *
 * @public
 */
export const ConvexProviderWithAuth0: React.FC<{
  children: ReactNode;
  client: IConvexReactClient;
  authInfo: AuthInfo;
  loading?: ReactElement;
  loggedOut?: ReactElement;
}> = ({ children, client, authInfo, loading, loggedOut }) => {
  if (!authInfo) {
    throw new Error(
      "ConvexProviderWithAuth0 component requires authInfo. " +
        "Run `npx convex auth add` to register your auth provider " +
        "and pass config.authInfo[0] as the authInfo prop."
    );
  }
  let domain = authInfo.domain;
  if (domain.startsWith("https://")) {
    domain = domain.slice(8);
  }
  if (domain.endsWith("/")) {
    domain = domain.slice(0, -1);
  }

  return React.createElement(
    Auth0Provider,
    {
      domain: domain,
      clientId: authInfo.applicationID,
      redirectUri:
        typeof window === "undefined" ? undefined : window.location.origin,
      // allows auth0 to cache the authentication state locally
      cacheLocation: "localstorage",
    },
    React.createElement(
      ConvexProviderUsingAuth0,
      {
        client,
        loading,
        loggedOut,
      },
      children
    )
  );
};

function ConvexProviderUsingAuth0({
  children,
  client,
  loading,
  loggedOut,
}: {
  children?: React.ReactNode;
  client: IConvexReactClient;
  loading?: ReactElement;
  loggedOut?: ReactElement;
}) {
  const {
    isAuthenticated,
    isLoading,
    getAccessTokenSilently,
    loginWithRedirect,
  } = useAuth0();
  const [clientAuthSynced, setClientAuthSynced] = useState(false);

  // default logged out and loading views
  loggedOut =
    loggedOut ||
    React.createElement("button", { onClick: loginWithRedirect }, "Log in");
  loading = loading || React.createElement(React.Fragment, null, null);

  useEffect(() => {
    async function setToken() {
      await client.setAuth(async () => {
        try {
          const response = await getAccessTokenSilently({
            detailedResponse: true,
          });
          return response.id_token as string;
        } catch (_error) {
          return null;
        }
      });
      setClientAuthSynced(true);
    }

    if (isAuthenticated) {
      // TODO(CX-3070): This ignores a failed Promise
      void setToken();
      return () => client.clearAuth();
    }
  }, [isAuthenticated, getAccessTokenSilently, isLoading, client]);

  if (isLoading || (isAuthenticated && !clientAuthSynced)) {
    // Do not add ConvexProvider for loading state because
    // convex and auth0 hooks can be mutually inconsistent
    return loading;
  } else if (!isAuthenticated) {
    return React.createElement(
      ConvexProvider,
      { client: client as any },
      loggedOut
    );
  }
  return React.createElement(
    ConvexProvider,
    { client: client as any },
    children
  );
}
