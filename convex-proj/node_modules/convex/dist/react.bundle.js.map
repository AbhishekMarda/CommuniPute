{
  "version": 3,
  "sources": ["../../common/temp/node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js", "external-global-plugin:react", "external-global-plugin:react-dom", "../src/react/index.ts", "../../common/temp/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js", "../../common/temp/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js", "../../common/temp/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js", "../../common/temp/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js", "../src/index.ts", "../src/values/values.ts", "../src/browser/logging.ts", "../src/browser/sync/action_manager.ts", "../src/browser/sync/udf_path_utils.ts", "../src/browser/sync/local_state.ts", "../src/browser/sync/request_manager.ts", "../src/browser/sync/optimistic_updates_impl.ts", "../src/browser/long.ts", "../src/browser/sync/remote_query_set.ts", "../src/browser/sync/protocol.ts", "../src/browser/sync/web_socket_manager.ts", "../src/browser/sync/client.ts", "../src/react/use_subscription.ts", "../src/react/use_paginated_query.ts", "../src/react/use_queries.ts", "../src/react/queries_observer.ts", "../src/react/use_upload.ts"],
  "sourcesContent": ["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "module.exports = window.React", "module.exports = window.ReactDOM", "/**\n * Tools to integrate Convex into React applications.\n *\n * This module contains:\n * 1. {@link ConvexReactClient}, a client for using Convex in React.\n * 2. {@link ConvexProvider}, a component that stores this client in React context.\n * 2. [Hooks](https://docs.convex.dev/generated-api/react#react-hooks) for calling into\n *    this client within your React components.\n *\n * ## Usage\n *\n * ### Creating the Client\n *\n * ```typescript\n * import { ConvexReactClient } from \"convex/react\";\n *\n * // typically loaded from an environment variable\n * const address = \"https://small-mouse-123.convex.cloud\"\n * const convex = new ConvexReactClient(address);\n * ```\n *\n * ### Storing the Client In React Context\n *\n * ```typescript\n * import { ConvexProvider } from \"convex/react\";\n *\n * <ConvexProvider client={convex}>\n *   <App />\n * </ConvexProvider>\n * ```\n *\n * ### Generating the Hooks\n *\n * This module is typically used alongside generated hooks.\n *\n * To generate the hooks, run `npx convex codegen` in your Convex project. This\n * will create a `convex/_generated/react.js` file with the following React\n * hooks, typed for your queries and mutations:\n * - [useQuery](https://docs.convex.dev/generated-api/react#usequery)\n * - [useMutation](https://docs.convex.dev/generated-api/react#usemutation)\n * - [useConvex](https://docs.convex.dev/generated-api/react#useconvex)\n * - [usePaginatedQuery](https://docs.convex.dev/generated-api/react#usepaginatedquery)\n * - [useQueries](https://docs.convex.dev/generated-api/react#usequeries)\n *\n * If you aren't using code generation, you can use these untyped hooks instead:\n * - {@link useQueryGeneric}\n * - {@link useMutationGeneric}\n * - {@link useConvexGeneric}\n * - {@link usePaginatedQueryGeneric}\n * - {@link useQueriesGeneric}\n *\n * ### Using the Hooks\n *\n * ```typescript\n * import { useQuery, useMutation } from \"../convex/_generated/react\";\n *\n * function App() {\n *   const counter = useQuery(\"getCounter\");\n *   const increment = useMutation(\"incrementCounter\");\n *   // Your component here!\n * }\n * ```\n * @module\n */\n\nimport {\n  GenericAPI,\n  InternalConvexClient,\n  MutationNames,\n  QueryNames,\n  ActionNames,\n  NamedMutation,\n  NamedQuery,\n  NamedAction,\n} from \"../browser/index.js\";\nimport type { OptimisticUpdate, QueryToken } from \"../browser/index.js\";\nimport React, { useContext, useMemo } from \"react\";\nimport { convexToJson } from \"../values/index.js\";\nimport ReactDOM from \"react-dom\";\nimport { useSubscription } from \"./use_subscription.js\";\nimport { QueryJournal } from \"../browser/sync/protocol.js\";\nimport { AuthTokenFetcher, ConnectionState } from \"../browser/sync/client.js\";\nexport * from \"./use_paginated_query.js\";\nexport {\n  useQueriesGeneric,\n  type RequestForQueries,\n  type UseQueriesForAPI,\n} from \"./use_queries.js\";\nexport { useUploadGeneric } from \"./use_upload.js\";\nexport type { AuthTokenFetcher } from \"../browser/sync/client.js\";\n\n// TODO add runtime check that React version is good too.\nif (typeof React === \"undefined\") {\n  throw new Error(\"Required dependency 'react' not installed\");\n}\nif (typeof ReactDOM === \"undefined\") {\n  throw new Error(\"Required dependency 'react-dom' not installed\");\n}\n\n// TODO Typedoc doesn't generate documentation for the comment below perhaps\n// because it's a callable interface.\n/**\n * An interface to execute a Convex mutation function on the server.\n *\n * @public\n */\nexport interface ReactMutation<\n  API extends GenericAPI,\n  Name extends MutationNames<API>\n> {\n  /**\n   * Execute the mutation on the server, returning a `Promise` of its return value.\n   *\n   * @param args - Arguments for the mutation to pass up to the server.\n   * @returns The return value of the server-side function call.\n   */\n  (...args: Parameters<NamedMutation<API, Name>>): Promise<\n    ReturnType<NamedMutation<API, Name>>\n  >;\n\n  /**\n   * Define an optimistic update to apply as part of this mutation.\n   *\n   * This is a temporary update to the local query results to facilitate a\n   * fast, interactive UI. It enables query results to update before a mutation\n   * executed on the server.\n   *\n   * When the mutation is invoked, the optimistic update will be applied.\n   *\n   * Optimistic updates can also be used to temporarily remove queries from the\n   * client and create loading experiences until a mutation completes and the\n   * new query results are synced.\n   *\n   * The update will be automatically rolled back when the mutation is fully\n   * completed and queries have been updated.\n   *\n   * @param optimisticUpdate - The optimistic update to apply.\n   * @returns A new `ReactMutation` with the update configured.\n   *\n   * @public\n   */\n  withOptimisticUpdate(\n    optimisticUpdate: OptimisticUpdate<\n      API,\n      Parameters<NamedMutation<API, Name>>\n    >\n  ): ReactMutation<API, Name>;\n}\n\nfunction createMutation<\n  API extends GenericAPI,\n  Name extends MutationNames<API>\n>(\n  name: Name,\n  sync: () => InternalConvexClient,\n  update: OptimisticUpdate<\n    API,\n    Parameters<NamedMutation<API, Name>>\n  > | null = null\n): ReactMutation<API, Name> {\n  function mutation(\n    ...args: Parameters<NamedMutation<API, Name>>\n  ): Promise<ReturnType<NamedMutation<API, Name>>> {\n    assertNotAccidentalArgument(args);\n    return sync().mutate(name, args, update);\n  }\n  mutation.withOptimisticUpdate = function withOptimisticUpdate(\n    optimisticUpdate: OptimisticUpdate<\n      API,\n      Parameters<NamedMutation<API, Name>>\n    >\n  ): ReactMutation<API, Name> {\n    if (update !== null) {\n      throw new Error(\n        `Already specified optimistic update for mutation ${name}`\n      );\n    }\n    return createMutation(name, sync, optimisticUpdate);\n  };\n  return mutation;\n}\n\n/**\n * An interface to execute a Convex action on the server.\n *\n * @public\n */\nexport interface ReactAction<\n  API extends GenericAPI,\n  Name extends ActionNames<API>\n> {\n  /**\n   * Execute the function on the server, returning a `Promise` of its return value.\n   *\n   * @param args - Arguments for the function to pass up to the server.\n   * @returns The return value of the server-side function call.\n   * @public\n   */\n  (...args: Parameters<NamedAction<API, Name>>): Promise<\n    ReturnType<NamedAction<API, Name>>\n  >;\n}\n\nfunction createAction<API extends GenericAPI, Name extends ActionNames<API>>(\n  name: Name,\n  sync: () => InternalConvexClient\n): ReactAction<API, Name> {\n  return function (\n    ...args: Parameters<NamedAction<API, Name>>\n  ): Promise<ReturnType<NamedAction<API, Name>>> {\n    return sync().action(name, args);\n  };\n}\n\n/**\n * A watch on the output of a Convex query function.\n *\n * @public\n */\nexport interface Watch<T> {\n  /**\n   * Initiate a watch on the output of a query.\n   *\n   * This will subscribe to this query and call\n   * the callback whenever the query result changes.\n   *\n   * **Important: If the query is already known on the client this watch will\n   * never be invoked.** To get the current, local result call\n   * {@link react.Watch.localQueryResult}.\n   *\n   * @param callback - Function that is called whenever the query result changes.\n   * @returns - A function that disposes of the subscription.\n   */\n  onUpdate(callback: () => void): () => void;\n\n  /**\n   * Get the current result of a query.\n   *\n   * This will only return a result if we're already subscribed to the query\n   * and have received a result from the server or the query value has been set\n   * optimistically.\n   *\n   * @returns The result of the query or `undefined` if it isn't known.\n   * @throws An error if the query encountered an error on the server.\n   */\n  localQueryResult(): T | undefined;\n\n  /**\n   * Get the current {@link browser.QueryJournal} for this query.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   */\n  journal(): QueryJournal | undefined;\n}\n\n/**\n * Options for {@link ConvexReactClient}.\n *\n * @public\n */\nexport interface ReactClientOptions {\n  /**\n   * Whether to prompt the user if they have unsaved changes pending\n   * when navigating away or closing a web page.\n   *\n   * This is only possible when the `window` object exists, i.e. in a browser.\n   *\n   * The default value is `true`.\n   */\n  unsavedChangesWarning?: boolean;\n  /**\n   * Specifies an alternate [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) constructor to use for client communication with the Convex cloud. The default behavior is to use `WebSocket` from the global environment.\n   */\n  webSocketConstructor?: typeof WebSocket;\n}\n\nconst DEFAULT_OPTIONS: ReactClientOptions = {\n  unsavedChangesWarning: true,\n};\n\n/**\n * A Convex client for use within React.\n *\n * This loads reactive queries and executes mutations over a WebSocket.\n *\n * @typeParam API - The API of your application, composed of all Convex queries\n * and mutations. `npx convex codegen` [generates this type](/generated-api/react#convexapi)\n * in `convex/_generated/react.d.ts`.\n * @public\n */\nexport class ConvexReactClient<API extends GenericAPI> {\n  private address: string;\n  private cachedSync?: InternalConvexClient;\n  private listeners: Map<QueryToken, Set<() => void>>;\n  private options: ReactClientOptions;\n  private closed = false;\n\n  private adminAuth?: string;\n\n  /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - See {@link ReactClientOptions} for a full description.\n   */\n  constructor(address: string, options?: ReactClientOptions) {\n    this.address = address;\n    this.listeners = new Map();\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  /**\n   * Lazily instantiate the `InternalConvexClient` so we don't create the WebSocket\n   * when server-side rendering.\n   */\n  private get sync() {\n    if (this.closed) {\n      throw new Error(\"ConvexReactClient has already been closed.\");\n    }\n    if (this.cachedSync) {\n      return this.cachedSync;\n    }\n    this.cachedSync = new InternalConvexClient(\n      this.address,\n      updatedQueries => this.transition(updatedQueries),\n      this.options\n    );\n    if (this.adminAuth) {\n      this.cachedSync.setAdminAuth(this.adminAuth);\n    }\n    return this.cachedSync;\n  }\n\n  /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   */\n  async setAuth(fetchToken: AuthTokenFetcher): Promise<void> {\n    if (typeof fetchToken === \"string\") {\n      throw new Error(\n        \"Passing a string to ConvexReactClient.setAuth is no longer supported, \" +\n          \"please upgrade to passing in an async function to handle reauthentication.\"\n      );\n    }\n    return await this.sync.setAuth(fetchToken);\n  }\n\n  /**\n   * Clear the current authentication token if set.\n   */\n  clearAuth() {\n    this.sync.clearAuth();\n  }\n\n  /**\n   * @internal\n   */\n  setAdminAuth(token: string) {\n    this.adminAuth = token;\n    if (this.closed) {\n      throw new Error(\"ConvexReactClient has already been closed.\");\n    }\n    if (this.cachedSync) {\n      this.sync.setAdminAuth(token);\n    }\n  }\n\n  /**\n   * Construct a new {@link Watch} on a Convex query function.\n   *\n   * **Most application code should not call this method directly. Instead use\n   * the `useQuery` hook generated by `npx convex codegen`.**\n   *\n   * @param name - The name of the query function.\n   * @param args - The arguments to the query.\n   * @param journal - An (optional) {@link browser.QueryJournal} to use while\n   * executing this query. Note that if this query function with these arguments\n   * has already been requested, the journal will have no effect.\n   * @returns The {@link Watch} object.\n   */\n  watchQuery<Name extends QueryNames<API>>(\n    name: Name,\n    args: Parameters<NamedQuery<API, Name>>,\n    journal?: QueryJournal\n  ): Watch<ReturnType<NamedQuery<API, Name>>> {\n    // `watchQuery` used to collect the arguments with a rest operator\n    // (like `...args`). Double check that it's an array to make sure developers\n    // have updated their code.\n    if (!Array.isArray(args)) {\n      throw new Error(\n        `Query arguments to \\`ConvexReactClient.watchQuery\\` must be an array. Received ${args}.`\n      );\n    }\n    return {\n      onUpdate: callback => {\n        const { queryToken, unsubscribe } = this.sync.subscribe(\n          name as string,\n          args,\n          journal\n        );\n\n        const currentListeners = this.listeners.get(queryToken);\n        if (currentListeners !== undefined) {\n          currentListeners.add(callback);\n        } else {\n          this.listeners.set(queryToken, new Set([callback]));\n        }\n\n        return () => {\n          if (this.closed) {\n            return;\n          }\n\n          const currentListeners = this.listeners.get(queryToken)!;\n          currentListeners.delete(callback);\n          if (currentListeners.size === 0) {\n            this.listeners.delete(queryToken);\n          }\n          unsubscribe();\n        };\n      },\n\n      localQueryResult: () => {\n        // Use the cached client because we can't have a query result if we don't\n        // even have a client yet!\n        if (this.cachedSync) {\n          return this.cachedSync.localQueryResult(name, args) as ReturnType<\n            NamedQuery<API, Name>\n          >;\n        }\n        return undefined;\n      },\n\n      journal: () => {\n        if (this.cachedSync) {\n          return this.cachedSync.queryJournal(name, args);\n        }\n        return undefined;\n      },\n    };\n  }\n\n  /**\n   * Construct a new {@link ReactMutation}.\n   *\n   * @param name - The name of the Mutation.\n   * @returns The {@link ReactMutation} object with that name.\n   */\n  mutation<Name extends MutationNames<API>>(\n    name: Name\n  ): ReactMutation<API, Name> {\n    return createMutation(name, () => this.sync);\n  }\n\n  /**\n   * Construct a new {@link ReactAction}\n   *\n   * @param name - The name of the Action.\n   * @returns The {@link ReactAction} object with that name.\n   */\n  action<Name extends ActionNames<API>>(name: Name): ReactAction<API, Name> {\n    return createAction(name, () => this.sync);\n  }\n\n  /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */\n  connectionState(): ConnectionState {\n    return this.sync.connectionState();\n  }\n\n  /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with a {@link ConvexReactClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */\n  async close(): Promise<void> {\n    this.closed = true;\n    // Prevent outstanding React batched updates from invoking listeners.\n    this.listeners = new Map();\n    if (this.cachedSync) {\n      const sync = this.cachedSync;\n      this.cachedSync = undefined;\n      await sync.close();\n    }\n  }\n\n  private transition(updatedQueries: QueryToken[]) {\n    ReactDOM.unstable_batchedUpdates(() => {\n      for (const queryToken of updatedQueries) {\n        const callbacks = this.listeners.get(queryToken);\n        if (callbacks) {\n          for (const callback of callbacks) {\n            callback();\n          }\n        }\n      }\n    });\n  }\n}\n\nconst ConvexContext = React.createContext<ConvexReactClient<any>>(\n  undefined as unknown as ConvexReactClient<any> // in the future this will be a mocked client for testing\n);\n\n/**\n * Get the {@link ConvexReactClient} within a React component.\n *\n * This relies on the {@link ConvexProvider} being above in the React component tree.\n *\n * If you're using code generation, use the `useConvex` function in\n * `convex/_generated/react.js` which is typed for your API.\n *\n * @returns The active {@link ConvexReactClient} object, or `undefined`.\n *\n * @public\n */\nexport function useConvexGeneric<\n  API extends GenericAPI\n>(): ConvexReactClient<API> {\n  return useContext(ConvexContext);\n}\n\n/**\n * Provides an active Convex {@link ConvexReactClient} to descendants of this component.\n *\n * Wrap your app in this component to use Convex hooks `useQuery`,\n * `useMutation`, and `useConvex`.\n *\n * @param props - an object with a `client` property that refers to a {@link ConvexReactClient}.\n *\n * @public\n */\nexport const ConvexProvider: React.FC<{\n  client: ConvexReactClient<any>;\n  children?: React.ReactNode;\n}> = ({ client, children }) => {\n  return React.createElement(\n    ConvexContext.Provider,\n    { value: client },\n    children\n  );\n};\n\n/**\n * Load a reactive query within a React component.\n *\n * This React hook contains internal state that will cause a rerender\n * whenever the query result changes.\n *\n * Throws an error if not used under {@link ConvexProvider}.\n *\n * If you're using code generation, use the `useQuery` function in\n * `convex/_generated/react.js` which is typed for your API.\n *\n * @param name - The name of the query function.\n * @param args - The arguments to the query function.\n * @returns `undefined` if loading and the query's return value otherwise.\n *\n * @public\n */\nexport function useQueryGeneric<\n  API extends GenericAPI,\n  Name extends QueryNames<API>\n>(\n  name: Name,\n  ...args: Parameters<NamedQuery<API, Name>>\n): ReturnType<NamedQuery<API, Name>> | undefined {\n  const convex = useContext(ConvexContext);\n  if (convex === undefined) {\n    throw new Error(\n      \"Could not find Convex client! `useQuery` must be used in the React component \" +\n        \"tree under `ConvexProvider`. Did you forget it? \" +\n        \"See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\"\n    );\n  }\n  const subscription = useMemo(\n    () => {\n      const watch = convex.watchQuery(name, args);\n      return {\n        getCurrentValue: () => watch.localQueryResult(),\n        subscribe: (callback: () => void) => watch.onUpdate(callback),\n      };\n    },\n    // ESLint doesn't like that we're stringifying the args. We do this because\n    // we want to avoid recreating the subscription if the args are a different\n    // object that serializes to the same result.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [name, convex, JSON.stringify(convexToJson(args))]\n  );\n\n  const queryResult = useSubscription(subscription);\n  return queryResult;\n}\n\n/**\n * Construct a new {@link ReactMutation}.\n *\n * Mutation objects can be called like functions to request execution of the\n * corresponding Convex function, or further configured with\n * [optimistic updates](https://docs.convex.dev/using/optimistic-updates).\n *\n * The value returned by this hook is stable across renders, so it can be used\n * by React dependency arrays and memoization logic relying on object identity\n * without causing rerenders.\n *\n * If you're using code generation, use the `useMutation` function in\n * `convex/_generated/react.js` which is typed for your API.\n *\n * Throws an error if not used under {@link ConvexProvider}.\n *\n * @param name - The name of the mutation.\n * @returns The {@link ReactMutation} object with that name.\n *\n * @public\n */\nexport function useMutationGeneric<\n  API extends GenericAPI,\n  Name extends MutationNames<API>\n>(name: Name): ReactMutation<API, Name> {\n  const convex = useContext(ConvexContext);\n  if (convex === undefined) {\n    throw new Error(\n      \"Could not find Convex client! `useMutation` must be used in the React component \" +\n        \"tree under `ConvexProvider`. Did you forget it? \" +\n        \"See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\"\n    );\n  }\n  return useMemo(() => convex.mutation(name), [convex, name]);\n}\n\n/**\n * Construct a new {@link ReactAction}.\n *\n * Action objects can be called like functions to request execution of the\n * corresponding Convex function.\n *\n * The value returned by this hook is stable across renders, so it can be used\n * by React dependency arrays and memoization logic relying on object identity\n * without causing rerenders.\n *\n * If you're using code generation, use the `useAction` function in\n * `convex/_generated/react.js` which is typed for your API.\n *\n * Throws an error if not used under {@link ConvexProvider}.\n *\n * @param name - The name of the action.\n * @returns The {@link ReactAction} object with that name.\n *\n * @public\n */\nexport function useActionGeneric<\n  API extends GenericAPI,\n  Name extends ActionNames<API>\n>(name: Name): ReactAction<API, Name> {\n  const convex = useContext(ConvexContext);\n  if (convex === undefined) {\n    throw new Error(\n      \"Could not find Convex client! `useAction` must be used in the React component \" +\n        \"tree under `ConvexProvider`. Did you forget it? \" +\n        \"See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\"\n    );\n  }\n  return useMemo(() => convex.action(name), [convex, name]);\n}\n\n/**\n * Internal type helper used by Convex code generation.\n *\n * Used to give {@link useQueryGeneric} a type specific to your API.\n * @public\n */\nexport type UseQueryForAPI<API extends GenericAPI> = <\n  Name extends QueryNames<API>\n>(\n  name: Name,\n  ...args: Parameters<NamedQuery<API, Name>>\n) => ReturnType<NamedQuery<API, Name>> | undefined;\n\n/**\n * Internal type helper used by Convex code generation.\n *\n * Used to give {@link useMutationGeneric} a type specific to your API.\n * @public\n */\nexport type UseMutationForAPI<API extends GenericAPI> = <\n  Name extends MutationNames<API>\n>(\n  name: Name\n) => ReactMutation<API, Name>;\n\n/**\n * Internal type helper used by Convex code generation.\n *\n * Used to give {@link useMutationGeneric} a type specific to your API.\n * @public\n */\nexport type UseActionForAPI<API extends GenericAPI> = <\n  Name extends ActionNames<API>\n>(\n  name: Name\n) => ReactAction<API, Name>;\n\n/**\n * Internal type helper used by Convex code generation.\n *\n * Used to give {@link useConvexGeneric} a type specific to your API.\n * @public\n */\nexport type UseConvexForAPI<API extends GenericAPI> =\n  () => ConvexReactClient<API>;\n\n// When a function is called with a single argument that looks like a\n// React SyntheticEvent it was likely called as an event handler.\nfunction assertNotAccidentalArgument(args: any[]) {\n  if (args.length !== 1) return;\n  const [value] = args;\n  // these are properties of a React.SyntheticEvent\n  // https://reactjs.org/docs/events.html\n  if (\n    typeof value === \"object\" &&\n    \"bubbles\" in value &&\n    \"persist\" in value &&\n    \"isDefaultPrevented\" in value\n  ) {\n    throw new Error(\n      `Convex function called with SyntheticEvent object. Did you use a Convex function as an event handler directly? Event handlers like onClick receive an event object as their first argument. These SyntheticEvent objects are not valid Convex values. Try wrapping the function like \\`const handler = () => myMutation();\\` and using \\`handler\\` in the event handler.`\n    );\n  }\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "export const version = \"0.9.1\";\n", "/**\n * Utilities for working with values stored in Convex.\n *\n * You can see the full set of supported types at\n * [Types](https://docs.convex.dev/using/types).\n * @module\n */\nimport * as Base64 from \"base64-js\";\n\nconst LITTLE_ENDIAN = true;\n// This code is used by code that may not have bigint literals.\nconst MIN_INT64 = BigInt(\"-9223372036854775808\");\nconst MAX_INT64 = BigInt(\"9223372036854775807\");\nconst ZERO = BigInt(\"0\");\nconst EIGHT = BigInt(\"8\");\nconst TWOFIFTYSIX = BigInt(\"256\");\n\n/**\n * The type of JavaScript values serializable to JSON.\n *\n * @public\n */\nexport type JSONValue =\n  | null\n  | boolean\n  | number\n  | string\n  | JSONValue[]\n  | { [key: string]: JSONValue };\n\n/**\n * An identifier for a document in Convex.\n *\n * Convex documents are uniquely identified by their `Id`, which is accessible\n * on the `_id` field. To learn more, see [Data Modeling](https://docs.convex.dev/using/data-modeling).\n *\n * Documents can be loaded using `db.get(id)` in query and mutation functions.\n *\n * **Important**: Use `myId.equals(otherId)` to check for equality.\n * Using `===` will not work because two different instances of `Id` can refer\n * to the same document.\n *\n * `Id`s are 17 bytes long and consist of:\n * - A 15-byte random value.\n * - A 2-byte timestamp representing the document's creation, in days since the Unix epoch.\n * This is encoded in base 62 ([0-9A-Za-z]).\n *\n * If you're using code generation, use the `Id` class typed for your data model in\n * `convex/_generated/dataModel.js`.\n *\n * @typeParam TableName - A string literal type of the table name (like \"users\").\n *\n * @public\n */\nexport class Id<TableName extends string> {\n  /**\n   * The table name this {@link GenericId} references.\n   */\n  public readonly tableName: TableName;\n\n  /**\n   * The identifier string.\n   *\n   * This contains the characters `[0-9A-Za-z]`.\n   */\n  public readonly id: string;\n\n  constructor(tableName: TableName, id: string) {\n    this.tableName = tableName;\n    this.id = id;\n  }\n\n  /**\n   * Check if this {@link GenericId} refers to the same document as another {@link GenericId}.\n   *\n   * @param other - The other {@link GenericId} to compare to.\n   * @returns `true` if the objects refer to the same document.\n   */\n  equals(other: unknown): boolean {\n    if (other instanceof Id) {\n      return this.tableName === other.tableName && this.id === other.id;\n    }\n    return false;\n  }\n\n  /**\n   * Parse a {@link GenericId} from its JSON representation.\n   */\n  static fromJSON(obj: any): Id<string> {\n    if (typeof obj.$id !== \"string\") {\n      throw new Error(\n        `Object ${JSON.stringify(obj)} isn't a valid Id: $id isn't a string.`\n      );\n    }\n    const parts = obj.$id.split(\"|\");\n    if (parts.length !== 2) {\n      throw new Error(\n        `Object ${JSON.stringify(obj)} isn't a valid Id: Wrong number of parts.`\n      );\n    }\n    return new Id(parts[0], parts[1]);\n  }\n\n  /**\n   * Convert a {@link GenericId} into its JSON representation.\n   */\n  toJSON(): JSONValue {\n    const idString = `${this.tableName}|${this.id}`;\n    return { $id: idString };\n  }\n\n  /**\n   * Convert a {@link GenericId} into its string representation.\n   *\n   * This includes the identifier but not the table name.\n   */\n  toString(): string {\n    return this.id;\n  }\n\n  /**\n   * Pretty-print this {@link GenericId} for debugging.\n   */\n  inspect(): string {\n    return `Id('${this.tableName}', '${this.id}')`;\n  }\n}\n\n/**\n * Internal type used in Convex code generation.\n *\n * @public\n */\nexport type GenericIdConstructor<TableNames extends string> = {\n  new <TableName extends TableNames>(\n    tableName: TableName,\n    id: string\n  ): Id<TableName>;\n  prototype: Id<string>;\n  fromJSON(obj: any): Id<string>;\n};\n\n/**\n * A value supported by Convex.\n *\n * Values can be:\n * - stored inside of documents.\n * - used as arguments and return types to queries and mutation functions.\n *\n * You can see the full set of supported types at\n * [Types](https://docs.convex.dev/using/types).\n *\n * @public\n */\nexport type Value =\n  | Id<string>\n  | null\n  | bigint\n  | number\n  | boolean\n  | string\n  | ArrayBuffer\n  | Value[]\n  | Set<Value>\n  | Map<Value, Value>\n  | { [key: string]: Value };\n\n/**\n * The types of {@link Value} that can be used to represent numbers.\n *\n * @public\n */\nexport type NumericValue = bigint | number;\n\nfunction isSpecial(n: number) {\n  return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n}\n\nexport function slowBigIntToBase64(value: bigint): string {\n  // the conversion is easy if we pretend it's unsigned\n  if (value < ZERO) {\n    value -= MIN_INT64 + MIN_INT64;\n  }\n  let hex = value.toString(16);\n  if (hex.length % 2 === 1) hex = \"0\" + hex;\n\n  const bytes = new Uint8Array(new ArrayBuffer(8));\n  let i = 0;\n  for (const hexByte of hex.match(/.{2}/g)!.reverse()) {\n    bytes.set([parseInt(hexByte, 16)], i++);\n    value >>= EIGHT;\n  }\n  return Base64.fromByteArray(bytes);\n}\n\nexport function slowBase64ToBigInt(encoded: string): bigint {\n  const integerBytes = Base64.toByteArray(encoded);\n  if (integerBytes.byteLength !== 8) {\n    throw new Error(\n      `Received ${integerBytes.byteLength} bytes, expected 8 for $integer`\n    );\n  }\n  let value = ZERO;\n  let power = ZERO;\n  for (const byte of integerBytes) {\n    value += BigInt(byte) * TWOFIFTYSIX ** power;\n    power++;\n  }\n  if (value > MAX_INT64) {\n    value += MIN_INT64 + MIN_INT64;\n  }\n  return value;\n}\n\nexport function modernBigIntToBase64(value: bigint): string {\n  if (value < MIN_INT64 || MAX_INT64 < value) {\n    throw new Error(\n      `BigInt ${value} does not fit into a 64-bit signed integer.`\n    );\n  }\n  const buffer = new ArrayBuffer(8);\n  new DataView(buffer).setBigInt64(0, value, true);\n  return Base64.fromByteArray(new Uint8Array(buffer));\n}\n\nexport function modernBase64ToBigInt(encoded: string): bigint {\n  const integerBytes = Base64.toByteArray(encoded);\n  if (integerBytes.byteLength !== 8) {\n    throw new Error(\n      `Received ${integerBytes.byteLength} bytes, expected 8 for $integer`\n    );\n  }\n  const intBytesView = new DataView(integerBytes.buffer);\n  return intBytesView.getBigInt64(0, true);\n}\n\n// Fall back to a slower version on Safari 14 which lacks these APIs.\nexport const bigIntToBase64 = (DataView.prototype as any).setBigInt64\n  ? modernBigIntToBase64\n  : slowBigIntToBase64;\nexport const base64ToBigInt = (DataView.prototype as any).getBigInt64\n  ? modernBase64ToBigInt\n  : slowBase64ToBigInt;\n\nconst MAX_IDENTIFIER_LEN = 64;\nconst ALL_UNDERSCORES = /^_+$/;\nconst IDENTIFIER_REGEX = /^[a-zA-Z_][a-zA-Z0-9_]{0,63}$/;\n\nfunction validateObjectField(k: string) {\n  if (k.length === 0) {\n    throw new Error(\"Empty field names are disallowed.\");\n  }\n  if (k.length > MAX_IDENTIFIER_LEN) {\n    throw new Error(\n      `Field name ${k} exceeds maximum field name length ${MAX_IDENTIFIER_LEN}.`\n    );\n  }\n  if (k.startsWith(\"$\")) {\n    throw new Error(`Field name ${k} starts with a '$', which is reserved.`);\n  }\n  if (ALL_UNDERSCORES.test(k)) {\n    throw new Error(`Field name ${k} can't exclusively be underscores.`);\n  }\n  if (!IDENTIFIER_REGEX.test(k)) {\n    throw new Error(\n      `Field name ${k} must only contain alphanumeric characters or underscores and can't start with a number.`\n    );\n  }\n}\n\nfunction jsonToConvexInternal(value: JSONValue): Value {\n  if (value === null) {\n    return value;\n  }\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n  if (typeof value === \"number\") {\n    return value;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  if (value instanceof Array) {\n    return value.map(jsonToConvexInternal);\n  }\n  if (typeof value !== \"object\") {\n    throw new Error(`Unexpected type of ${value}`);\n  }\n  const entries = Object.entries(value);\n  if (entries.length === 1) {\n    const key = entries[0][0];\n    if (key === \"$id\" || key === \"$weakRef\" || key === \"$strongRef\") {\n      return Id.fromJSON(value);\n    }\n    if (key === \"$bytes\") {\n      if (typeof value.$bytes !== \"string\") {\n        throw new Error(`Malformed $bytes field on ${value}`);\n      }\n      return Base64.toByteArray(value.$bytes).buffer;\n    }\n    if (key === \"$integer\") {\n      if (typeof value.$integer !== \"string\") {\n        throw new Error(`Malformed $integer field on ${value}`);\n      }\n      return base64ToBigInt(value.$integer);\n    }\n    if (key === \"$float\") {\n      if (typeof value.$float !== \"string\") {\n        throw new Error(`Malformed $float field on ${value}`);\n      }\n      const floatBytes = Base64.toByteArray(value.$float);\n      if (floatBytes.byteLength !== 8) {\n        throw new Error(\n          `Received ${floatBytes.byteLength} bytes, expected 8 for $float`\n        );\n      }\n      const floatBytesView = new DataView(floatBytes.buffer);\n      const float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n      if (!isSpecial(float)) {\n        throw new Error(`Float ${float} should be encoded as a number`);\n      }\n      return float;\n    }\n    if (key === \"$set\") {\n      if (!(value.$set instanceof Array)) {\n        throw new Error(`Malformed $set field on ${value}`);\n      }\n      return new Set(value.$set.map(jsonToConvexInternal));\n    }\n    if (key === \"$map\") {\n      if (!(value.$map instanceof Array)) {\n        throw new Error(`Malformed $map field on ${value}`);\n      }\n      const map = new Map();\n      for (const pair of value.$map) {\n        if (!(pair instanceof Array) || pair.length !== 2) {\n          throw new Error(`Malformed pair in $map ${value}`);\n        }\n        const k = jsonToConvexInternal(pair[0]);\n        const v = jsonToConvexInternal(pair[1]);\n        map.set(k, v);\n      }\n      return map;\n    }\n  }\n  const out: { [key: string]: Value } = {};\n  for (const [k, v] of Object.entries(value)) {\n    validateObjectField(k);\n    out[k] = jsonToConvexInternal(v);\n  }\n  return out;\n}\n\n/**\n * Parse a Convex value from its JSON representation.\n *\n * This function will revive classes like {@link GenericId} that have been serialized to JSON, parse out `BigInt`s, and so on.\n *\n * To learn more about Convex values, see [Types](https://docs.convex.dev/using/types).\n *\n * @param value - The JSON representation of a Convex value previously created with {@link convexToJson}.\n * @returns The JavaScript representation of the Convex value.\n *\n * @public\n */\nexport function jsonToConvex(value: JSONValue): Value {\n  return jsonToConvexInternal(value);\n}\n\nfunction stringifyValueForError(value: any) {\n  return JSON.stringify(value, (_key, value) => {\n    if (value === undefined) {\n      // By default `JSON.stringify` will serialize `undefined` to `null` which\n      // produces a confusing error message. Use `\"undefined\"` instead.\n      // Ideally we'd use a pretty-printing library that prints `undefined`\n      // (no quotes), but it might not be worth the bundle size cost.\n      return \"undefined\";\n    }\n    return value;\n  });\n}\n\nfunction convexToJsonInternal(\n  value: Value,\n  originalValue: Value,\n  context: string\n): JSONValue {\n  if (value === undefined) {\n    const contextText =\n      context &&\n      ` (present at path ${context} in original object ${stringifyValueForError(\n        originalValue\n      )})`;\n    throw new Error(\n      `undefined is not a valid Convex value${contextText}. To learn about Convex's supported types, see https://docs.convex.dev/using/types.`\n    );\n  }\n  if (value === null) {\n    return value;\n  }\n  if (value instanceof Id) {\n    return value.toJSON();\n  }\n  if (typeof value === \"bigint\") {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n      throw new Error(\n        `BigInt ${value} does not fit into a 64-bit signed integer.`\n      );\n    }\n    return { $integer: bigIntToBase64(value) };\n  }\n  if (typeof value === \"number\") {\n    if (isSpecial(value)) {\n      const buffer = new ArrayBuffer(8);\n      new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n      return { $float: Base64.fromByteArray(new Uint8Array(buffer)) };\n    } else {\n      return value;\n    }\n  }\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  if (value instanceof ArrayBuffer) {\n    return { $bytes: Base64.fromByteArray(new Uint8Array(value)) };\n  }\n  if (value instanceof Array) {\n    return value.map((value, i) =>\n      convexToJsonInternal(value, originalValue, context + `[${i}]`)\n    );\n  }\n  if (value instanceof Set) {\n    return {\n      $set: [...value].map((value, i) =>\n        convexToJsonInternal(value, originalValue, context + `.keys()[${i}]`)\n      ),\n    };\n  }\n  if (value instanceof Map) {\n    return {\n      $map: [...value].map(([k, v], i) => {\n        const jsonKey = convexToJsonInternal(\n          k,\n          originalValue,\n          context + `.keys()[${i}]`\n        );\n        const jsonValue = convexToJsonInternal(\n          v,\n          originalValue,\n          context + `.values()[${i}]`\n        );\n        return [jsonKey, jsonValue];\n      }),\n    };\n  }\n\n  if (typeof value !== \"object\") {\n    throw new Error(\n      `${value} is not a supported Convex type (present at path ${context} in original object ${stringifyValueForError(\n        originalValue\n      )}). To learn about Convex's supported types, see https://docs.convex.dev/using/types.`\n    );\n  }\n\n  const prototype = Object.getPrototypeOf(value);\n  if (prototype !== null && prototype !== Object.prototype) {\n    throw new Error(\n      `${value} is not a supported Convex type (present at path ${context} in original object ${stringifyValueForError(\n        originalValue\n      )}). To learn about Convex's supported types, see https://docs.convex.dev/using/types.`\n    );\n  }\n\n  const out: { [key: string]: JSONValue } = {};\n  for (const [k, v] of Object.entries(value)) {\n    validateObjectField(k);\n    out[k] = convexToJsonInternal(v, originalValue, context + `.${k}`);\n  }\n  return out;\n}\n\n/**\n * Convert a Convex value to its JSON representation.\n *\n * Use {@link jsonToConvex} to recreate the original value.\n *\n * To learn more about Convex values, see [Types](https://docs.convex.dev/using/types).\n *\n * @param value - A Convex value to convert into JSON.\n * @returns The JSON representation of `value`.\n *\n * @public\n */\nexport function convexToJson(value: Value): JSONValue {\n  return convexToJsonInternal(value, value, \"\");\n}\n", "// This is blue #9 from https://www.radix-ui.com/docs/colors/palette-composition/the-scales\n// It must look good in both light and dark mode.\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\n\nexport type UdfType = \"query\" | \"mutation\" | \"action\";\n\nfunction prefix_for_source(source: UdfType) {\n  switch (source) {\n    case \"query\":\n      return \"Q\";\n    case \"mutation\":\n      return \"M\";\n    case \"action\":\n      return \"A\";\n  }\n}\n\nexport function logToConsole(\n  type: \"info\" | \"error\",\n  source: UdfType,\n  udfPath: string,\n  message: string\n) {\n  const prefix = prefix_for_source(source);\n  if (type === \"info\") {\n    console.log(`%c[CONVEX ${prefix}(${udfPath})] ${message}`, INFO_COLOR);\n  } else {\n    console.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n  }\n}\n\nexport function logFatalError(message: string): Error {\n  const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n  console.error(errorMessage);\n  return new Error(errorMessage);\n}\n\nexport function createError(\n  source: UdfType,\n  udfPath: string,\n  message: string\n): Error {\n  const prefix = prefix_for_source(source);\n  return new Error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n}\n", "import { ActionRequest, ActionResponse, RequestId } from \"./protocol.js\";\nimport { jsonToConvex } from \"../../values/index.js\";\nimport { createError, logToConsole } from \"../logging.js\";\n\ntype ActionStatus = {\n  message: ActionRequest;\n  onResult: (result: any) => void;\n  onFailure: (reason: any) => void;\n};\n\nexport class ActionManager {\n  private inflightActions: Map<RequestId, ActionStatus>;\n\n  constructor() {\n    this.inflightActions = new Map();\n  }\n\n  request(message: ActionRequest): Promise<any> {\n    const result = new Promise((resolve, reject) => {\n      this.inflightActions.set(message.requestId, {\n        message,\n        onResult: resolve,\n        onFailure: reject,\n      });\n    });\n\n    return result;\n  }\n\n  /**\n   * Update the state after receiving a action response.\n   */\n  onResponse(response: ActionResponse) {\n    const actionInfo = this.inflightActions.get(response.requestId);\n    if (actionInfo === undefined) {\n      // Got a response of a message that we don't know about. That shouldn't\n      // really happen unless we get duplicate messages or something.\n      return;\n    }\n\n    this.inflightActions.delete(response.requestId);\n    const udfPath = actionInfo.message.udfPath;\n    for (const line of response.logLines) {\n      logToConsole(\"info\", \"action\", udfPath, line);\n    }\n    if (response.success) {\n      actionInfo.onResult(jsonToConvex(response.result));\n    } else {\n      logToConsole(\"error\", \"action\", udfPath, response.result);\n      actionInfo.onFailure(createError(\"action\", udfPath, response.result));\n    }\n  }\n\n  hasInflightActions(): boolean {\n    return this.inflightActions.size > 0;\n  }\n\n  restart() {\n    // Unlike mutations, actions are not idempotent. When we reconnect to the\n    // backend, we don't know if it is safe to resend in-flight actions, so we\n    // cancel them and consider them failed.\n    // TODO(presley): If we make the server remember it has started executing a\n    // function, we can resend here and remove browser to backend connectivity as\n    // a source of transient errors. For example, if a function has never reached\n    // the server, then we can safely execute it. If a function was executed\n    // successfully but response didn't reach the client. Server can return\n    // success on reconnect.\n    for (const [actionId, actionInfo] of this.inflightActions) {\n      this.inflightActions.delete(actionId);\n      const udfPath = actionInfo.message.udfPath;\n      actionInfo.onFailure(createError(\"action\", udfPath, \"Transient error\"));\n    }\n  }\n}\n", "import { convexToJson } from \"../../values/index.js\";\n\nexport function canonicalizeUdfPath(udfPath: string): string {\n  const pieces = udfPath.split(\":\");\n  let moduleName: string;\n  let functionName: string;\n  if (pieces.length === 1) {\n    moduleName = pieces[0];\n    functionName = \"default\";\n  } else {\n    moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n    functionName = pieces[pieces.length - 1];\n  }\n  if (!moduleName.endsWith(\".js\")) {\n    moduleName = `${moduleName}.js`;\n  }\n  return `${moduleName}:${functionName}`;\n}\n\n/**\n * A string representing the name and arguments of a query.\n *\n * This is used by the {@link InternalConvexClient}.\n *\n * @public\n */\nexport type QueryToken = string;\n\n// TODO(CX-749): Make this a unique representation (sort sets, dicts, objects)\nexport function serializePathAndArgs(udfPath: string, args: any[]): QueryToken {\n  return JSON.stringify({\n    udfPath: canonicalizeUdfPath(udfPath),\n    args: convexToJson(args),\n  });\n}\n", "import { convexToJson } from \"../../values/index.js\";\nimport {\n  AddQuery,\n  RemoveQuery,\n  QueryId,\n  QuerySetModification,\n  QuerySetVersion,\n  IdentityVersion,\n  Authenticate,\n  QueryJournal,\n  Transition,\n} from \"./protocol.js\";\nimport {\n  canonicalizeUdfPath,\n  QueryToken,\n  serializePathAndArgs,\n} from \"./udf_path_utils.js\";\n\ntype LocalQuery = {\n  id: QueryId;\n  canonicalizedUdfPath: string;\n  args: any[];\n  numSubscribers: number;\n  journal?: QueryJournal;\n};\n\nexport class LocalSyncState {\n  private nextQueryId: QueryId;\n  private querySetVersion: QuerySetVersion;\n  private readonly querySet: Map<QueryToken, LocalQuery>;\n  private readonly queryIdToToken: Map<QueryId, QueryToken>;\n  private identityVersion: IdentityVersion;\n  private auth?: { tokenType: \"Admin\" | \"User\"; value: string };\n\n  constructor() {\n    this.nextQueryId = 0;\n    this.querySetVersion = 0;\n    this.identityVersion = 0;\n    this.querySet = new Map();\n    this.queryIdToToken = new Map();\n  }\n\n  subscribe(\n    udfPath: string,\n    args: any[],\n    journal?: QueryJournal\n  ): {\n    queryToken: QueryToken;\n    modification: QuerySetModification | null;\n    unsubscribe: () => QuerySetModification | null;\n  } {\n    const canonicalizedUdfPath = canonicalizeUdfPath(udfPath);\n    const queryToken = serializePathAndArgs(canonicalizedUdfPath, args);\n\n    const existingEntry = this.querySet.get(queryToken);\n\n    if (existingEntry !== undefined) {\n      existingEntry.numSubscribers += 1;\n      return {\n        queryToken,\n        modification: null,\n        unsubscribe: () => this.removeSubscriber(queryToken),\n      };\n    } else {\n      const queryId = this.nextQueryId++;\n      const query: LocalQuery = {\n        id: queryId,\n        canonicalizedUdfPath,\n        args,\n        numSubscribers: 1,\n        journal,\n      };\n      this.querySet.set(queryToken, query);\n      this.queryIdToToken.set(queryId, queryToken);\n\n      const baseVersion = this.querySetVersion;\n      const newVersion = ++this.querySetVersion;\n\n      const add: AddQuery = {\n        type: \"Add\",\n        queryId,\n        udfPath: canonicalizedUdfPath,\n        args: args.map(convexToJson),\n        journal,\n      };\n      const modification: QuerySetModification = {\n        type: \"ModifyQuerySet\",\n        baseVersion,\n        newVersion,\n        modifications: [add],\n      };\n      return {\n        queryToken,\n        modification,\n        unsubscribe: () => this.removeSubscriber(queryToken),\n      };\n    }\n  }\n\n  saveQueryJournals(transition: Transition) {\n    for (const modification of transition.modifications) {\n      switch (modification.type) {\n        case \"QueryUpdated\":\n        case \"QueryFailed\": {\n          const journal = modification.journal;\n          if (journal !== undefined) {\n            const queryToken = this.queryIdToToken.get(modification.queryId);\n            // We may have already unsubscribed to this query by the time the server\n            // sends us the journal. If so, just ignore it.\n            if (queryToken !== undefined) {\n              this.querySet.get(queryToken)!.journal = journal;\n            }\n          }\n\n          break;\n        }\n        case \"QueryRemoved\": {\n          break;\n        }\n        default: {\n          // Enforce that the switch-case is exhaustive.\n          const _: never = modification;\n          throw new Error(`Invalid modification ${modification}`);\n        }\n      }\n    }\n  }\n\n  queryId(udfPath: string, args: any[]): QueryId | null {\n    const canonicalizedUdfPath = canonicalizeUdfPath(udfPath);\n    const queryToken = serializePathAndArgs(canonicalizedUdfPath, args);\n    const existingEntry = this.querySet.get(queryToken);\n    if (existingEntry !== undefined) {\n      return existingEntry.id;\n    }\n    return null;\n  }\n\n  setAuth(value: string): Authenticate {\n    this.auth = {\n      tokenType: \"User\",\n      value: value,\n    };\n    const baseVersion = this.identityVersion++;\n    return {\n      type: \"Authenticate\",\n      baseVersion: baseVersion,\n      ...this.auth,\n    };\n  }\n\n  setAdminAuth(value: string): Authenticate {\n    this.auth = {\n      tokenType: \"Admin\",\n      value: value,\n    };\n    const baseVersion = this.identityVersion++;\n    return {\n      type: \"Authenticate\",\n      baseVersion: baseVersion,\n      ...this.auth,\n    };\n  }\n\n  clearAuth(): Authenticate {\n    this.auth = undefined;\n    const baseVersion = this.identityVersion++;\n    return {\n      type: \"Authenticate\",\n      tokenType: \"None\",\n      baseVersion: baseVersion,\n    };\n  }\n\n  hasAuth(): boolean {\n    return !!this.auth;\n  }\n\n  isNewAuth(value: string): boolean {\n    return this.auth?.value !== value;\n  }\n\n  queryPath(queryId: QueryId): string | null {\n    const pathAndArgs = this.queryIdToToken.get(queryId);\n    if (pathAndArgs) {\n      return this.querySet.get(pathAndArgs)!.canonicalizedUdfPath;\n    }\n    return null;\n  }\n\n  queryArgs(queryId: QueryId): any[] | null {\n    const pathAndArgs = this.queryIdToToken.get(queryId);\n    if (pathAndArgs) {\n      return this.querySet.get(pathAndArgs)!.args;\n    }\n    return null;\n  }\n\n  queryToken(queryId: QueryId): string | null {\n    return this.queryIdToToken.get(queryId) ?? null;\n  }\n\n  queryJournal(queryToken: QueryToken): QueryJournal | undefined {\n    return this.querySet.get(queryToken)?.journal;\n  }\n\n  restart(): [QuerySetModification, Authenticate?] {\n    const modifications = [];\n    for (const localQuery of this.querySet.values()) {\n      const add: AddQuery = {\n        type: \"Add\",\n        queryId: localQuery.id,\n        udfPath: localQuery.canonicalizedUdfPath,\n        args: localQuery.args.map(convexToJson),\n        journal: localQuery.journal,\n      };\n      modifications.push(add);\n    }\n    this.querySetVersion = 1;\n    const querySet: QuerySetModification = {\n      type: \"ModifyQuerySet\",\n      baseVersion: 0,\n      newVersion: 1,\n      modifications,\n    };\n    // If there's no auth, no need to send an update as the server will also start with an unknown identity.\n    if (!this.auth) {\n      this.identityVersion = 0;\n      return [querySet, undefined];\n    }\n    const authenticate: Authenticate = {\n      type: \"Authenticate\",\n      baseVersion: 0,\n      ...this.auth,\n    };\n    this.identityVersion = 1;\n    return [querySet, authenticate];\n  }\n\n  private removeSubscriber(\n    queryToken: QueryToken\n  ): QuerySetModification | null {\n    const localQuery = this.querySet.get(queryToken)!;\n\n    if (localQuery.numSubscribers > 1) {\n      localQuery.numSubscribers -= 1;\n      return null;\n    } else {\n      this.querySet.delete(queryToken);\n      this.queryIdToToken.delete(localQuery.id);\n      const baseVersion = this.querySetVersion;\n      const newVersion = ++this.querySetVersion;\n      const remove: RemoveQuery = {\n        type: \"Remove\",\n        queryId: localQuery.id,\n      };\n      return {\n        type: \"ModifyQuerySet\",\n        baseVersion,\n        newVersion,\n        modifications: [remove],\n      };\n    }\n  }\n}\n", "import { jsonToConvex } from \"../../values/index.js\";\nimport { createError, logToConsole } from \"../logging.js\";\nimport { Long } from \"../long.js\";\nimport {\n  ClientMessage,\n  MutationRequest,\n  MutationResponse,\n  RequestId,\n} from \"./protocol.js\";\n\ntype RequestStatus =\n  | {\n      status: \"Requested\";\n      onResult: (result: any) => void;\n      onFailure: (reason: any) => void;\n    }\n  | {\n      status: \"Completed\";\n      onResolve: () => void;\n      ts: Long;\n    };\n\n// RequestManager tracks idempotent requests - Mutations.\nexport class RequestManager {\n  private inflightRequests: Map<\n    RequestId,\n    {\n      message: MutationRequest;\n      status: RequestStatus;\n    }\n  >;\n  constructor() {\n    this.inflightRequests = new Map();\n  }\n\n  request(message: MutationRequest): Promise<any> {\n    const result = new Promise((resolve, reject) => {\n      this.inflightRequests.set(message.requestId, {\n        message,\n        status: { status: \"Requested\", onResult: resolve, onFailure: reject },\n      });\n    });\n\n    return result;\n  }\n\n  /**\n   * Update the state after receiving a response.\n   *\n   * @returns A RequestId if the request is complete and its optimistic update\n   * can be dropped, null otherwise. Only applies to mutations.\n   */\n  onResponse(response: MutationResponse): RequestId | null {\n    const requestInfo = this.inflightRequests.get(response.requestId);\n    if (requestInfo === undefined) {\n      // Annoyingly we can occasionally get responses to mutations that we're no\n      // longer tracking. One flow where this happens is:\n      // 1. Client sends mutation 1\n      // 2. Client gets response for mutation 1. The sever says that it was committed at ts=10.\n      // 3. Client is disconnected\n      // 4. Client reconnects and re-issues queries and this mutation.\n      // 5. Server sends transition message to ts=20\n      // 6. Client drops mutation because it's already been observed.\n      // 7. Client receives a second response for mutation 1 but doesn't know about it anymore.\n\n      // The right fix for this is probably to add a reconciliation phase on\n      // reconnection where we receive responses to all the mutations before\n      // the transition message so this flow could never happen (CX-1513).\n\n      // For now though, we can just ignore this message.\n      return null;\n    }\n\n    // Because `.restart()` re-requests completed requests, we may get some\n    // responses for requests that are already in the \"Completed\" state.\n    // We can safely ignore those because we've already notified the UI about\n    // their results.\n    if (requestInfo.status.status !== \"Requested\") {\n      return null;\n    }\n\n    const udfType = \"mutation\";\n    const udfPath = requestInfo.message.udfPath;\n\n    for (const line of response.logLines) {\n      logToConsole(\"info\", udfType, udfPath, line);\n    }\n\n    const status = requestInfo.status;\n    let onResolve;\n    if (response.success) {\n      onResolve = () => status.onResult(jsonToConvex(response.result));\n    } else {\n      logToConsole(\"error\", udfType, udfPath, response.result);\n      onResolve = () =>\n        status.onFailure(createError(udfType, udfPath, response.result));\n    }\n\n    if (!response.success) {\n      // We can resolve Mutation failures immediately since they don't have any\n      // side effects.\n      onResolve();\n      this.inflightRequests.delete(response.requestId);\n      return response.requestId;\n    }\n\n    // We have to wait to resolve the request promise until after we transition\n    // past this timestamp so clients can read their own writes.\n    requestInfo.status = {\n      status: \"Completed\",\n      ts: response.ts,\n      onResolve,\n    };\n\n    return null;\n  }\n\n  // Removed completed requests and returns the set of completed\n  // mutations.\n  removeCompleted(ts: Long): Set<RequestId> {\n    const completeMutations: Set<RequestId> = new Set();\n    for (const [requestId, requestInfo] of this.inflightRequests.entries()) {\n      const status = requestInfo.status;\n      if (status.status === \"Completed\" && status.ts.lessThanOrEqual(ts)) {\n        status.onResolve();\n        if (requestInfo.message.type === \"Mutation\") {\n          completeMutations.add(requestId);\n        }\n        this.inflightRequests.delete(requestId);\n      }\n    }\n    return completeMutations;\n  }\n\n  restart(): ClientMessage[] {\n    // When we reconnect to the backend, re-request all the in-flight requests.\n\n    // This includes ones that have already been completed because we still\n    // want to tell the backend to transition the client past the completed\n    // timestamp. This is safe because mutations are idempotent.\n    const allMessages = [];\n    for (const value of this.inflightRequests.values()) {\n      allMessages.push(value.message);\n    }\n    return allMessages;\n  }\n\n  /**\n   ** @returns true if there are any requests that have been requested but have\n   ** not be completed yet.\n   **/\n  hasIncompleteRequests(): boolean {\n    for (const requestInfo of this.inflightRequests.values()) {\n      if (requestInfo.status.status === \"Requested\") {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   ** @returns true if there are any inflight requests, including ones that have\n   ** completed on the server, but have not been applied.\n   **/\n  hasInflightRequests(): boolean {\n    return this.inflightRequests.size > 0;\n  }\n}\n", "import { Value } from \"../../values/index.js\";\nimport { createError } from \"../logging.js\";\nimport { OptimisticLocalStore } from \"./optimistic_updates.js\";\nimport { RequestId } from \"./protocol.js\";\nimport { QueryResult } from \"./remote_query_set.js\";\nimport {\n  canonicalizeUdfPath,\n  QueryToken,\n  serializePathAndArgs,\n} from \"./udf_path_utils.js\";\n\n/**\n * An optimistic update function that has been curried over its arguments.\n */\ntype WrappedOptimisticUpdate = (locaQueryStore: OptimisticLocalStore) => void;\n\n/**\n * The implementation of `OptimisticLocalStore`.\n *\n * This class provides the interface for optimistic updates to modify query results.\n */\nclass OptimisticLocalStoreImpl implements OptimisticLocalStore {\n  // A references of the query results in OptimisticQueryResults\n  private readonly queryResults: QueryResultsMap;\n\n  // All of the queries modified by this class\n  readonly modifiedQueries: QueryToken[];\n\n  constructor(queryResults: QueryResultsMap) {\n    this.queryResults = queryResults;\n    this.modifiedQueries = [];\n  }\n\n  getQuery(name: string, args: Value[]): Value | undefined {\n    const query = this.queryResults.get(serializePathAndArgs(name, args));\n    if (query === undefined) {\n      return undefined;\n    }\n    return OptimisticLocalStoreImpl.queryValue(query.result);\n  }\n\n  getAllQueries(name: string): { args: Value[]; value: Value | undefined }[] {\n    const queriesWithName = [];\n    for (const query of this.queryResults.values()) {\n      if (query.udfPath === canonicalizeUdfPath(name)) {\n        queriesWithName.push({\n          args: query.args,\n          value: OptimisticLocalStoreImpl.queryValue(query.result),\n        });\n      }\n    }\n    return queriesWithName;\n  }\n\n  setQuery(name: string, args: Value[], value: Value | undefined): void {\n    const queryToken = serializePathAndArgs(name, args);\n\n    let result: QueryResult | undefined;\n    if (value === undefined) {\n      result = undefined;\n    } else {\n      result = {\n        success: true,\n        value,\n      };\n    }\n    const query: Query = {\n      udfPath: name,\n      args,\n      result,\n    };\n    this.queryResults.set(queryToken, query);\n    this.modifiedQueries.push(queryToken);\n  }\n\n  private static queryValue(\n    result: QueryResult | undefined\n  ): Value | undefined {\n    if (result === undefined) {\n      return undefined;\n    } else if (result.success) {\n      return result.value;\n    } else {\n      // If the query is an error state, just return `undefined` as though\n      // it's loading. Optimistic updates should already handle `undefined` well\n      // and there isn't a need to break the whole update because it tried\n      // to load a single query that errored.\n      return undefined;\n    }\n  }\n}\n\ntype OptimisticUpdateAndId = {\n  update: WrappedOptimisticUpdate;\n  mutationId: RequestId;\n};\n\ntype Query = {\n  // undefined means the query was set to be loading (undefined) in an optimistic update.\n  // Note that we can also have queries not present in the QueryResultMap\n  // at all because they are still loading from the server.\n  result: QueryResult | undefined;\n  udfPath: string;\n  args: Value[];\n};\nexport type QueryResultsMap = Map<QueryToken, Query>;\n\ntype ChangedQueries = QueryToken[];\n\n/**\n * A view of all of our query results with optimistic updates applied on top.\n */\nexport class OptimisticQueryResults {\n  private queryResults: QueryResultsMap;\n  private optimisticUpdates: OptimisticUpdateAndId[];\n\n  constructor() {\n    this.queryResults = new Map();\n    this.optimisticUpdates = [];\n  }\n\n  ingestQueryResultsFromServer(\n    serverQueryResults: QueryResultsMap,\n    optimisticUpdatesToDrop: Set<RequestId>\n  ): ChangedQueries {\n    this.optimisticUpdates = this.optimisticUpdates.filter(updateAndId => {\n      return !optimisticUpdatesToDrop.has(updateAndId.mutationId);\n    });\n\n    const oldQueryResults = this.queryResults;\n    this.queryResults = new Map(serverQueryResults);\n    const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n    for (const updateAndId of this.optimisticUpdates) {\n      updateAndId.update(localStore);\n    }\n\n    // To find the changed queries, just do a shallow comparison\n    // TODO(CX-733): Change this so we avoid unnecessary rerenders\n    const changedQueries: ChangedQueries = [];\n    for (const [queryToken, query] of this.queryResults) {\n      const oldQuery = oldQueryResults.get(queryToken);\n      if (oldQuery === undefined || oldQuery.result !== query.result) {\n        changedQueries.push(queryToken);\n      }\n    }\n\n    return changedQueries;\n  }\n\n  applyOptimisticUpdate(\n    update: WrappedOptimisticUpdate,\n    mutationId: RequestId\n  ): ChangedQueries {\n    // Apply the update to our store\n    this.optimisticUpdates.push({\n      update,\n      mutationId,\n    });\n    const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n    update(localStore);\n\n    // Notify about any query results that changed\n    // TODO(CX-733): Change this so we avoid unnecessary rerenders\n    return localStore.modifiedQueries;\n  }\n\n  queryResult(queryToken: QueryToken): Value | undefined {\n    const query = this.queryResults.get(queryToken);\n    if (query === undefined) {\n      return undefined;\n    }\n    const result = query.result;\n    if (result === undefined) {\n      return undefined;\n    } else if (result.success) {\n      return result.value;\n    } else {\n      throw createError(\"query\", query.udfPath, result.errorMessage);\n    }\n  }\n}\n", "// Implements an unsigned long.\n// This is a subset of https://github.com/dcodeIO/Long.js\n// `| 0` assures the runtime that we are using integer arithmetic\n\n// This works... but don't try to compare one to a real Long.js Long!\n// For internal use only.\nexport class Long {\n  low: number;\n  high: number;\n  __isUnsignedLong__: boolean;\n\n  static isLong(obj: Long) {\n    return (obj && obj.__isUnsignedLong__) === true;\n  }\n\n  constructor(low: number, high: number) {\n    this.low = low | 0;\n    this.high = high | 0;\n    this.__isUnsignedLong__ = true;\n  }\n\n  // prettier-ignore\n  static fromBytesLE(bytes: number[]): Long {\n    return new Long(\n      bytes[0] |\n      bytes[1] << 8 |\n      bytes[2] << 16 |\n      bytes[3] << 24,\n      bytes[4] |\n      bytes[5] << 8 |\n      bytes[6] << 16 |\n      bytes[7] << 24,\n    );\n  }\n\n  // prettier-ignore\n  toBytesLE() {\n    const hi = this.high;\n    const lo = this.low;\n    return [\n      lo & 0xff,\n      lo >>> 8 & 0xff,\n      lo >>> 16 & 0xff,\n      lo >>> 24,\n      hi & 0xff,\n      hi >>> 8 & 0xff,\n      hi >>> 16 & 0xff,\n      hi >>> 24\n    ];\n  }\n\n  static fromNumber(value: number) {\n    if (isNaN(value)) return UZERO;\n    if (value < 0) return UZERO;\n    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    return new Long(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0);\n  }\n\n  equals(other: Long) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  }\n\n  notEquals(other: Long) {\n    return !this.equals(other);\n  }\n\n  comp(other: Long) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.equals(other)) return 0;\n    return other.high >>> 0 > this.high >>> 0 ||\n      (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n      ? -1\n      : 1;\n  }\n\n  lessThanOrEqual(other: Long) {\n    return this.comp(/* validates */ other) <= 0;\n  }\n\n  static fromValue(val: any) {\n    if (typeof val === \"number\") return Long.fromNumber(val);\n    // Throws for non-objects, converts non-instanceof Long:\n    return new Long(val.low, val.high);\n  }\n}\n\nconst UZERO = new Long(0, 0);\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst MAX_UNSIGNED_VALUE = new Long(0xffffffff | 0, 0xffffffff | 0);\n", "import { jsonToConvex, Value } from \"../../values/index.js\";\nimport { Long } from \"../long.js\";\nimport { logToConsole } from \"../logging.js\";\nimport { QueryId, StateVersion, Transition } from \"./protocol.js\";\n\n/**\n * The result of running a query function on the server.\n *\n * If the function hit an exception it will have an `errorMessage`. Otherwise\n * it will produce a `Value`.\n *\n * @public\n */\nexport type QueryResult =\n  | {\n      success: true;\n      value: Value;\n    }\n  | { success: false; errorMessage: string };\n\n/**\n * A represention of the query results we've received on the current WebSocket\n * connection.\n */\nexport class RemoteQuerySet {\n  private version: StateVersion;\n  private readonly remoteQuerySet: Map<QueryId, QueryResult>;\n  private readonly queryPath: (queryId: QueryId) => string | null;\n\n  constructor(queryPath: (queryId: QueryId) => string | null) {\n    this.version = { querySet: 0, ts: Long.fromNumber(0), identity: 0 };\n    this.remoteQuerySet = new Map();\n    this.queryPath = queryPath;\n  }\n\n  transition(transition: Transition): void {\n    const start = transition.startVersion;\n    if (\n      this.version.querySet !== start.querySet ||\n      this.version.ts.notEquals(start.ts) ||\n      this.version.identity !== start.identity\n    ) {\n      throw new Error(`Invalid start version: ${start.ts}:${start.querySet}`);\n    }\n    for (const modification of transition.modifications) {\n      switch (modification.type) {\n        case \"QueryUpdated\": {\n          const queryPath = this.queryPath(modification.queryId);\n          if (queryPath) {\n            for (const line of modification.logLines) {\n              logToConsole(\"info\", \"query\", queryPath, line);\n            }\n          }\n          const value = jsonToConvex(modification.value ?? null);\n          this.remoteQuerySet.set(modification.queryId, {\n            success: true,\n            value,\n          });\n          break;\n        }\n        case \"QueryFailed\": {\n          const queryPath = this.queryPath(modification.queryId);\n          if (queryPath) {\n            for (const line of modification.logLines) {\n              logToConsole(\"info\", \"query\", queryPath, line);\n            }\n          }\n\n          this.remoteQuerySet.set(modification.queryId, {\n            success: false,\n            errorMessage: modification.errorMessage,\n          });\n          break;\n        }\n        case \"QueryRemoved\": {\n          this.remoteQuerySet.delete(modification.queryId);\n          break;\n        }\n        default: {\n          // Enforce that the switch-case is exhaustive.\n          const _: never = modification;\n          throw new Error(`Invalid modification ${modification}`);\n        }\n      }\n    }\n    this.version = transition.endVersion;\n  }\n\n  remoteQueryResults(): Map<QueryId, QueryResult> {\n    return this.remoteQuerySet;\n  }\n\n  timestamp(): Long {\n    return this.version.ts;\n  }\n}\n", "import * as Base64 from \"base64-js\";\nimport { JSONValue } from \"../../values/index.js\";\nimport { Long } from \"../long.js\";\n\n/**\n * Shared schema\n */\n\nexport function u64ToLong(encoded: EncodedU64): U64 {\n  const integerBytes = Base64.toByteArray(encoded);\n  return Long.fromBytesLE(Array.from(integerBytes));\n}\n\nexport function parseServerMessage(\n  encoded: EncodedServerMessage\n): ServerMessage {\n  switch (encoded.type) {\n    case \"FatalError\":\n    case \"AuthError\":\n    case \"ActionResponse\":\n    case \"Ping\": {\n      return { ...encoded };\n    }\n    case \"MutationResponse\": {\n      if (encoded.success) {\n        return { ...encoded, ts: u64ToLong(encoded.ts) };\n      } else {\n        return { ...encoded };\n      }\n    }\n    case \"Transition\": {\n      return {\n        ...encoded,\n        startVersion: {\n          ...encoded.startVersion,\n          ts: u64ToLong(encoded.startVersion.ts),\n        },\n        endVersion: {\n          ...encoded.endVersion,\n          ts: u64ToLong(encoded.endVersion.ts),\n        },\n      };\n    }\n    default: {\n      const _exhaustivenessCheck: never = encoded;\n    }\n  }\n  return undefined as never;\n}\n\ntype U64 = Long;\ntype EncodedU64 = string;\n\n/**\n * Unique nonnegative integer identifying a single query.\n */\nexport type QueryId = number; // nonnegative int\n\nexport type QuerySetVersion = number; // nonnegative int\n\nexport type RequestId = number; // nonnegative int\n\nexport type IdentityVersion = number; // nonnegative int\n\n/**\n * A serialized representation of decisions made during a query's execution.\n *\n * A journal is produced when a query function first executes and is re-used\n * when a query is re-executed.\n *\n * Currently this is used to store pagination end cursors to ensure\n * that pages of paginated queries will always end at the same cursor. This\n * enables gapless, reactive pagination.\n *\n * `null` is used to represent empty journals.\n * @public\n */\nexport type QueryJournal = string | null;\n\n/**\n * Client message schema\n */\n\ntype Connect = {\n  type: \"Connect\";\n  sessionId: string;\n  connectionCount: number;\n  lastCloseReason: string | null;\n};\n\nexport type AddQuery = {\n  type: \"Add\";\n  queryId: QueryId;\n  udfPath: string;\n  args: JSONValue[];\n  journal?: QueryJournal;\n};\n\nexport type RemoveQuery = {\n  type: \"Remove\";\n  queryId: QueryId;\n};\n\nexport type QuerySetModification = {\n  type: \"ModifyQuerySet\";\n  baseVersion: QuerySetVersion;\n  newVersion: QuerySetVersion;\n  modifications: (AddQuery | RemoveQuery)[];\n};\n\nexport type MutationRequest = {\n  type: \"Mutation\";\n  requestId: RequestId;\n  udfPath: string;\n  args: JSONValue[];\n};\n\nexport type ActionRequest = {\n  type: \"Action\";\n  requestId: RequestId;\n  udfPath: string;\n  args: JSONValue[];\n};\n\nexport type Authenticate =\n  | {\n      type: \"Authenticate\";\n      tokenType: \"Admin\";\n      value: string;\n      baseVersion: IdentityVersion;\n    }\n  | {\n      type: \"Authenticate\";\n      tokenType: \"User\";\n      value: string;\n      baseVersion: IdentityVersion;\n    }\n  | {\n      type: \"Authenticate\";\n      tokenType: \"None\";\n      baseVersion: IdentityVersion;\n    };\nexport type ClientMessage =\n  | Connect\n  | Authenticate\n  | QuerySetModification\n  | MutationRequest\n  | ActionRequest;\n\n/**\n * Server message schema\n */\ntype TS = U64;\ntype EncodedTS = EncodedU64;\ntype LogLines = string[];\n\nexport type StateVersion = {\n  querySet: QueryId;\n  ts: TS;\n  identity: IdentityVersion;\n};\ntype EncodedStateVersion = Omit<StateVersion, \"ts\"> & { ts: EncodedTS };\n\ntype StateModification =\n  | {\n      type: \"QueryUpdated\";\n      queryId: QueryId;\n      value: JSONValue;\n      logLines: LogLines;\n      // Optional because old backend versions don't send this.\n      journal?: QueryJournal;\n    }\n  | {\n      type: \"QueryFailed\";\n      queryId: QueryId;\n      errorMessage: string;\n      logLines: LogLines;\n      // Optional because old backend versions don't send this.\n      journal?: QueryJournal;\n    }\n  | {\n      type: \"QueryRemoved\";\n      queryId: QueryId;\n    };\n\nexport type Transition = {\n  type: \"Transition\";\n  startVersion: StateVersion;\n  endVersion: StateVersion;\n  modifications: StateModification[];\n};\n\ntype MutationSuccess = {\n  type: \"MutationResponse\";\n  requestId: RequestId;\n  success: true;\n  result: JSONValue;\n  ts: TS;\n  logLines: LogLines;\n};\ntype MutationFailed = {\n  type: \"MutationResponse\";\n  requestId: RequestId;\n  success: false;\n  result: string;\n  logLines: LogLines;\n};\nexport type MutationResponse = MutationSuccess | MutationFailed;\ntype ActionSuccess = {\n  type: \"ActionResponse\";\n  requestId: RequestId;\n  success: true;\n  result: JSONValue;\n  logLines: LogLines;\n};\ntype ActionFailed = {\n  type: \"ActionResponse\";\n  requestId: RequestId;\n  success: false;\n  result: string;\n  logLines: LogLines;\n};\nexport type ActionResponse = ActionSuccess | ActionFailed;\nexport type AuthError = {\n  type: \"AuthError\";\n  error: string;\n};\ntype FatalError = {\n  type: \"FatalError\";\n  error: string;\n};\ntype Ping = {\n  type: \"Ping\";\n};\n\nexport type ServerMessage =\n  | Transition\n  | MutationResponse\n  | ActionResponse\n  | FatalError\n  | AuthError\n  | Ping;\n\ntype EncodedTransition = Omit<Transition, \"startVersion\" | \"endVersion\"> & {\n  startVersion: EncodedStateVersion;\n  endVersion: EncodedStateVersion;\n};\ntype EncodedMutationSuccess = Omit<MutationSuccess, \"ts\"> & { ts: EncodedTS };\ntype EncodedMutationResponse = MutationFailed | EncodedMutationSuccess;\n\ntype EncodedServerMessage =\n  | EncodedTransition\n  | EncodedMutationResponse\n  | ActionResponse\n  | FatalError\n  | AuthError\n  | Ping;\n", "import {\n  ClientMessage,\n  parseServerMessage,\n  ServerMessage,\n} from \"./protocol.js\";\n\nconst CLOSE_NORMAL = 1000;\nconst CLOSE_NO_STATUS = 1005;\n\ntype PromisePair<T> = { promise: Promise<T>; resolve: (value: T) => void };\n\n/**\n * The various states our WebSocket can be in:\n *\n * - \"disconnected\": We don't have a WebSocket, but plan to create one.\n * - \"connecting\": We have created the WebSocket and are waiting for the\n *   `onOpen` callback.\n * - \"ready\": We have an open WebSocket.\n * - \"closing\": We called `.close()` on the WebSocket and are waiting for the\n *   `onClose` callback before we schedule a reconnect.\n * - \"stopping\": The application decided to totally stop the WebSocket. We are\n *    waiting for the `onClose` callback before we consider this WebSocket stopped.\n * - \"pausing\": The client needs to fetch some data before it makes sense to resume\n *    the WebSocket connection.\n * - \"paused\": The WebSocket was stopped and a new one can be created via `.resume()`.\n * - \"stopped\": We have stopped the WebSocket and will never create a new one.\n *\n *\n * WebSocket State Machine\n * -----------------------\n * initialState: disconnected\n * validTransitions:\n *   disconnected:\n *     new WebSocket() -> connecting\n *     stop() -> stopped\n *   connecting:\n *     onopen -> ready\n *     close() -> closing\n *     stop() -> stopping\n *   ready:\n *     close() -> closing\n *     pause() -> pausing\n *     stop() -> stopping\n *   closing:\n *     onclose -> disconnected\n *     stop() -> stopping\n *   pausing:\n *     onclose -> paused\n *     stop() -> stopping\n *   paused:\n *     resume() -> connecting\n *     stop() -> stopped\n *   stopping:\n *     onclose -> stopped\n * terminalStates:\n *   stopped\n */\ntype Socket =\n  | { state: \"disconnected\" }\n  | { state: \"connecting\"; ws: WebSocket }\n  | { state: \"ready\"; ws: WebSocket }\n  | { state: \"closing\" }\n  | { state: \"pausing\"; promisePair: PromisePair<null> }\n  | { state: \"paused\" }\n  | { state: \"stopping\"; promisePair: PromisePair<null> }\n  | { state: \"stopped\" };\n\nfunction promisePair<T>(): PromisePair<T> {\n  let resolvePromise: (value: T) => void;\n  const promise = new Promise<T>(resolve => {\n    resolvePromise = resolve;\n  });\n  return { promise, resolve: resolvePromise! };\n}\n\nexport type ReconnectMetadata = {\n  connectionCount: number;\n  lastCloseReason: string | null;\n};\n\n/**\n * A wrapper around a websocket that handles errors, reconnection, and message\n * parsing.\n */\nexport class WebSocketManager {\n  private socket: Socket;\n\n  private connectionCount: number;\n  private lastCloseReason: string | null;\n\n  /** Upon HTTPS/WSS failure, the first jittered backoff duration, in ms. */\n  private readonly initialBackoff: number;\n\n  /** We backoff exponentially, but we need to cap that--this is the jittered max. */\n  private readonly maxBackoff: number;\n\n  /** How many times have we failed consecutively? */\n  private retries: number;\n\n  /** How long before lack of server response causes us to initiate a reconnect,\n   * in ms */\n  private readonly serverInactivityThreshold: number;\n\n  private reconnectDueToServerInactivityTimeout: ReturnType<\n    typeof setTimeout\n  > | null;\n\n  private readonly uri: string;\n  private readonly onOpen: (reconnectMetadata: ReconnectMetadata) => void;\n  private readonly onMessage: (message: ServerMessage) => void;\n  private readonly webSocketConstructor: typeof WebSocket;\n\n  constructor(\n    uri: string,\n    onOpen: (reconnectMetadata: ReconnectMetadata) => void,\n    onMessage: (message: ServerMessage) => void,\n    webSocketConstructor: typeof WebSocket\n  ) {\n    this.webSocketConstructor = webSocketConstructor;\n    this.socket = { state: \"disconnected\" };\n    this.connectionCount = 0;\n    this.lastCloseReason = \"InitialConnect\";\n\n    this.initialBackoff = 100;\n    this.maxBackoff = 16000;\n    this.retries = 0;\n\n    this.serverInactivityThreshold = 30000;\n    this.reconnectDueToServerInactivityTimeout = null;\n\n    this.uri = uri;\n    this.onOpen = onOpen;\n    this.onMessage = onMessage;\n\n    // Kick off connection but don't wait for it.\n    void this.connect();\n  }\n\n  private async connect() {\n    if (\n      this.socket.state === \"closing\" ||\n      this.socket.state === \"stopping\" ||\n      this.socket.state === \"stopped\"\n    ) {\n      return;\n    }\n    if (\n      this.socket.state !== \"disconnected\" &&\n      this.socket.state !== \"paused\"\n    ) {\n      throw new Error(\"Didn't start connection from disconnected state\");\n    }\n\n    const ws = new this.webSocketConstructor(this.uri);\n    this.socket = {\n      state: \"connecting\",\n      ws,\n    };\n    ws.onopen = () => {\n      if (this.socket.state !== \"connecting\") {\n        throw new Error(\"onopen called with socket not in connecting state\");\n      }\n      this.socket = { state: \"ready\", ws };\n      this.onServerActivity();\n      this.onOpen({\n        connectionCount: this.connectionCount,\n        lastCloseReason: this.lastCloseReason,\n      });\n\n      if (this.lastCloseReason !== \"InitialConnect\") {\n        console.log(\"WebSocket reconnected\");\n      }\n\n      this.connectionCount += 1;\n      this.lastCloseReason = null;\n    };\n    // NB: The WebSocket API calls `onclose` even if connection fails, so we can route all error paths through `onclose`.\n    ws.onerror = error => {\n      const message = (error as ErrorEvent).message;\n      console.log(`WebSocket error: ${message}`);\n      this.closeAndReconnect(\"WebSocketError\");\n    };\n    ws.onmessage = message => {\n      // TODO(CX-1498): We reset the retry counter on any successful message.\n      // This is not ideal and we should improve this further.\n      this.retries = 0;\n      this.onServerActivity();\n      const serverMessage = parseServerMessage(JSON.parse(message.data));\n      this.onMessage(serverMessage);\n    };\n    ws.onclose = event => {\n      if (this.lastCloseReason === null) {\n        this.lastCloseReason = event.reason ?? \"OnCloseInvoked\";\n      }\n      if (event.code !== CLOSE_NORMAL && event.code !== CLOSE_NO_STATUS) {\n        let msg = `WebSocket closed unexpectedly with code ${event.code}`;\n        if (event.reason) {\n          msg += `: ${event.reason}`;\n        }\n        console.error(msg);\n      }\n      if (this.socket.state === \"stopping\") {\n        this.socket.promisePair.resolve(null);\n        this.socket = { state: \"stopped\" };\n        return;\n      }\n      if (this.socket.state === \"pausing\") {\n        this.socket.promisePair.resolve(null);\n        this.socket = { state: \"paused\" };\n        return;\n      }\n      this.socket = { state: \"disconnected\" };\n      const backoff = this.nextBackoff();\n      console.log(`Attempting reconnect in ${backoff}ms`);\n      setTimeout(() => this.connect(), backoff);\n    };\n  }\n\n  /**\n   * @returns The state of the {@link Socket}.\n   */\n  socketState(): string {\n    return this.socket.state;\n  }\n\n  sendMessage(message: ClientMessage) {\n    if (this.socket.state === \"ready\") {\n      const request = JSON.stringify(message);\n      try {\n        this.socket.ws.send(request);\n      } catch (error: any) {\n        console.log(\n          `Failed to send message on WebSocket, reconnecting: ${error}`\n        );\n        this.closeAndReconnect(\"FailedToSendMessage\");\n      }\n    }\n  }\n\n  private onServerActivity() {\n    if (this.reconnectDueToServerInactivityTimeout !== null) {\n      clearTimeout(this.reconnectDueToServerInactivityTimeout);\n      this.reconnectDueToServerInactivityTimeout = null;\n    }\n    this.reconnectDueToServerInactivityTimeout = setTimeout(() => {\n      this.closeAndReconnect(\"InactiveServer\");\n    }, this.serverInactivityThreshold);\n  }\n\n  /**\n   * Close the WebSocket and schedule a reconnect when it completes closing.\n   *\n   * This should be used when we hit an error and would like to restart the session.\n   */\n  private closeAndReconnect(closeReason: string) {\n    switch (this.socket.state) {\n      case \"disconnected\":\n      case \"closing\":\n      case \"stopping\":\n      case \"stopped\":\n      case \"pausing\":\n      case \"paused\":\n        // Nothing to do if we don't have a WebSocket.\n        return;\n      case \"connecting\":\n      case \"ready\":\n        this.lastCloseReason = closeReason;\n        this.socket.ws.close();\n        this.socket = {\n          state: \"closing\",\n        };\n        return;\n      default: {\n        // Enforce that the switch-case is exhaustive.\n        // eslint-disable-next-line  @typescript-eslint/no-unused-vars\n        const _: never = this.socket;\n      }\n    }\n  }\n\n  /**\n   * Close the WebSocket and do not reconnect.\n   * @returns A Promise that resolves when the WebSocket `onClose` callback is called.\n   */\n  async stop(): Promise<void> {\n    if (this.reconnectDueToServerInactivityTimeout) {\n      clearTimeout(this.reconnectDueToServerInactivityTimeout);\n    }\n    switch (this.socket.state) {\n      case \"stopped\":\n        return;\n      case \"connecting\":\n      case \"ready\":\n        this.socket.ws.close();\n        this.socket = {\n          state: \"stopping\",\n          promisePair: promisePair(),\n        };\n        await this.socket.promisePair.promise;\n        return;\n      case \"pausing\":\n      case \"closing\":\n        // We're already closing the WebSocket, so just upgrade the state\n        // to \"stopping\" so we don't reconnect.\n        this.socket = {\n          state: \"stopping\",\n          promisePair: promisePair(),\n        };\n        await this.socket.promisePair.promise;\n        return;\n      case \"paused\":\n      case \"disconnected\":\n        // If we're disconnected so switch the state to \"stopped\" so the reconnect\n        // timeout doesn't create a new WebSocket.\n        // If we're paused prevent a resume.\n        this.socket = { state: \"stopped\" };\n        return;\n      case \"stopping\":\n        await this.socket.promisePair.promise;\n        return;\n      default: {\n        // Enforce that the switch-case is exhaustive.\n        const _: never = this.socket;\n      }\n    }\n  }\n\n  async pause(): Promise<void> {\n    switch (this.socket.state) {\n      case \"stopping\":\n      case \"stopped\":\n        // If we're stopping we ignore pause\n        return;\n      case \"paused\":\n        return;\n      case \"connecting\":\n      case \"ready\":\n        this.socket.ws.close();\n        this.socket = {\n          state: \"pausing\",\n          promisePair: promisePair(),\n        };\n        await this.socket.promisePair.promise;\n        return;\n      case \"closing\":\n        // We're already closing the WebSocket, so just upgrade the state\n        // to \"pausing\" so we don't reconnect.\n        this.socket = {\n          state: \"pausing\",\n          promisePair: promisePair(),\n        };\n        await this.socket.promisePair.promise;\n        return;\n      case \"disconnected\":\n        // We're disconnected so switch the state to \"paused\" so the reconnect\n        // timeout doesn't create a new WebSocket.\n        this.socket = { state: \"paused\" };\n        return;\n      case \"pausing\":\n        await this.socket.promisePair.promise;\n        return;\n      default: {\n        // Enforce that the switch-case is exhaustive.\n        const _: never = this.socket;\n      }\n    }\n  }\n\n  /**\n   * Create a new WebSocket after a previous `pause()`, unless `stop()` was\n   * called before.\n   */\n  async resume(): Promise<void> {\n    switch (this.socket.state) {\n      case \"pausing\":\n      case \"paused\":\n        break;\n      case \"stopping\":\n      case \"stopped\":\n        // If we're stopping we ignore resume\n        return;\n      case \"connecting\":\n      case \"ready\":\n      case \"closing\":\n      case \"disconnected\":\n        throw new Error(\"`resume()` is only valid after `pause()`\");\n      default: {\n        // Enforce that the switch-case is exhaustive.\n        const _: never = this.socket;\n      }\n    }\n    if (this.socket.state === \"pausing\") {\n      await this.socket.promisePair.promise;\n    }\n    await this.connect();\n  }\n\n  private nextBackoff(): number {\n    const baseBackoff = this.initialBackoff * Math.pow(2, this.retries);\n    this.retries += 1;\n    const actualBackoff = Math.min(baseBackoff, this.maxBackoff);\n    const jitter = actualBackoff * (Math.random() - 0.5);\n    return actualBackoff + jitter;\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { GenericAPI } from \"../../api/index.js\";\nimport { version } from \"../../index.js\";\nimport { convexToJson, JSONValue, Value } from \"../../values/index.js\";\nimport { logFatalError } from \"../logging.js\";\nimport { ActionManager } from \"./action_manager.js\";\nimport { LocalSyncState } from \"./local_state.js\";\nimport { RequestManager } from \"./request_manager.js\";\nimport {\n  OptimisticLocalStore,\n  OptimisticUpdate,\n} from \"./optimistic_updates.js\";\nimport {\n  OptimisticQueryResults,\n  QueryResultsMap,\n} from \"./optimistic_updates_impl.js\";\nimport {\n  ActionRequest,\n  AuthError,\n  MutationRequest,\n  QueryId,\n  QueryJournal,\n  RequestId,\n  ServerMessage,\n} from \"./protocol.js\";\nimport { QueryResult, RemoteQuerySet } from \"./remote_query_set.js\";\nimport { QueryToken, serializePathAndArgs } from \"./udf_path_utils.js\";\nimport { ReconnectMetadata, WebSocketManager } from \"./web_socket_manager.js\";\n\n/**\n * Options for {@link InternalConvexClient}.\n *\n * @public\n */\nexport interface ClientOptions {\n  /**\n   * Whether to prompt the user if they have unsaved changes pending\n   * when navigating away or closing a web page.\n   *\n   * This is only possible when the `window` object exists, i.e. in a browser.\n   *\n   * The default value is `true`.\n   */\n  unsavedChangesWarning?: boolean;\n  /**\n   * Specifies an alternate\n   * [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n   * constructor to use for client communication with the Convex cloud.\n   * The default behavior is to use `WebSocket` from the global environment.\n   */\n  webSocketConstructor?: typeof WebSocket;\n}\n\n/**\n * State describing the client's connection with the Convex backend.\n *\n * @public\n */\nexport type ConnectionState = {\n  hasInflightRequests: boolean;\n  isWebSocketConnected: boolean;\n};\n\n/**\n * An async function returning the JWT-encoded OpenID Connect Identity Token\n * if available.\n * See {@link ConvexReactClient.setAuth}.\n *\n * @public\n */\nexport type AuthTokenFetcher = () => Promise<string | null | undefined>;\n\nconst DEFAULT_OPTIONS = {\n  unsavedChangesWarning: true,\n};\n\n/**\n * Low-level client for directly integrating state management libraries\n * with Convex.\n *\n * Most developers should use higher level clients, like\n * the {@link ConvexHttpClient} or the React hook based {@link react.ConvexReactClient}.\n *\n * @public\n */\nexport class InternalConvexClient {\n  private readonly state: LocalSyncState;\n  private readonly requestManager: RequestManager;\n  private readonly actionManager: ActionManager;\n  private readonly webSocketManager: WebSocketManager;\n  private remoteQuerySet: RemoteQuerySet;\n  private readonly optimisticQueryResults: OptimisticQueryResults;\n  private readonly onTransition: (updatedQueries: QueryToken[]) => void;\n  private nextRequestId: RequestId;\n  private readonly sessionId: string;\n  private fetchToken: null | (() => Promise<string | null | undefined>) = null;\n\n  /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed.\n   * @param options - See {@link ClientOptions} for a full description.\n   */\n  constructor(\n    address: string,\n    onTransition: (updatedQueries: QueryToken[]) => void,\n    options?: ClientOptions\n  ) {\n    if (typeof address === \"object\") {\n      throw new Error(\n        \"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\"\n      );\n    }\n    options = { ...DEFAULT_OPTIONS, ...options };\n    let webSocketConstructor = options.webSocketConstructor;\n    if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n      throw new Error(\n        \"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\"\n      );\n    }\n    webSocketConstructor = webSocketConstructor || WebSocket;\n\n    // Substitute http(s) with ws(s)\n    const i = address.search(\"://\");\n    if (i === -1) {\n      throw new Error(\"Provided address was not an absolute URL.\");\n    }\n    const origin = address.substring(i + 3); // move past the double slash\n    const protocol = address.substring(0, i);\n    let wsProtocol;\n    if (protocol === \"http\") {\n      wsProtocol = \"ws\";\n    } else if (protocol === \"https\") {\n      wsProtocol = \"wss\";\n    } else {\n      throw new Error(`Unknown parent protocol ${protocol}`);\n    }\n    const wsUri = `${wsProtocol}://${origin}/api/${version}/sync`;\n\n    this.state = new LocalSyncState();\n    this.remoteQuerySet = new RemoteQuerySet(queryId =>\n      this.state.queryPath(queryId)\n    );\n    this.requestManager = new RequestManager();\n    this.actionManager = new ActionManager();\n    this.optimisticQueryResults = new OptimisticQueryResults();\n    this.onTransition = onTransition;\n    this.nextRequestId = 0;\n    this.sessionId = uuidv4();\n\n    const { unsavedChangesWarning } = options;\n    if (typeof window === \"undefined\" && unsavedChangesWarning) {\n      throw new Error(\n        \"unsavedChangesWarning enabled, but no window object found! Navigating away from the page could cause in-flight mutations to be dropped. Pass {unsavedChangesWarning: false} in Convex client options to disable this feature.\"\n      );\n    }\n\n    // Listen for tab close events and notify the user on unsaved changes.\n    unsavedChangesWarning &&\n      window.addEventListener(\"beforeunload\", e => {\n        if (\n          this.requestManager.hasIncompleteRequests() ||\n          this.actionManager.hasInflightActions()\n        ) {\n          // There are 3 different ways to trigger this pop up so just try all of\n          // them.\n\n          e.preventDefault();\n          // This confirmation message doesn't actually appear in most modern\n          // browsers but we tried.\n          const confirmationMessage =\n            \"Are you sure you want to leave? Your changes may not be saved.\";\n          (e || window.event).returnValue = confirmationMessage;\n          return confirmationMessage;\n        }\n      });\n\n    this.webSocketManager = new WebSocketManager(\n      wsUri,\n      (reconnectMetadata: ReconnectMetadata) => {\n        // We have a new WebSocket!\n\n        this.webSocketManager.sendMessage({\n          ...reconnectMetadata,\n          type: \"Connect\",\n          sessionId: this.sessionId,\n        });\n\n        // Throw out our remote query, reissue queries\n        // and outstanding mutations, and reauthenticate.\n        this.remoteQuerySet = new RemoteQuerySet(queryId =>\n          this.state.queryPath(queryId)\n        );\n        const [querySetModification, authModification] = this.state.restart();\n        if (authModification) {\n          this.webSocketManager.sendMessage(authModification);\n        }\n        this.webSocketManager.sendMessage(querySetModification);\n        this.actionManager.restart();\n        for (const message of this.requestManager.restart()) {\n          this.webSocketManager.sendMessage(message);\n        }\n      },\n      (serverMessage: ServerMessage) => {\n        switch (serverMessage.type) {\n          case \"Transition\": {\n            this.remoteQuerySet.transition(serverMessage);\n            this.state.saveQueryJournals(serverMessage);\n            // No optimistic updates for workflows.\n            const completedMutations = this.requestManager.removeCompleted(\n              this.remoteQuerySet.timestamp()\n            );\n            this.notifyOnQueryResultChanges(completedMutations);\n            break;\n          }\n          case \"MutationResponse\": {\n            const completedMutationId =\n              this.requestManager.onResponse(serverMessage);\n            if (completedMutationId) {\n              this.notifyOnQueryResultChanges(new Set([completedMutationId]));\n            }\n            break;\n          }\n          case \"ActionResponse\": {\n            this.actionManager.onResponse(serverMessage);\n            break;\n          }\n          case \"AuthError\": {\n            this.tryToReauthenticate(serverMessage)\n              .then()\n              .catch(error => {\n                logFatalError(error);\n                // TODO(CX-3070): This ignores a failed Promise\n                void this.webSocketManager.stop();\n              });\n            break;\n          }\n          case \"FatalError\": {\n            const error = logFatalError(serverMessage.error);\n            void this.webSocketManager.stop();\n            throw error;\n          }\n          case \"Ping\":\n            break; // do nothing\n          default: {\n            const _typeCheck: never = serverMessage;\n          }\n        }\n      },\n      webSocketConstructor\n    );\n  }\n\n  /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */\n  private notifyOnQueryResultChanges(completedMutations: Set<RequestId>) {\n    const remoteQueryResults: Map<QueryId, QueryResult> =\n      this.remoteQuerySet.remoteQueryResults();\n    const queryTokenToValue: QueryResultsMap = new Map();\n    for (const [queryId, result] of remoteQueryResults) {\n      const queryToken = this.state.queryToken(queryId);\n      // It's possible that we've already unsubscribed to this query but\n      // the server hasn't learned about that yet. If so, ignore this one.\n\n      if (queryToken !== null) {\n        const query = {\n          result,\n          udfPath: this.state.queryPath(queryId)!,\n          args: this.state.queryArgs(queryId)!,\n        };\n        queryTokenToValue.set(queryToken, query);\n      }\n    }\n\n    this.onTransition(\n      this.optimisticQueryResults.ingestQueryResultsFromServer(\n        queryTokenToValue,\n        completedMutations\n      )\n    );\n  }\n\n  async setAuth(fetchToken: AuthTokenFetcher) {\n    this.fetchToken = fetchToken;\n    const token = await fetchToken();\n    if (token) {\n      this.authenticate(token);\n    } else if (this.state.hasAuth()) {\n      this.clearAuth();\n    }\n  }\n\n  // Stop the webSocket so that we don't retry with bad auth\n  private async tryToReauthenticate(serverMessage: AuthError) {\n    if (!this.fetchToken) {\n      throw new Error(serverMessage.error);\n    }\n    console.log(\"Attempting to reauthenticate\");\n    await this.webSocketManager.pause();\n    const token = await this.fetchToken();\n    if (token && this.state.isNewAuth(token)) {\n      this.state.setAuth(token);\n    } else if (this.state.hasAuth()) {\n      console.log(\"Reauthentication failed, clearing auth\");\n      this.state.clearAuth();\n    }\n    await this.webSocketManager.resume();\n  }\n\n  private authenticate(token: string) {\n    const message = this.state.setAuth(token);\n    this.webSocketManager.sendMessage(message);\n  }\n\n  /** @internal */\n  setAdminAuth(value: string) {\n    const message = this.state.setAdminAuth(value);\n    this.webSocketManager.sendMessage(message);\n  }\n\n  clearAuth() {\n    const message = this.state.clearAuth();\n    this.webSocketManager.sendMessage(message);\n  }\n\n  /**\n   * Subscribe to a query function.\n   *\n   * Whenever this query's result changes, the `onTransition` callback\n   * passed into the constructor will be called.\n   *\n   * @param name - The name of the query.\n   * @param args - An array of the arguments to the query.\n   * @param journal - An (optional) journal produced from a previous\n   * execution of this query function. Note that if this query function with\n   * these arguments has already been requested the journal will have no effect.\n   * @returns An object containing a {@link QueryToken} corresponding to this\n   * query and an `unsubscribe` callback.\n   */\n  subscribe(\n    name: string,\n    args: any[],\n    journal?: QueryJournal\n  ): { queryToken: QueryToken; unsubscribe: () => void } {\n    // `subscribe` used to collect the arguments with a rest operator\n    // (like `...args`). Double check that it's an array to make sure developers\n    // have updated their code.\n    if (!Array.isArray(args)) {\n      throw new Error(\n        `Query arguments to \\`InternalConvexClient.subcribe\\` must be an array. Received ${args}.`\n      );\n    }\n\n    const { modification, queryToken, unsubscribe } = this.state.subscribe(\n      name,\n      args,\n      journal\n    );\n    if (modification !== null) {\n      this.webSocketManager.sendMessage(modification);\n    }\n    // TODO: Use FinalizationRegistry?\n    return {\n      queryToken,\n      unsubscribe: () => {\n        const modification = unsubscribe();\n        if (modification) {\n          this.webSocketManager.sendMessage(modification);\n        }\n      },\n    };\n  }\n\n  /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   */\n  localQueryResult(udfPath: string, args: any[]): Value | undefined {\n    const queryToken = serializePathAndArgs(udfPath, args);\n    return this.optimisticQueryResults.queryResult(queryToken);\n  }\n\n  /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - An array of arguments to this query.\n   * @returns The query's {@link QueryJournal} or `undefined`.\n   */\n  queryJournal(name: string, args: any[]): QueryJournal | undefined {\n    const queryToken = serializePathAndArgs(name, args);\n    return this.state.queryJournal(queryToken);\n  }\n\n  /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */\n  connectionState(): ConnectionState {\n    return {\n      hasInflightRequests:\n        this.requestManager.hasInflightRequests() ||\n        this.actionManager.hasInflightActions(),\n      isWebSocketConnected: this.webSocketManager.socketState() === \"ready\",\n    };\n  }\n\n  async mutate<Args extends any[]>(\n    udfPath: string,\n    args: Args,\n    optimisticUpdate: OptimisticUpdate<GenericAPI, Args> | null = null\n  ): Promise<any> {\n    const requestId = this.nextRequestId;\n    this.nextRequestId++;\n\n    if (optimisticUpdate !== null) {\n      const wrappedUpdate = (localQueryStore: OptimisticLocalStore) => {\n        optimisticUpdate(localQueryStore, ...args);\n      };\n      const changedQueries = this.optimisticQueryResults.applyOptimisticUpdate(\n        wrappedUpdate,\n        requestId\n      );\n      this.onTransition(changedQueries);\n    }\n\n    const message: MutationRequest = {\n      type: \"Mutation\",\n      requestId,\n      udfPath,\n      args: convexToJson(args) as JSONValue[],\n    };\n    const result = this.requestManager.request(message);\n    this.webSocketManager.sendMessage(message);\n    return result;\n  }\n\n  async action<Args extends any[]>(udfPath: string, args: Args): Promise<any> {\n    const requestId = this.nextRequestId;\n    this.nextRequestId++;\n\n    const message: ActionRequest = {\n      type: \"Action\",\n      requestId,\n      udfPath,\n      args: convexToJson(args) as JSONValue[],\n    };\n\n    const result = this.actionManager.request(message);\n    this.webSocketManager.sendMessage(message);\n    return result;\n  }\n\n  async close(): Promise<void> {\n    return this.webSocketManager.stop();\n  }\n}\n", "import { useEffect, useState } from \"react\";\n\n/**\n * This code is taken from https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n * because correct subscriptions in async React is complex!\n */\n\n// Hook used for safely managing subscriptions in concurrent mode.\n//\n// In order to avoid removing and re-adding subscriptions each time this hook is called,\n// the parameters passed to this hook should be memoized in some way\u2013\n// either by wrapping the entire params object with useMemo()\n// or by wrapping the individual callbacks with useCallback().\nexport function useSubscription<Value>({\n  // (Synchronously) returns the current value of our subscription.\n  getCurrentValue,\n\n  // This function is passed an event handler to attach to the subscription.\n  // It should return an unsubscribe function that removes the handler.\n  subscribe,\n}: {\n  getCurrentValue: () => Value;\n  subscribe: (callback: () => void) => () => void;\n}): Value {\n  // Read the current value from our subscription.\n  // When this value changes, we'll schedule an update with React.\n  // It's important to also store the hook params so that we can check for staleness.\n  // (See the comment in checkForUpdates() below for more info.)\n  const [state, setState] = useState(() => ({\n    getCurrentValue,\n    subscribe,\n    value: getCurrentValue(),\n  }));\n\n  let valueToReturn = state.value;\n\n  // If parameters have changed since our last render, schedule an update with its current value.\n  if (\n    state.getCurrentValue !== getCurrentValue ||\n    state.subscribe !== subscribe\n  ) {\n    // If the subscription has been updated, we'll schedule another update with React.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    valueToReturn = getCurrentValue();\n\n    setState({\n      getCurrentValue,\n      subscribe,\n      value: valueToReturn,\n    });\n  }\n\n  // It is important not to subscribe while rendering because this can lead to memory leaks.\n  // (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n  // Instead, we wait until the commit phase to attach our handler.\n  //\n  // We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n  // so that we don't stretch the commit phase.\n  // This also has an added benefit when multiple components are subscribed to the same source:\n  // It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n  // (Learn more at https://codesandbox.io/s/k0yvr5970o)\n  useEffect(() => {\n    let didUnsubscribe = false;\n\n    const checkForUpdates = () => {\n      // It's possible that this callback will be invoked even after being unsubscribed,\n      // if it's removed as a result of a subscription event/update.\n      // In this case, React will log a DEV warning about an update from an unmounted component.\n      // We can avoid triggering that warning with this check.\n      if (didUnsubscribe) {\n        return;\n      }\n\n      setState(prevState => {\n        // Ignore values from stale sources!\n        // Since we subscribe an unsubscribe in a passive effect,\n        // it's possible that this callback will be invoked for a stale (previous) subscription.\n        // This check avoids scheduling an update for that stale subscription.\n        if (\n          prevState.getCurrentValue !== getCurrentValue ||\n          prevState.subscribe !== subscribe\n        ) {\n          return prevState;\n        }\n\n        // Some subscriptions will auto-invoke the handler, even if the value hasn't changed.\n        // If the value hasn't changed, no update is needed.\n        // Return state as-is so React can bail out and avoid an unnecessary render.\n        const value = getCurrentValue();\n        if (prevState.value === value) {\n          return prevState;\n        }\n\n        return { ...prevState, value };\n      });\n    };\n    const unsubscribe = subscribe(checkForUpdates);\n\n    // Because we're subscribing in a passive effect,\n    // it's possible that an update has occurred between render and our effect handler.\n    // Check for this and schedule an update if work has occurred.\n    checkForUpdates();\n\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [getCurrentValue, subscribe]);\n\n  // Return the current value for our caller to use while rendering.\n  return valueToReturn;\n}\n", "import { convexToJson, Value } from \"../values/index.js\";\nimport { useMemo, useState } from \"react\";\nimport { RequestForQueries, useQueriesGeneric } from \"./use_queries.js\";\nimport { GenericAPI, NamedQuery } from \"../api/index.js\";\nimport { OptimisticLocalStore } from \"../browser/index.js\";\nimport { PaginationOptions, PaginationResult } from \"../server/index.js\";\nimport { PickByValue } from \"../type_utils.js\";\n\n/**\n * Load data reactively from a paginated query to a create a growing list.\n *\n * This can be used to power \"infinite scroll\" UIs.\n *\n * This hook must be used with Convex query functions that match\n * {@link PaginatedQueryFunction}. This means they must:\n * 1. Have a first argument must be an object containing `numItems` and `cursor`.\n * 2. Return a {@link server.PaginationResult}.\n *\n * `usePaginatedQueryGeneric` concatenates all the pages\n * of results into a single list and manages the continuation cursors when\n * requesting more items.\n *\n * Example usage:\n * ```typescript\n * const { results, status, loadMore } = usePaginatedQueryGeneric(\n *   \"listMessages\",\n *   { initialNumItems: 5 },\n *   \"#general\"\n * );\n * ```\n *\n * If the query `name` or `args` change, the pagination state will be reset\n * to the first page. Similarly, if any of the pages result in an InvalidCursor\n * or QueryScannedTooManyDocuments error, the pagination state will also reset\n * to the first page.\n *\n * To learn more about pagination, see [Paginated Queries](https://docs.convex.dev/using/pagination).\n *\n * If you're using code generation, use the `usePaginatedQuery` function in\n * `convex/_generated/react.js` which is typed for your API.\n *\n * @param name - The name of the query function.\n * @param options - An object specifying the `initialNumItems` to be loaded in\n * the first page.\n * @param args - The arguments to the query function, excluding the first.\n * @returns A {@link UsePaginatedQueryResult} that includes the currently loaded\n * items, the status of the pagination, and a `loadMore` function.\n *\n * @public\n */\nexport function usePaginatedQueryGeneric(\n  name: string,\n  options: { initialNumItems: number },\n  ...args: Value[]\n): UsePaginatedQueryResult<any> {\n  const createInitialState = useMemo(() => {\n    return () => {\n      const id = nextPaginationId();\n      return {\n        name,\n        args,\n        id,\n        maxQueryIndex: 0,\n        queries: {\n          0: {\n            name,\n            args: [\n              {\n                numItems: options.initialNumItems,\n                cursor: null,\n                id,\n              },\n              ...args,\n            ],\n          },\n        },\n      };\n    };\n    // ESLint doesn't like that we're stringifying the args. We do this because\n    // we want to avoid rerendering if the args are a different\n    // object that serializes to the same result.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(convexToJson(args)), name, options.initialNumItems]);\n\n  const [state, setState] = useState<{\n    name: string;\n    args: Value[];\n    id: number;\n    maxQueryIndex: number;\n    queries: RequestForQueries;\n  }>(createInitialState);\n\n  // `currState` is the state that we'll render based on.\n  let currState = state;\n  if (\n    name !== state.name ||\n    JSON.stringify(convexToJson(args)) !==\n      JSON.stringify(convexToJson(state.args))\n  ) {\n    currState = createInitialState();\n    setState(currState);\n  }\n\n  const resultsObject = useQueriesGeneric(currState.queries);\n\n  const [results, maybeLastResult]: [\n    Value[],\n    undefined | PaginationResult<Value>\n  ] = useMemo(() => {\n    let currResult = undefined;\n\n    const allItems = [];\n    for (let i = 0; i <= currState.maxQueryIndex; i++) {\n      currResult = resultsObject[i];\n      if (currResult === undefined) {\n        break;\n      }\n\n      if (currResult instanceof Error) {\n        if (\n          currResult.message.includes(\"InvalidCursor\") ||\n          currResult.message.includes(\"QueryScannedTooManyDocuments\")\n        ) {\n          // `useInifinteQuery` handles a few types of query errors:\n\n          // 1. InvalidCursor: If the cursor is invalid, probably the paginated\n          // database query was data-dependent and changed underneath us. The\n          // cursor in the params or journal no longer matches the current\n          // database query.\n          // 2. QueryScannedTooManyDocuments: Likely so many elements were\n          // added to a single page they hit our limit.\n\n          // In both cases we want to restart pagination to throw away all our\n          // existing cursors.\n          setState(createInitialState);\n          return [[], undefined];\n        } else {\n          throw currResult;\n        }\n      }\n      allItems.push(...currResult.page);\n    }\n    return [allItems, currResult];\n  }, [resultsObject, currState.maxQueryIndex, createInitialState]);\n\n  const statusAndLoadMore = useMemo(() => {\n    if (maybeLastResult === undefined) {\n      return {\n        status: \"LoadingMore\",\n        loadMore: undefined,\n      } as const;\n    }\n    if (maybeLastResult.isDone) {\n      return {\n        status: \"Exhausted\",\n        loadMore: undefined,\n      } as const;\n    }\n    const continueCursor = maybeLastResult.continueCursor;\n    let alreadyLoadingMore = false;\n    return {\n      status: \"CanLoadMore\",\n      loadMore: (numItems: number) => {\n        if (!alreadyLoadingMore) {\n          alreadyLoadingMore = true;\n          setState(prevState => {\n            const maxQueryIndex = prevState.maxQueryIndex + 1;\n            const queries = { ...prevState.queries };\n            queries[maxQueryIndex] = {\n              name: prevState.name,\n              args: [\n                { numItems, cursor: continueCursor, id: prevState.id },\n                ...prevState.args,\n              ],\n            };\n            return {\n              ...prevState,\n              maxQueryIndex,\n              queries,\n            };\n          });\n        }\n      },\n    } as const;\n  }, [maybeLastResult]);\n\n  return {\n    results,\n    ...statusAndLoadMore,\n  };\n}\n\nlet paginationId = 0;\n/**\n * Generate a new, unique ID for a pagination session.\n *\n * Every usage of {@link usePaginatedQueryGeneric} puts a unique ID into the\n * query function arguments as a \"cache-buster\". This serves two purposes:\n *\n * 1. All calls to {@link usePaginatedQueryGeneric} have independent query\n * journals.\n *\n * Every time we start a new pagination session, we'll load the first page of\n * results and receive a fresh journal. Without the ID, we might instead reuse\n * a query subscription already present in our client. This isn't desirable\n * because the existing query function result may have grown or shrunk from the\n * requested `initialNumItems`.\n *\n * 2. We can restart the pagination session on some types of errors.\n *\n * Sometimes we want to restart pagination from the beginning if we hit an error.\n * Similar to (1), we'd like to ensure that this new session actually requests\n * its first page from the server and doesn't reuse a query result already\n * present in the client that may have hit the error.\n *\n * @returns The pagination ID.\n */\nfunction nextPaginationId(): number {\n  paginationId++;\n  return paginationId;\n}\n\n/**\n * The result of calling the {@link usePaginatedQueryGeneric} hook.\n *\n * This includes:\n * 1. `results` - An array of the currently loaded results.\n * 2. `status` - The status of the pagination. The possible statuses are:\n *   - \"CanLoadMore\": This query may have more items to fetch. Call `loadMore` to\n *   fetch another page.\n *   - \"LoadingMore\": We're currently loading another page of results.\n *   - \"Exhausted\": We've paginated to the end of the list.\n * 3. `loadMore` A callback to fetch more results. This will be `undefined`\n * unless the status is \"CanLoadMore\".\n *\n * @public\n */\nexport type UsePaginatedQueryResult<T> = {\n  results: T[];\n} & (\n  | {\n      status: \"CanLoadMore\";\n      loadMore: (numItems: number) => void;\n    }\n  | {\n      status: \"LoadingMore\";\n      loadMore: undefined;\n    }\n  | {\n      status: \"Exhausted\";\n      loadMore: undefined;\n    }\n);\n\n/**\n * A query function that is usable with {@link usePaginatedQueryGeneric}.\n *\n * The function's first argument must be a {@link server.PaginationOptions} object.\n * The function must return a {@link server.PaginationResult}.\n *\n * @public\n */\nexport type PaginatedQueryFunction<Args extends any[], ReturnType> = (\n  paginationOptions: PaginationOptions,\n  ...args: Args\n) => PaginationResult<ReturnType>;\n\n/**\n * The names of the paginated query functions in a Convex API.\n *\n * These are normal query functions that match {@link PaginatedQueryFunction}.\n *\n * @public\n */\nexport type PaginatedQueryNames<API extends GenericAPI> = keyof PickByValue<\n  API[\"queries\"],\n  PaginatedQueryFunction<any, any>\n> &\n  string;\n\n/**\n * The type of the arguments to a {@link PaginatedQueryFunction}.\n *\n * This type includes all the arguments after the initial\n * {@link server.PaginationOptions} argument.\n *\n * @public\n */\nexport type PaginatedQueryArgs<Query extends PaginatedQueryFunction<any, any>> =\n  Query extends PaginatedQueryFunction<infer Args, any> ? Args : never;\n\n/**\n * The return type of a {@link PaginatedQueryFunction}.\n *\n * This is the type of the inner document or object within the\n * {@link server.PaginationResult} that a paginated query function returns.\n *\n * @public\n */\nexport type PaginatedQueryReturnType<\n  Query extends PaginatedQueryFunction<any, any>\n> = Query extends PaginatedQueryFunction<any, infer ReturnType>\n  ? ReturnType\n  : never;\n\n/**\n * Internal type helper used by Convex code generation.\n *\n * Used to give {@link usePaginatedQueryGeneric} a type specific to your API.\n *\n * @public\n */\nexport type UsePaginatedQueryForAPI<API extends GenericAPI> = <\n  Name extends PaginatedQueryNames<API>\n>(\n  name: Name,\n  options: { initialNumItems: number },\n  ...args: PaginatedQueryArgs<NamedQuery<API, Name>>\n) => UsePaginatedQueryResult<PaginatedQueryReturnType<NamedQuery<API, Name>>>;\n\n/**\n * Optimistically update the values in a paginated list.\n *\n * This optimistic update is designed to be used to update data loaded with\n * {@link usePaginatedQueryGeneric}. It updates the list by applying\n * `updateValue` to each element of the list across all of the loaded pages.\n *\n * This will only apply to queries with a matching names and arguments.\n *\n * Example usage:\n * ```ts\n * const myMutation = useMutation(\"myMutationName\")\n * .withOptimisticUpdate((localStore, mutationArg) => {\n *\n *   // Optimistically update the document with ID `mutationArg`\n *   // to have an additional property.\n *\n *   optimisticallyUpdateValueInPaginatedQuery(\n *     localStore,\n *     \"paginatedQueryName\",\n *     [],\n *     currentValue => {\n *       if (mutationArg.equals(currentValue._id)) {\n *         return {\n *           ...currentValue,\n *           \"newProperty\": \"newValue\",\n *         };\n *       }\n *       return currentValue;\n *     }\n *   );\n *\n * });\n * ```\n *\n * @param name - The name of the paginated query function.\n * @param args - The arguments to the query function, excluding the first.\n * @param updateValue - A function to produce the new values.\n *\n * @public\n */\nexport function optimisticallyUpdateValueInPaginatedQuery<\n  API extends GenericAPI,\n  Name extends PaginatedQueryNames<API>\n>(\n  localStore: OptimisticLocalStore<API>,\n  name: Name,\n  args: PaginatedQueryArgs<NamedQuery<API, Name>>,\n  updateValue: (\n    currentValue: PaginatedQueryReturnType<NamedQuery<API, Name>>\n  ) => PaginatedQueryReturnType<NamedQuery<API, Name>>\n): void {\n  // TODO(CX-749): This should really be sorted JSON or an `equals` method\n  // so that the order of properties in sets, maps, and objects doesn't break\n  // our comparison.\n  const expectedArgs = JSON.stringify(convexToJson(args));\n\n  for (const query of localStore.getAllQueries(name)) {\n    if (\n      query.value !== undefined &&\n      query.args.length >= 1 &&\n      JSON.stringify(convexToJson(query.args.slice(1))) === expectedArgs\n    ) {\n      const value = query.value;\n      if (\n        typeof value === \"object\" &&\n        value !== null &&\n        Array.isArray(value.page)\n      ) {\n        localStore.setQuery(name, query.args, {\n          ...value,\n          page: value.page.map(updateValue),\n        });\n      }\n    }\n  }\n}\n", "import { Value } from \"../values/index.js\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useConvexGeneric } from \"./index.js\";\nimport { GenericAPI, NamedQuery, QueryNames } from \"../api/index.js\";\nimport { CreateWatch, QueriesObserver } from \"./queries_observer.js\";\nimport { useSubscription } from \"./use_subscription.js\";\nimport { QueryJournal } from \"../browser/index.js\";\n\n/**\n * Load a variable number of reactive Convex queries.\n *\n * `useQueriesGeneric` is similar to {@link useQueryGeneric} but it allows\n * loading multiple queries which can be useful for loading a dynamic number\n * of queries without violating the rules of React hooks.\n *\n * This hook accepts an object whose keys are identifiers for each query and the\n * values are objects of `{ name: string, args: Value[] }`. The `name` is the\n * name of the Convex query function to load, and the `args` are the arguments to\n * that function.\n *\n * The hook returns an object that maps each identifier to the result of the query,\n * `undefined` if the query is still loading, or an instance of `Error` if the query\n * threw an exception.\n *\n * For example if you loaded a query like:\n * ```typescript\n * const results = useQueriesGeneric({\n *   messagesInGeneral: {\n *     name: \"listMessages\",\n *     args: [\"#general\"]\n *   }\n * });\n * ```\n * then the result would look like:\n * ```typescript\n * {\n *   messagesInGeneral: [{\n *     channel: \"#general\",\n *     body: \"hello\"\n *     _id: ...,\n *     _creationTime: ...\n *   }]\n * }\n * ```\n *\n * This React hook contains internal state that will cause a rerender\n * whenever any of the query results change.\n *\n * Throws an error if not used under {@link ConvexProvider}.\n *\n * If you're using code generation, use the `useQueries` function in\n * `convex/_generated/react.js` which is typed for your API.\n *\n * @param queries - An object mapping identifiers to objects of\n * `{name: string, args: Value[] }` describing which query functions to fetch.\n * @returns An object with the same keys as the input. The values are the result\n * of the query function, `undefined` if it's still loading, or an `Error` if\n * it threw an exception.\n *\n * @public\n */\nexport function useQueriesGeneric(\n  queries: RequestForQueries\n): Record<string, any | undefined | Error> {\n  const convex = useConvexGeneric();\n  if (convex === undefined) {\n    throw new Error(\n      \"Could not find Convex client! `useQueries` must be used in the React component \" +\n        \"tree under `ConvexProvider`. Did you forget it? \" +\n        \"See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\"\n    );\n  }\n  const createWatch = useMemo(() => {\n    return (name: string, args: Value[], journal?: QueryJournal) => {\n      return convex.watchQuery(name, args, journal);\n    };\n  }, [convex]);\n  return useQueriesHelper(queries, createWatch);\n}\n\n/**\n * Internal version of `useQueriesGeneric` that is exported for testing.\n */\nexport function useQueriesHelper(\n  queries: RequestForQueries,\n  createWatch: CreateWatch\n): Record<string, any | undefined | Error> {\n  const [observer] = useState(() => new QueriesObserver(createWatch));\n  const [effectRan, setEffectRan] = useState(false);\n\n  if (observer.createWatch !== createWatch) {\n    observer.setCreateWatch(createWatch);\n  }\n\n  // Unsubscribe from all queries on unmount.\n  useEffect(() => {\n    setEffectRan(true);\n    return () => {\n      observer.destroy();\n    };\n  }, [observer]);\n\n  const subscription = useMemo(() => {\n    // Any time the queries change, update our observer.\n    // Correctness notes:\n    // 1. `observer.setQueries` could subscribe us to new queries. They are\n    // cleaned up in `observer.destroy()`, but that may never get called!\n    // React may render a component and then throw it out without running\n    // the effects or their destructors. For satefy, we should only subscribe\n    // if the effects have run and the destructor has been configured.\n    // 2. We're calling this during render so it could happen multiple times!\n    // This is okay though because `setQueries` is written to be idempotent.\n    // 3. When the queries change, we want to immediately return the results of\n    // the new queries. This happens because we recreate the `getCurrentValue`\n    // callback and `useSubscription` re-executes it.\n    if (effectRan) {\n      observer.setQueries(queries);\n    }\n\n    return {\n      getCurrentValue: () => {\n        if (effectRan) {\n          return observer.getCurrentQueries();\n        } else {\n          // If the effect hasn't run yet, our `observer` doesn't have the\n          // current queries. Manually set all the results to `undefined`.\n          // Once the effect runs, we'll rerender and actually pull the results\n          // from the Convex client.\n          const value: Record<string, undefined> = {};\n          for (const identifier in Object.keys(queries)) {\n            value[identifier] = undefined;\n          }\n          return value;\n        }\n      },\n      subscribe: (callback: () => void) => observer.subscribe(callback),\n    };\n  }, [observer, queries, effectRan]);\n\n  return useSubscription(subscription);\n}\n\n/**\n * An object representing a request to load multiple queries.\n *\n * The keys of this object are identifiers and the values are objects containing\n * the name of the query function and the arguments to pass to it.\n *\n * This is used as an argument to {@link useQueriesGeneric}.\n * @public\n */\nexport type RequestForQueries = Record<\n  string,\n  {\n    name: string;\n    args: Value[];\n  }\n>;\n\n/**\n * Internal type helper used by Convex code generation.\n *\n * Used to give {@link useQueriesGeneric} a type specific to your API.\n *\n * @public\n */\nexport type UseQueriesForAPI<API extends GenericAPI> = <\n  QueryNameMap extends Record<string, QueryNames<API>>\n>(queries: {\n  [Identifier in keyof QueryNameMap]: {\n    name: QueryNameMap[Identifier];\n    args: Parameters<NamedQuery<API, QueryNameMap[Identifier]>>;\n  };\n}) => {\n  [Identifier in keyof QueryNameMap]:\n    | ReturnType<NamedQuery<API, QueryNameMap[Identifier]>>\n    | undefined\n    | Error;\n};\n", "import { convexToJson, Value } from \"../values/index.js\";\nimport { Watch } from \".\";\nimport { QueryJournal } from \"../browser/sync/protocol.js\";\n\ntype Identifier = string;\n\ntype QueryInfo = {\n  name: string;\n  args: Value[];\n  watch: Watch<Value>;\n  unsubscribe: () => void;\n};\n\nexport type CreateWatch = (\n  name: string,\n  args: Value[],\n  journal?: QueryJournal\n) => Watch<Value>;\n\n/**\n * A class for observing the results of multiple queries at the same time.\n *\n * Any time the result of a query changes, the listeners are notified.\n */\nexport class QueriesObserver {\n  public createWatch: CreateWatch;\n  private queries: Record<Identifier, QueryInfo>;\n  private listeners: Set<() => void>;\n\n  constructor(createWatch: CreateWatch) {\n    this.createWatch = createWatch;\n    this.queries = {};\n    this.listeners = new Set();\n  }\n\n  setQueries(newQueries: Record<Identifier, { name: string; args: Value[] }>) {\n    // Add the new queries before unsubscribing from the old ones so that\n    // the deduping in the `ConvexReactClient` can help if there are duplicates.\n    for (const identifier of Object.keys(newQueries)) {\n      const { name, args } = newQueries[identifier];\n\n      if (this.queries[identifier] === undefined) {\n        // No existing query => add it.\n        this.addQuery(identifier, name, args);\n      } else {\n        const existingInfo = this.queries[identifier];\n        if (\n          name !== existingInfo.name ||\n          JSON.stringify(convexToJson(args)) !==\n            JSON.stringify(convexToJson(existingInfo.args))\n        ) {\n          // Existing query that doesn't match => remove the old and add the new.\n          this.removeQuery(identifier);\n          this.addQuery(identifier, name, args);\n        }\n      }\n    }\n\n    // Prune all the existing queries that we no longer need.\n    for (const identifier of Object.keys(this.queries)) {\n      if (newQueries[identifier] === undefined) {\n        this.removeQuery(identifier);\n      }\n    }\n  }\n\n  subscribe(listener: () => void): () => void {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  getCurrentQueries(): Record<Identifier, Value | undefined | Error> {\n    const result: Record<Identifier, Value | Error | undefined> = {};\n    for (const identifier of Object.keys(this.queries)) {\n      let value: Value | undefined | Error;\n      try {\n        value = this.queries[identifier].watch.localQueryResult();\n      } catch (e) {\n        // Only collect instances of `Error` because thats how callers\n        // will distinguish errors from normal results.\n        if (e instanceof Error) {\n          value = e;\n        } else {\n          throw e;\n        }\n      }\n      result[identifier] = value;\n    }\n    return result;\n  }\n\n  setCreateWatch(createWatch: CreateWatch) {\n    this.createWatch = createWatch;\n    // If we have a new watch, we might be using a new Convex client.\n    // Recreate all the watches being careful to preserve the journals.\n    for (const identifier of Object.keys(this.queries)) {\n      const { name, args, watch } = this.queries[identifier];\n      const journal = watch.journal();\n      this.removeQuery(identifier);\n      this.addQuery(identifier, name, args, journal);\n    }\n  }\n\n  destroy() {\n    for (const identifier of Object.keys(this.queries)) {\n      this.removeQuery(identifier);\n    }\n    this.listeners = new Set();\n  }\n\n  private addQuery(\n    identifier: Identifier,\n    name: string,\n    args: Value[],\n    journal?: QueryJournal\n  ) {\n    if (this.queries[identifier] !== undefined) {\n      throw new Error(\n        `Tried to add a new query with identifier ${identifier} when it already exists.`\n      );\n    }\n    const watch = this.createWatch(name, args, journal);\n    const unsubscribe = watch.onUpdate(() => this.notifyListeners());\n    this.queries[identifier] = {\n      name,\n      args,\n      watch,\n      unsubscribe,\n    };\n  }\n\n  private removeQuery(identifier: Identifier) {\n    const info = this.queries[identifier];\n    if (info === undefined) {\n      throw new Error(`No query found with identifier ${identifier}.`);\n    }\n    info.unsubscribe();\n    delete this.queries[identifier];\n  }\n\n  private notifyListeners(): void {\n    for (const listener of this.listeners) {\n      listener();\n    }\n  }\n}\n", "import { GenericAPI, MutationNames } from \"../browser/index.js\";\nimport { StorageId } from \"../server/storage.js\";\nimport { useMutationGeneric } from \"../react/index.js\";\n\n/**\n * TODO(CX-2960) Use codegen to make non-generic version\n *\n * @internal\n */\nexport function useUploadGeneric<\n  API extends GenericAPI,\n  Name extends MutationNames<API>\n>(name: Name): (file: File) => Promise<StorageId> {\n  const generateUploadUrl = useMutationGeneric(name);\n\n  return async (file: File): Promise<StorageId> => {\n    const postUrl = await generateUploadUrl();\n    const res = await fetch(postUrl, {\n      method: \"POST\",\n      headers: { \"Content-Type\": file.type },\n      body: file,\n    });\n    if (res.status === 200) {\n      const { storageId } = await res.json();\n      return storageId;\n    } else {\n      const { code, message } = await res.json();\n      console.error(`${res.status} ${res.statusText}: ${code}: ${message}`);\n      throw new Error(`${res.status} ${res.statusText}: ${code}: ${message}`);\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["toByteArray", "fromByteArray", "len", "i", "len2", "value", "Base64", "modification", "import_react", "import_react", "import_react", "React", "ReactDOM", "DEFAULT_OPTIONS", "currentListeners"]
}
