{
  "version": 3,
  "sources": ["../../../src/server/scheduler.ts"],
  "sourcesContent": ["import {\n  ActionNames,\n  GenericAPI,\n  MutationNames,\n  NamedAction,\n  NamedMutation,\n} from \"../browser\";\n\ntype SchedulableFunctionNames<API extends GenericAPI> =\n  | ActionNames<API>\n  | MutationNames<API>;\n\ntype NamedSchedulableFunction<\n  API extends GenericAPI,\n  Name extends SchedulableFunctionNames<API>\n> = NamedMutation<API, Name> | NamedAction<API, Name>;\n\n/**\n * An interface to schedule Convex functions. The scheduled functions are scheduled\n * and executed only if the function that is scheduling them completes successfully.\n *\n * You can schedule either mutations or actions. Mutations are guaranteed to execute\n * exactly once - they are automatically retried on transient errors and either execute\n * successfully or fail deterministically due to developer error in defining the\n * function. Actions execute at most once - they are not retried and might fail\n * due to transient errors.\n *\n * @public\n */\nexport interface Scheduler<API extends GenericAPI> {\n  /**\n   * Schedule a function to execute after a delay.\n   *\n   * @param delayMs - delay in milliseconds. Must be non-negative. If the delay\n   * is zero, the scheduled function will be due to execute immediately after the\n   * scheduling one completes.\n   * @param name - the name of the function to schedule.\n   * @param args - arguments to call the scheduled functions with.\n   **/\n  runAfter<Name extends SchedulableFunctionNames<API>>(\n    delayMs: number,\n    name: Name,\n    ...args: Parameters<NamedSchedulableFunction<API, Name>>\n  ): Promise<void>;\n\n  /**\n   * Schedule a function to execute at a given timestamp.\n   *\n   * @param timestamp - a Date or a timestamp (milliseconds since the epoch).\n   * If the timestamp is in the past, the scheduled function will be due to\n   * execute immediately after the scheduling one completes. The timestamp can't\n   * be more than five years in the past or more than five years in the future.\n   * @param name - the name of the function to schedule.\n   * @param args - arguments to call the scheduled functions with.\n   **/\n  runAt<Name extends SchedulableFunctionNames<API>>(\n    timestamp: number | Date,\n    name: Name,\n    ...args: Parameters<NamedSchedulableFunction<API, Name>>\n  ): Promise<void>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
