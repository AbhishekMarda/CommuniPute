{
  "version": 3,
  "sources": ["../../../../src/server/impl/search_filter_builder_impl.ts"],
  "sourcesContent": ["import { convexToJson, JSONValue } from \"../../values/values.js\";\nimport {\n  FieldTypeFromFieldPath,\n  GenericDocument,\n  GenericSearchIndexConfig,\n} from \"../data_model.js\";\nimport {\n  SearchFilter,\n  SearchFilterBuilder,\n  SearchFilterFinalizer,\n} from \"../search_filter_builder.js\";\n\nexport type SerializedSearchFilter =\n  | {\n      type: \"Search\";\n      fieldPath: string;\n      value: string;\n    }\n  | {\n      type: \"Eq\";\n      fieldPath: string;\n      value: JSONValue;\n    };\n\nexport class SearchFilterBuilderImpl\n  extends SearchFilter\n  implements\n    SearchFilterBuilder<GenericDocument, GenericSearchIndexConfig>,\n    SearchFilterFinalizer<GenericDocument, GenericSearchIndexConfig>\n{\n  private filters: ReadonlyArray<SerializedSearchFilter>;\n  private isConsumed: boolean;\n  private constructor(filters: ReadonlyArray<SerializedSearchFilter>) {\n    super();\n    this.filters = filters;\n    this.isConsumed = false;\n  }\n\n  static new(): SearchFilterBuilderImpl {\n    return new SearchFilterBuilderImpl([]);\n  }\n\n  private consume() {\n    if (this.isConsumed) {\n      throw new Error(\n        \"SearchFilterBuilder has already been used! Chain your method calls like `q => q.search(...).eq(...)`.\"\n      );\n    }\n    this.isConsumed = true;\n  }\n\n  search(\n    fieldName: string,\n    query: string\n  ): SearchFilterFinalizer<GenericDocument, GenericSearchIndexConfig> {\n    this.consume();\n    return new SearchFilterBuilderImpl(\n      this.filters.concat({\n        type: \"Search\",\n        fieldPath: fieldName,\n        value: query,\n      })\n    );\n  }\n  eq<FieldName extends string>(\n    fieldName: FieldName,\n    value: FieldTypeFromFieldPath<GenericDocument, FieldName>\n  ): SearchFilterFinalizer<GenericDocument, GenericSearchIndexConfig> {\n    this.consume();\n    return new SearchFilterBuilderImpl(\n      this.filters.concat({\n        type: \"Eq\",\n        fieldPath: fieldName,\n        value: convexToJson(value),\n      })\n    );\n  }\n\n  export() {\n    this.consume();\n    return this.filters;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwC;AAMxC,mCAIO;AAcA,MAAM,gCACH,0CAIV;AAAA,EAGU,YAAY,SAAgD;AAClE,UAAM;AACN,SAAK,UAAU;AACf,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,OAAO,MAA+B;AACpC,WAAO,IAAI,wBAAwB,CAAC,CAAC;AAAA,EACvC;AAAA,EAEQ,UAAU;AAChB,QAAI,KAAK,YAAY;AACnB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AACA,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,OACE,WACA,OACkE;AAClE,SAAK,QAAQ;AACb,WAAO,IAAI;AAAA,MACT,KAAK,QAAQ,OAAO;AAAA,QAClB,MAAM;AAAA,QACN,WAAW;AAAA,QACX,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,GACE,WACA,OACkE;AAClE,SAAK,QAAQ;AACb,WAAO,IAAI;AAAA,MACT,KAAK,QAAQ,OAAO;AAAA,QAClB,MAAM;AAAA,QACN,WAAW;AAAA,QACX,WAAO,4BAAa,KAAK;AAAA,MAC3B,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,SAAS;AACP,SAAK,QAAQ;AACb,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": []
}
