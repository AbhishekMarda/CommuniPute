{
  "version": 3,
  "sources": ["../../../../src/server/impl/scheduler_impl.ts"],
  "sourcesContent": ["import { convexToJson } from \"../../values/index.js\";\nimport { version } from \"../../index.js\";\nimport { performAsyncSyscall } from \"./syscall.js\";\n\nexport function setupMutationScheduler() {\n  return {\n    runAfter: async (delayMs: number, name: string, ...args: any[]) => {\n      const syscallArgs = runAfterSyscallArgs(delayMs, name, args);\n      return await performAsyncSyscall(\"schedule\", syscallArgs);\n    },\n    runAt: async (\n      ms_since_epoch_or_date: number | Date,\n      name: string,\n      ...args: any[]\n    ) => {\n      const syscallArgs = runAtSyscallArgs(ms_since_epoch_or_date, name, args);\n      return await performAsyncSyscall(\"schedule\", syscallArgs);\n    },\n  };\n}\n\nexport function setupActionScheduler(requestId: string) {\n  return {\n    runAfter: async (delayMs: number, name: string, ...args: any[]) => {\n      const syscallArgs = {\n        requestId,\n        ...runAfterSyscallArgs(delayMs, name, args),\n      };\n      return await performAsyncSyscall(\"actions/schedule\", syscallArgs);\n    },\n    runAt: async (\n      ms_since_epoch_or_date: number | Date,\n      name: string,\n      ...args: any[]\n    ) => {\n      const syscallArgs = {\n        requestId,\n        ...runAtSyscallArgs(ms_since_epoch_or_date, name, args),\n      };\n      return await performAsyncSyscall(\"actions/schedule\", syscallArgs);\n    },\n  };\n}\n\nfunction runAfterSyscallArgs(delayMs: number, name: string, args: any[]) {\n  if (typeof delayMs !== \"number\") {\n    throw new Error(\"`delayMs` must be a number\");\n  }\n  if (!isFinite(delayMs)) {\n    throw new Error(\"`delayMs` must be a finite number\");\n  }\n  if (delayMs < 0) {\n    throw new Error(\"`delayMs` must be non-negative\");\n  }\n  // Note the syscall expects a unix timestamp, measured in seconds.\n  const ts = (Date.now() + delayMs) / 1000.0;\n  return {\n    name,\n    ts,\n    args: convexToJson(args),\n    version,\n  };\n}\n\nfunction runAtSyscallArgs(\n  ms_since_epoch_or_date: number | Date,\n  name: string,\n  args: any[]\n) {\n  let ts;\n  if (ms_since_epoch_or_date instanceof Date) {\n    ts = ms_since_epoch_or_date.valueOf() / 1000.0;\n  } else if (typeof ms_since_epoch_or_date === \"number\") {\n    // The timestamp the developer passes is in milliseconds, while the syscall\n    // accepts seconds since the epoch.\n    ts = ms_since_epoch_or_date / 1000;\n  } else {\n    throw new Error(\"The invoke time must a Date or a timestamp\");\n  }\n  return {\n    name,\n    ts,\n    args: convexToJson(args),\n    version,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6B;AAC7B,eAAwB;AACxB,qBAAoC;AAE7B,SAAS,yBAAyB;AACvC,SAAO;AAAA,IACL,UAAU,OAAO,SAAiB,SAAiB,SAAgB;AACjE,YAAM,cAAc,oBAAoB,SAAS,MAAM,IAAI;AAC3D,aAAO,UAAM,oCAAoB,YAAY,WAAW;AAAA,IAC1D;AAAA,IACA,OAAO,OACL,wBACA,SACG,SACA;AACH,YAAM,cAAc,iBAAiB,wBAAwB,MAAM,IAAI;AACvE,aAAO,UAAM,oCAAoB,YAAY,WAAW;AAAA,IAC1D;AAAA,EACF;AACF;AAEO,SAAS,qBAAqB,WAAmB;AACtD,SAAO;AAAA,IACL,UAAU,OAAO,SAAiB,SAAiB,SAAgB;AACjE,YAAM,cAAc;AAAA,QAClB;AAAA,QACA,GAAG,oBAAoB,SAAS,MAAM,IAAI;AAAA,MAC5C;AACA,aAAO,UAAM,oCAAoB,oBAAoB,WAAW;AAAA,IAClE;AAAA,IACA,OAAO,OACL,wBACA,SACG,SACA;AACH,YAAM,cAAc;AAAA,QAClB;AAAA,QACA,GAAG,iBAAiB,wBAAwB,MAAM,IAAI;AAAA,MACxD;AACA,aAAO,UAAM,oCAAoB,oBAAoB,WAAW;AAAA,IAClE;AAAA,EACF;AACF;AAEA,SAAS,oBAAoB,SAAiB,MAAc,MAAa;AACvE,MAAI,OAAO,YAAY,UAAU;AAC/B,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAC9C;AACA,MAAI,CAAC,SAAS,OAAO,GAAG;AACtB,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACrD;AACA,MAAI,UAAU,GAAG;AACf,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AAEA,QAAM,MAAM,KAAK,IAAI,IAAI,WAAW;AACpC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,UAAM,4BAAa,IAAI;AAAA,IACvB;AAAA,EACF;AACF;AAEA,SAAS,iBACP,wBACA,MACA,MACA;AACA,MAAI;AACJ,MAAI,kCAAkC,MAAM;AAC1C,SAAK,uBAAuB,QAAQ,IAAI;AAAA,EAC1C,WAAW,OAAO,2BAA2B,UAAU;AAGrD,SAAK,yBAAyB;AAAA,EAChC,OAAO;AACL,UAAM,IAAI,MAAM,4CAA4C;AAAA,EAC9D;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,UAAM,4BAAa,IAAI;AAAA,IACvB;AAAA,EACF;AACF;",
  "names": []
}
