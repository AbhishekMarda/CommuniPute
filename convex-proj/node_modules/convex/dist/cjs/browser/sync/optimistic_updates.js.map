{
  "version": 3,
  "sources": ["../../../../src/browser/sync/optimistic_updates.ts"],
  "sourcesContent": ["import { Value } from \"../../values\";\nimport { GenericAPI, NamedQuery, QueryNames } from \"../../api\";\n\n/**\n * A view of the query results currently in the Convex client for use within\n * optimistic updates.\n *\n * @public\n */\nexport interface OptimisticLocalStore<API extends GenericAPI = GenericAPI> {\n  /**\n   * Retrieve the result of a query from the client.\n   *\n   * Important: Query results should be treated as immutable!\n   * Always make new copies of structures within query results to avoid\n   * corrupting data within the client.\n   *\n   * @param name - The name of the query.\n   * @param args - An array of the arguments for this query.\n   * @returns The query result or `undefined` if the query is not currently\n   * in the client.\n   */\n  getQuery<Name extends QueryNames<API>>(\n    name: Name,\n    args: Parameters<NamedQuery<API, Name>>\n  ): undefined | ReturnType<NamedQuery<API, Name>>;\n\n  /**\n   * Retrieve the results are arguments of all queries with a given name.\n   *\n   * This is useful for complex optimistic updates that need to inspect and\n   * update many query results (for example updating a paginated list).\n   *\n   * Important: Query results should be treated as immutable!\n   * Always make new copies of structures within query results to avoid\n   * corrupting data within the client.\n   * @param name - The name of the query.\n   * @returns An array of objects, one for each query of the given name.\n   * Each object includes:\n   *   - `args` - An array of the arguments to the query.\n   *   - `value` The query result or `undefined` if the query is loading.\n   */\n  getAllQueries<Name extends QueryNames<API>>(\n    name: Name\n  ): {\n    args: Parameters<NamedQuery<API, Name>>;\n    value: undefined | ReturnType<NamedQuery<API, Name>>;\n  }[];\n\n  /**\n   * Optimistically update the result of a query.\n   *\n   * This can either be a new value (perhaps derived from the old value from\n   * {@link OptimisticLocalStore.getQuery}) or `undefined` to remove the query.\n   * Removing a query is useful to create loading states while Convex recomputes\n   * the query results.\n   *\n   * @param name - The name of the query.\n   * @param args - An array of the arguments for this query.\n   * @param value - The new value to set the query to or `undefined` to remove\n   * it from the client.\n   */\n  setQuery<Name extends QueryNames<API>>(\n    name: Name,\n    args: Parameters<NamedQuery<API, Name>>,\n    value: undefined | ReturnType<NamedQuery<API, Name>>\n  ): void;\n}\n/**\n * A temporary, local update to query results within this client.\n *\n * This update will always be executed when a mutation is synced to the Convex\n * server and rolled back when the mutation completes.\n *\n * Note that optimistic updates can be called multiple times! If the client\n * loads new data while the mutation is in progress, the update will be replayed\n * again.\n *\n * @param localQueryStore - An interface to read and edit local query results.\n * @param args - The arguments to the mutation.\n *\n * @public\n */\nexport type OptimisticUpdate<\n  API extends GenericAPI,\n  Arguments extends Value[]\n> = (localQueryStore: OptimisticLocalStore<API>, ...args: Arguments) => void;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
