"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var use_queries_exports = {};
__export(use_queries_exports, {
  useQueriesGeneric: () => useQueriesGeneric,
  useQueriesHelper: () => useQueriesHelper
});
module.exports = __toCommonJS(use_queries_exports);
var import_react = require("react");
var import_index = require("./index.js");
var import_queries_observer = require("./queries_observer.js");
var import_use_subscription = require("./use_subscription.js");
function useQueriesGeneric(queries) {
  const convex = (0, import_index.useConvexGeneric)();
  if (convex === void 0) {
    throw new Error(
      "Could not find Convex client! `useQueries` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app"
    );
  }
  const createWatch = (0, import_react.useMemo)(() => {
    return (name, args, journal) => {
      return convex.watchQuery(name, args, journal);
    };
  }, [convex]);
  return useQueriesHelper(queries, createWatch);
}
function useQueriesHelper(queries, createWatch) {
  const [observer] = (0, import_react.useState)(() => new import_queries_observer.QueriesObserver(createWatch));
  const [effectRan, setEffectRan] = (0, import_react.useState)(false);
  if (observer.createWatch !== createWatch) {
    observer.setCreateWatch(createWatch);
  }
  (0, import_react.useEffect)(() => {
    setEffectRan(true);
    return () => {
      observer.destroy();
    };
  }, [observer]);
  const subscription = (0, import_react.useMemo)(() => {
    if (effectRan) {
      observer.setQueries(queries);
    }
    return {
      getCurrentValue: () => {
        if (effectRan) {
          return observer.getCurrentQueries();
        } else {
          const value = {};
          for (const identifier in Object.keys(queries)) {
            value[identifier] = void 0;
          }
          return value;
        }
      },
      subscribe: (callback) => observer.subscribe(callback)
    };
  }, [observer, queries, effectRan]);
  return (0, import_use_subscription.useSubscription)(subscription);
}
//# sourceMappingURL=use_queries.js.map
