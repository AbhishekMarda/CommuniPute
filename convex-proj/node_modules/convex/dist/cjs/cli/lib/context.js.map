{
  "version": 3,
  "sources": ["../../../../src/cli/lib/context.ts"],
  "sourcesContent": ["import { Filesystem, nodeFs } from \"../../bundler\";\nimport * as Sentry from \"@sentry/node\";\nimport { Ora } from \"ora\";\n\n// Annotate an error as \"fs\" if it's due to bad state on the local filesystem\n// (e.g. `tsc` fails due to a syntax error). The `convex dev` command will\n// then print out the error and wait for the file to change before retrying.\n//\n// Annotate an error as \"network\" if it's due to a transient network error.\n// This will then cause a retry after an exponential backoff.\nexport type ErrorReason = \"fs\" | \"network\";\n\nexport interface Context {\n  fs: Filesystem;\n  deprecationMessagePrinted: boolean;\n  spinner: Ora | undefined;\n  // Reports to Sentry and either throws FatalError or exits the process.\n  // Does not print the error.\n  fatalError(exitCode: number, reason?: ErrorReason, err?: any): Promise<never>;\n}\n\nexport const oneoffContext: Context = {\n  fs: nodeFs,\n  deprecationMessagePrinted: false,\n  spinner: undefined,\n  async fatalError(exitCode: number, _reason?: ErrorReason, err?: any) {\n    return await flushAndExit(exitCode, err);\n  },\n};\n\nasync function flushAndExit(exitCode: number, err?: any) {\n  if (err) {\n    Sentry.captureException(err);\n  }\n  await Sentry.close();\n  // eslint-disable-next-line no-restricted-syntax\n  return process.exit(exitCode);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAmC;AACnC,aAAwB;AAoBjB,MAAM,gBAAyB;AAAA,EACpC,IAAI;AAAA,EACJ,2BAA2B;AAAA,EAC3B,SAAS;AAAA,EACT,MAAM,WAAW,UAAkB,SAAuB,KAAW;AACnE,WAAO,MAAM,aAAa,UAAU,GAAG;AAAA,EACzC;AACF;AAEA,eAAe,aAAa,UAAkB,KAAW;AACvD,MAAI,KAAK;AACP,WAAO,iBAAiB,GAAG;AAAA,EAC7B;AACA,QAAM,OAAO,MAAM;AAEnB,SAAO,QAAQ,KAAK,QAAQ;AAC9B;",
  "names": []
}
