{
  "version": 3,
  "sources": ["../../../../src/cli/lib/login.ts"],
  "sourcesContent": ["import { errors, BaseClient, custom } from \"openid-client\";\nimport {\n  globalConfigPath,\n  rootDirectory,\n  GlobalConfig,\n  getAuthHeader,\n  bigBrainAPI,\n} from \"./utils.js\";\nimport open from \"open\";\nimport chalk from \"chalk\";\nimport { provisionHost } from \"./config.js\";\nimport { version } from \"../../index.js\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { Context } from \"./context.js\";\nimport { Issuer } from \"openid-client\";\nimport inquirer from \"inquirer\";\nimport { hostname } from \"os\";\nimport { execSync } from \"child_process\";\n\nconst SCOPE = \"openid email profile\";\n\n// Per https://github.com/panva/node-openid-client/tree/main/docs#customizing\ncustom.setHttpOptionsDefaults({\n  timeout: 10000,\n});\n\nasync function writeGlobalConfig(ctx: Context, config: GlobalConfig) {\n  const dirName = rootDirectory();\n  ctx.fs.mkdir(dirName, { allowExisting: true });\n  const path = globalConfigPath();\n  try {\n    ctx.fs.writeUtf8File(path, JSON.stringify(config));\n  } catch (err) {\n    console.log(\n      chalk.red(`Failed to write auth config to ${path} with error: ${err}`)\n    );\n    return await ctx.fatalError(1, \"fs\", err);\n  }\n  console.log(\n    chalk.green(`Successfully wrote your auth credentials to ${path}!`)\n  );\n}\n\nexport async function checkAuthorization(ctx: Context): Promise<boolean> {\n  const header = await getAuthHeader(ctx);\n  if (!header) {\n    return false;\n  }\n  try {\n    const resp = await axios.head(`${provisionHost}/api/${version}/authorize`, {\n      headers: { Authorization: header },\n      // Don't throw an error if this request returns a non-200 status.\n      // Big Brain responds with a variety of error codes -- 401 if the token is correctly-formed but not valid, and either 400 or 500 if the token is ill-formed.\n      // We only care if this check returns a 200 code (so we can skip logging in again) -- any other errors should be silently skipped and we'll run the whole login flow again.\n      validateStatus: _ => true,\n    });\n    return resp.status === 200;\n  } catch (e: any) {\n    // This `catch` block should only be hit if a network error was encountered and axios didn't receive any sort of response.\n    console.log(chalk.gray(`Unexpected error when authorizing: ${e}`));\n    return false;\n  }\n}\n\nasync function performDeviceAuthorization(\n  ctx: Context,\n  auth0Client: BaseClient,\n  shouldOpen: boolean\n): Promise<string> {\n  // Device authorization flow follows this guide: https://github.com/auth0/auth0-device-flow-cli-sample/blob/9f0f3b76a6cd56ea8d99e76769187ea5102d519d/cli.js\n\n  // Device Authorization Request - https://tools.ietf.org/html/rfc8628#section-3.1\n  // Get authentication URL\n  const handle = await auth0Client.deviceAuthorization({\n    scope: SCOPE,\n    audience: \"https://console.convex.dev/api/\",\n  });\n\n  // Device Authorization Response - https://tools.ietf.org/html/rfc8628#section-3.2\n  // Open authentication URL\n  const { verification_uri_complete, user_code, expires_in } = handle;\n  console.log(\n    `Visit ${verification_uri_complete} to finish logging in. You should see the following code which expires in ${\n      expires_in % 60 === 0\n        ? `${expires_in / 60} minutes`\n        : `${expires_in} seconds`\n    }: ${user_code}`\n  );\n  if (shouldOpen) {\n    shouldOpen = (\n      await inquirer.prompt([\n        {\n          name: \"openBrowser\",\n          message: `Open in browser?`,\n          type: \"confirm\",\n          default: true,\n        },\n      ])\n    ).openBrowser;\n  }\n\n  if (shouldOpen) {\n    console.log(\n      `Opening ${verification_uri_complete} in your browser to log in...`\n    );\n    try {\n      await open(verification_uri_complete);\n    } catch (err: any) {\n      console.log(chalk.red(`Unable to open browser.`));\n      console.log(\n        `Manually open ${verification_uri_complete} in your browser to log in.`\n      );\n    }\n  } else {\n    console.log(`Open ${verification_uri_complete} in your browser to log in.`);\n  }\n\n  // Device Access Token Request - https://tools.ietf.org/html/rfc8628#section-3.4\n  // Device Access Token Response - https://tools.ietf.org/html/rfc8628#section-3.5\n  try {\n    const tokens = await handle.poll();\n    if (typeof tokens.access_token === \"string\") {\n      return tokens.access_token;\n    } else {\n      throw Error(\"Access token is missing\");\n    }\n  } catch (err: any) {\n    switch (err.error) {\n      case \"access_denied\": // end-user declined the device confirmation prompt, consent or rules failed\n        console.error(\"Access denied.\");\n        return await ctx.fatalError(1, err);\n      case \"expired_token\": // end-user did not complete the interaction in time\n        console.error(\"Device flow expired.\");\n        return await ctx.fatalError(1, err);\n      default:\n        if (err instanceof errors.OPError) {\n          console.error(\n            `Error = ${err.error}; error_description = ${err.error_description}`\n          );\n        } else {\n          console.error(`Login failed with error: ${err}`);\n        }\n        return await ctx.fatalError(1, err);\n    }\n  }\n}\n\nasync function performPasswordAuthentication(\n  ctx: Context,\n  issuer: string,\n  clientId: string,\n  username: string,\n  password: string\n): Promise<string> {\n  // Unfortunately, `openid-client` doesn't support the resource owner password credentials flow so we need to manually send the requests.\n  const options: AxiosRequestConfig = {\n    method: \"POST\",\n    url: new URL(\"/oauth/token\", issuer).href,\n    headers: { \"content-type\": \"application/x-www-form-urlencoded\" },\n    data: new URLSearchParams({\n      grant_type: \"password\",\n      username: username,\n      password: password,\n      scope: SCOPE,\n      client_id: clientId,\n      audience: \"https://console.convex.dev/api/\",\n      // Note that there is no client secret provided, as Auth0 refuses to require it for untrusted apps.\n    }),\n  };\n\n  try {\n    const response = await axios.request(options);\n    if (typeof response.data.access_token === \"string\") {\n      return response.data.access_token;\n    } else {\n      throw Error(\"Access token is missing\");\n    }\n  } catch (err: any) {\n    console.log(`Password flow failed: ${err}`);\n    if (err.response) {\n      console.log(`${JSON.stringify(err.response.data)}`);\n    }\n    return await ctx.fatalError(1, err);\n  }\n}\n\nexport async function performLogin(\n  ctx: Context,\n  overrideAuthUrl?: string,\n  overrideAuthClient?: string,\n  overrideAuthUsername?: string,\n  overrideAuthPassword?: string,\n  open = true,\n  deviceNameOverride?: string\n) {\n  // Get access token from big-brain\n  // Default the device name to the hostname, but allow the user to change this if the terminal is interactive.\n  // On Macs, the `hostname()` may be a weirdly-truncated form of the computer name. Attempt to read the \"real\" name before falling back to hostname.\n  let deviceName = deviceNameOverride ?? \"\";\n  if (!deviceName && process.platform === \"darwin\") {\n    try {\n      deviceName = execSync(\"scutil --get ComputerName\").toString().trim();\n    } catch {\n      // Just fall back to the hostname default below.\n    }\n  }\n  if (!deviceName) {\n    deviceName = hostname();\n  }\n  if (process.stdin.isTTY && !deviceNameOverride) {\n    const answers = await inquirer.prompt([\n      {\n        type: \"input\",\n        name: \"deviceName\",\n        message: \"Enter a name for the device being authorized:\",\n        default: deviceName,\n      },\n    ]);\n    deviceName = answers.deviceName;\n  }\n\n  const issuer = overrideAuthUrl ?? \"https://auth.convex.dev\";\n  const auth0 = await Issuer.discover(issuer);\n  const clientId = overrideAuthClient ?? \"HFtA247jp9iNs08NTLIB7JsNPMmRIyfi\";\n  const auth0Client = new auth0.Client({\n    client_id: clientId,\n    token_endpoint_auth_method: \"none\",\n    id_token_signed_response_alg: \"RS256\",\n  });\n\n  let accessToken: string;\n  if (overrideAuthUsername && overrideAuthPassword) {\n    accessToken = await performPasswordAuthentication(\n      ctx,\n      issuer,\n      clientId,\n      overrideAuthUsername,\n      overrideAuthPassword\n    );\n  } else {\n    accessToken = await performDeviceAuthorization(ctx, auth0Client, open);\n  }\n  interface AuthorizeArgs {\n    authnToken: string;\n    deviceName: string;\n  }\n  const authorizeArgs: AuthorizeArgs = {\n    authnToken: accessToken,\n    deviceName: deviceName,\n  };\n  const data = await bigBrainAPI(ctx, \"POST\", \"authorize\", authorizeArgs);\n  const globalConfig = { accessToken: data.accessToken };\n  try {\n    await writeGlobalConfig(ctx, globalConfig);\n  } catch (err: any) {\n    return await ctx.fatalError(1, \"fs\", err);\n  }\n  console.log(chalk.green(\"Successfully logged in and authorized device\"));\n}\n"],
  "mappings": "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",
  "names": ["import_openid_client", "chalk", "axios", "inquirer", "open"]
}
