{
  "version": 3,
  "sources": ["../../../../src/cli/lib/init.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport boxen from \"boxen\";\nimport {\n  pullConfig,\n  writeProjectConfig,\n  configFilepath,\n  readProjectConfig,\n} from \"./config.js\";\nimport {\n  fatalServerErr,\n  functionsDir,\n  validateOrSelectTeam,\n  bigBrainAPI,\n  loadPackageJson,\n} from \"./utils.js\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport { doCodegen, doInitCodegen } from \"./codegen\";\nimport { Context } from \"./context.js\";\nimport { dashboardUrl } from \"../dashboard.js\";\nimport { offerToWriteToEnv } from \"./envvars.js\";\n\nconst cwd = path.basename(process.cwd());\n\nexport async function init(\n  ctx: Context,\n  project: string | null,\n  team: string | null,\n  saveUrl: \"yes\" | \"no\" | \"ask\" = \"ask\"\n) {\n  const configPath = await configFilepath(ctx);\n  if (ctx.fs.exists(configPath)) {\n    // Running init in a project with a convex.json file is a no-op.\n    console.error(chalk.green(`Found existing project config \"${configPath}\"`));\n    return;\n  }\n\n  // Do opt in to TOS and Privacy Policy stuff first.\n  const shouldContinue = await optins(ctx);\n  if (!shouldContinue) {\n    return await ctx.fatalError(1, undefined);\n  }\n\n  const selectedTeam = await validateOrSelectTeam(\n    ctx,\n    team,\n    \"Choose which team to create this project in:\"\n  );\n\n  let projectName: string = project || cwd;\n  if (process.stdin.isTTY && !project) {\n    projectName = (\n      await inquirer.prompt([\n        {\n          type: \"input\",\n          name: \"project\",\n          message: \"Enter a name for your project:\",\n          default: cwd,\n        },\n      ])\n    ).project;\n  }\n\n  const spinner = (ctx.spinner = ora({\n    text: \"Creating new Convex project...\\n\",\n    stream: process.stdout,\n  }).start());\n\n  let projectSlug,\n    teamSlug,\n    prodUrl,\n    adminKey,\n    projectsRemaining,\n    projectConfig,\n    modules;\n  try {\n    ({ projectSlug, teamSlug, prodUrl, adminKey, projectsRemaining } =\n      await create_project(ctx, selectedTeam, projectName));\n\n    ({ projectConfig, modules } = await pullConfig(\n      ctx,\n      projectSlug,\n      teamSlug,\n      prodUrl,\n      adminKey\n    ));\n  } catch (err) {\n    spinner.fail(\"Unable to create project.\");\n    return await fatalServerErr(ctx, err);\n  }\n\n  spinner.succeed(`Successfully created project!`);\n\n  console.log(\n    chalk.green(`Your account now has ${projectsRemaining} projects remaining.`)\n  );\n\n  if (modules.length > 0) {\n    console.error(chalk.red(\"Error: Unexpected modules in new project\"));\n    return await ctx.fatalError(1, undefined);\n  }\n\n  // create-react-app bans imports from outside of src, so we can just\n  // put the functions directory inside of src/ to work around this issue.\n  const packages = await loadPackageJson(ctx);\n  const isCreateReactApp = !!packages.filter(\n    ({ name }) => name === \"react-scripts\"\n  ).length;\n  if (isCreateReactApp) {\n    projectConfig.functions = `src/${projectConfig.functions}`;\n  }\n\n  await writeProjectConfig(ctx, projectConfig);\n  await doInitCodegen(\n    ctx,\n    functionsDir(configPath, projectConfig),\n    true // quiet\n  );\n\n  {\n    const { projectConfig, configPath } = await readProjectConfig(ctx);\n    await doCodegen({\n      ctx,\n      projectConfig,\n      configPath,\n      // Don't typecheck because there isn't any code to check yet.\n      typeCheckMode: \"disable\",\n      quiet: true,\n    });\n  }\n\n  const boxedText =\n    chalk.white(\"Project \") +\n    chalk.whiteBright.bold(projectName) +\n    chalk.white(\" ready:\\n\") +\n    chalk.whiteBright.bold(`${teamSlug}/${projectSlug}`) +\n    \"\\n\" +\n    chalk.whiteBright(projectConfig.prodUrl);\n  const boxenOptions = {\n    padding: 1,\n    margin: 1,\n    borderColor: \"green\",\n    backgroundColor: \"#555555\",\n  };\n  console.log(boxen(boxedText, boxenOptions));\n\n  console.log(`View this project at ${chalk.bold(await dashboardUrl(ctx))}`);\n  console.log(\"Configuration settings written to\", chalk.bold(configPath));\n  console.log(\n    `Write Convex functions in ${chalk.bold(\n      functionsDir(configPath, projectConfig)\n    )}`\n  );\n\n  console.log();\n  console.log(\n    \"Production deployment created at\",\n    chalk.bold(projectConfig.prodUrl)\n  );\n  await offerToWriteToEnv(ctx, \"prod\", projectConfig.prodUrl, saveUrl);\n\n  console.log(chalk.bold(\"\\nWe would love feedback at either:\"));\n  console.log(\"- https://convex.dev/community\");\n  console.log(\"- support@convex.dev\");\n\n  console.log(\n    \"\\nSee documentation at\",\n    chalk.bold(\"https://docs.convex.dev\"),\n    \"for next steps.\"\n  );\n}\n\ninterface CreateProjectArgs {\n  projectName: string;\n  team: string;\n  backendVersionOverride?: string;\n}\n\n/** Provision a new empty project and return the origin. */\nasync function create_project(\n  ctx: Context,\n  team: string,\n  projectName: string\n): Promise<{\n  projectSlug: string;\n  teamSlug: string;\n  prodUrl: string;\n  adminKey: string;\n  projectsRemaining: number;\n}> {\n  const provisioningArgs: CreateProjectArgs = {\n    team,\n    backendVersionOverride: process.env.CONVEX_BACKEND_VERSION_OVERRIDE,\n    projectName,\n  };\n  const data = await bigBrainAPI(\n    ctx,\n    \"POST\",\n    \"create_project\",\n    provisioningArgs\n  );\n\n  const projectSlug = data.projectSlug;\n  const teamSlug = data.teamSlug;\n  const prodUrl = data.prodUrl;\n  const adminKey = data.adminKey;\n  const projectsRemaining = data.projectsRemaining;\n  if (\n    projectSlug === undefined ||\n    teamSlug === undefined ||\n    prodUrl === undefined ||\n    adminKey === undefined ||\n    projectsRemaining === undefined\n  ) {\n    throw new Error(\n      \"Unknown error during provisioning: \" + JSON.stringify(data)\n    );\n  }\n  return { projectSlug, teamSlug, prodUrl, adminKey, projectsRemaining };\n}\n\n/// There are fields like version, but we keep them opaque\ntype OptIn = Record<string, unknown>;\n\ntype OptInToAccept = {\n  optIn: OptIn;\n  message: string;\n};\n\ntype AcceptOptInsArgs = {\n  optInsAccepted: OptIn[];\n};\n\n// Returns whether we can proceed or not.\nexport async function optins(ctx: Context): Promise<boolean> {\n  const data = await bigBrainAPI(ctx, \"POST\", \"check_opt_ins\", {});\n  if (data.optInsToAccept.length === 0) {\n    return true;\n  }\n  for (const optInToAccept of data.optInsToAccept) {\n    const confirmed = (\n      await inquirer.prompt([\n        {\n          type: \"confirm\",\n          name: \"confirmed\",\n          message: optInToAccept.message,\n        },\n      ])\n    ).confirmed;\n\n    if (!confirmed) {\n      console.log(\"Please accept the Terms of Service to use Convex.\");\n      return Promise.resolve(false);\n    }\n  }\n\n  const optInsAccepted = data.optInsToAccept.map((o: OptInToAccept) => o.optIn);\n  const args: AcceptOptInsArgs = { optInsAccepted };\n  await bigBrainAPI(ctx, \"POST\", \"accept_opt_ins\", args);\n  return true;\n}\n"],
  "mappings": "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",
  "names": ["path", "chalk", "inquirer", "ora", "projectConfig", "configPath", "boxen"]
}
