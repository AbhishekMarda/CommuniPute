{
  "version": 3,
  "sources": ["../../../../src/cli/codegen_templates/react.ts"],
  "sourcesContent": ["import { GeneratedJsWithTypes, header } from \"./common.js\";\n\nexport function reactCodegen(): GeneratedJsWithTypes {\n  const reactJS = `\n  ${header(\"Generated React hooks.\")}\n  import {\n    useConvexGeneric,\n    useActionGeneric,\n    useMutationGeneric,\n    usePaginatedQueryGeneric,\n    useQueriesGeneric,\n    useQueryGeneric,\n  } from \"convex/react\";\n\n  /**\n   * Load a reactive query within a React component.\n   *\n   * This React hook contains internal state that will cause a rerender whenever\n   * the query result changes.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @param name - The name of the query function.\n   * @param args - The arguments to the query function.\n   * @returns \\`undefined\\` if loading and the query's return value otherwise.\n   */\n  export const useQuery = useQueryGeneric;\n  \n  /**\n   * Construct a new {@link ReactMutation}.\n   *\n   * Mutation objects can be called like functions to request execution of the\n   * corresponding Convex function, or further configured with\n   * [optimistic updates](https://docs.convex.dev/using/optimistic-updates).\n   *\n   * The value returned by this hook is stable across renders, so it can be used\n   * by React dependency arrays and memoization logic relying on object identity\n   * without causing rerenders.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @param name - The name of the mutation.\n   * @returns The {@link ReactMutation} object with that name.\n   */\n  export const useMutation = useMutationGeneric;\n  \n  /**\n   * Construct a new {@link ReactAction}.\n   *\n   * Convex function objects can be called like functions to request execution of\n   * the corresponding Convex function.\n   *\n   * The value returned by this hook is stable across renders, so it can be used\n   * by React dependency arrays and memoization logic relying on object identity\n   * without causing rerenders.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @param name - The name of the function.\n   * @returns The {@link ReactAction} object with that name.\n   */\n  export const useAction = useActionGeneric;\n\n  /**\n   * Get the {@link ConvexReactClient} within a React component.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @returns The active {@link ConvexReactClient} object, or \\`undefined\\`.\n   */\n  export const useConvex = useConvexGeneric;\n\n  /**\n   * Load data reactively from a paginated query to a create a growing list.\n   *\n   * This can be used to power \"infinite scroll\" UIs.\n   *\n   * This hook must be used with Convex query functions that match\n   * {@link PaginatedQueryFunction}. This means they must:\n   * 1. Have a first argument must be an object containing \\`numItems\\` and \\`cursor\\`.\n   * 2. Return a {@link PaginationResult}.\n   *\n   * \\`usePaginatedQuery\\` concatenates all the pages\n   * of results into a single list and manages the continuation cursors when\n   * requesting more items.\n   *\n   * Example usage:\n   * \\`\\`\\`typescript\n   * const { results, status, loadMore } = usePaginatedQuery(\n   *   \"listMessages\",\n   *   { initialNumItems: 5 },\n   *   \"#general\"\n   * );\n   * \\`\\`\\`\n   * \n   * If the query \\`name\\` or \\`args\\` change, the pagination state will be reset\n   * to the first page. Similarly, if any of the pages result in an InvalidCursor\n   * or QueryScannedTooManyDocuments error, the pagination state will also reset\n   * to the first page.\n   *\n   * To learn more about pagination, see [Paginated Queries](https://docs.convex.dev/using/pagination).\n   *\n   * @param name - The name of the query function.\n   * @param options - An object specifying the \\`initialNumItems\\` to be loaded in\n   * the first page.\n   * @param args - The arguments to the query function, excluding the first.\n   * @returns A {@link UsePaginatedQueryResult} that includes the currently loaded\n   * items, the status of the pagination, and a \\`loadMore\\` function.\n   */\n  export const usePaginatedQuery = usePaginatedQueryGeneric;\n\n  /**\n   * Load a variable number of reactive Convex queries.\n   *\n   * \\`useQueries\\` is similar to {@link useQuery} but it allows\n   * loading multiple queries which can be useful for loading a dynamic number\n   * of queries without violating the rules of React hooks.\n   *\n   * This hook accepts an object whose keys are identifiers for each query and the\n   * values are objects of \\`{ name: string, args: Value[] }\\`. The \\`name\\` is the\n   * name of the Convex query function to load, and the \\`args\\` are the arguments to\n   * that function.\n   *\n   * The hook returns an object that maps each identifier to the result of the query,\n   * \\`undefined\\` if the query is still loading, or an instance of \\`Error\\` if the query\n   * threw an exception.\n   *\n   * For example if you loaded a query like:\n   * \\`\\`\\`typescript\n   * const results = useQueriesGeneric({\n   *   messagesInGeneral: {\n   *     name: \"listMessages\",\n   *     args: [\"#general\"]\n   *   }\n   * });\n   * \\`\\`\\`\n   * then the result would look like:\n   * \\`\\`\\`typescript\n   * {\n   *   messagesInGeneral: [{\n   *     channel: \"#general\",\n   *     body: \"hello\"\n   *     _id: ...,\n   *     _creationTime: ...\n   *   }]\n   * }\n   * \\`\\`\\`\n   *\n   * This React hook contains internal state that will cause a rerender\n   * whenever any of the query results change.\n   *\n   * Throws an error if not used under {@link ConvexProvider}.\n   *\n   * @param queries - An object mapping identifiers to objects of\n   * \\`{name: string, args: Value[] }\\` describing which query functions to fetch.\n   * @returns An object with the same keys as the input. The values are the result\n   * of the query function, \\`undefined\\` if it's still loading, or an \\`Error\\` if\n   * it threw an exception.\n   */\n  export const useQueries = useQueriesGeneric;\n  `;\n\n  const reactDTS = `${header(\"Generated React hooks.\")}\n  import type { OptimisticLocalStore as GenericOptimisticLocalStore } from \"convex/browser\";\n  import type {\n    UseActionForAPI, \n    UseConvexForAPI,\n    UsePaginatedQueryForAPI,\n    UseMutationForAPI,\n    UseQueriesForAPI,\n    UseQueryForAPI,\n  } from \"convex/react\";\n  import type { API } from \"./api\";\n\n  /**\n   * Load a reactive query within a React component.\n   *\n   * This React hook contains internal state that will cause a rerender whenever\n   * the query result changes.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @param name - The name of the query function.\n   * @param args - The arguments to the query function.\n   * @returns \\`undefined\\` if loading and the query's return value otherwise.\n   */\n  export declare const useQuery: UseQueryForAPI<API>;\n  \n  /**\n   * Construct a new {@link ReactMutation}.\n   *\n   * Mutation objects can be called like functions to request execution of the\n   * corresponding Convex function, or further configured with\n   * [optimistic updates](https://docs.convex.dev/using/optimistic-updates).\n   *\n   * The value returned by this hook is stable across renders, so it can be used\n   * by React dependency arrays and memoization logic relying on object identity\n   * without causing rerenders.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @param name - The name of the mutation.\n   * @returns The {@link ReactMutation} object with that name.\n   */\n  export declare const useMutation: UseMutationForAPI<API>;\n  \n  /**\n   * Construct a new {@link ReactAction}.\n   *\n   * Action objects can be called like functions to request execution of the\n   * corresponding Convex function.\n   *\n   * The value returned by this hook is stable across renders, so it can be used\n   * by React dependency arrays and memoization logic relying on object identity\n   * without causing rerenders.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @param name - The name of the action.\n   * @returns The {@link ReactAction} object with that name.\n   */\n  export declare const useAction: UseActionForAPI<API>;\n\n  /**\n   * Get the {@link ConvexReactClient} within a React component.\n   *\n   * This relies on the {@link ConvexProvider} being above in the React component tree.\n   *\n   * @returns The active {@link ConvexReactClient} object, or \\`undefined\\`.\n   */\n  export declare const useConvex: UseConvexForAPI<API>;\n\n  /**\n   * Load data reactively from a paginated query to a create a growing list.\n   *\n   * This can be used to power \"infinite scroll\" UIs.\n   *\n   * This hook must be used with Convex query functions that match\n   * {@link PaginatedQueryFunction}. This means they must:\n   * 1. Have a first argument must be an object containing \\`numItems\\` and \\`cursor\\`.\n   * 2. Return a {@link PaginationResult}.\n   *\n   * \\`usePaginatedQuery\\` concatenates all the pages\n   * of results into a single list and manages the continuation cursors when\n   * requesting more items.\n   *\n   * Example usage:\n   * \\`\\`\\`typescript\n   * const { results, status, loadMore } = usePaginatedQuery(\n   *   \"listMessages\",\n   *   { initialNumItems: 5 },\n   *   \"#general\"\n   * );\n   * \\`\\`\\`\n   *\n   * @param name - The name of the query function.\n   * @param options - An object specifying the \\`initialNumItems\\` to be loaded in\n   * the first page.\n   * @param args - The arguments to the query function, excluding the first.\n   * @returns A {@link UsePaginatedQueryResult} that includes the currently loaded\n   * items, the status of the pagination, and a \\`loadMore\\` function.\n   */\n  export declare const usePaginatedQuery: UsePaginatedQueryForAPI<API>;\n\n  /**\n   * Load a variable number of reactive Convex queries.\n   *\n   * \\`useQueries\\` is similar to {@link useQuery} but it allows\n   * loading multiple queries which can be useful for loading a dynamic number\n   * of queries without violating the rules of React hooks.\n   *\n   * This hook accepts an object whose keys are identifiers for each query and the\n   * values are objects of \\`{ name: string, args: Value[] }\\`. The \\`name\\` is the\n   * name of the Convex query function to load, and the \\`args\\` are the arguments to\n   * that function.\n   *\n   * The hook returns an object that maps each identifier to the result of the query,\n   * \\`undefined\\` if the query is still loading, or an instance of \\`Error\\` if the query\n   * threw an exception.\n   *\n   * For example if you loaded a query like:\n   * \\`\\`\\`typescript\n   * const results = useQueriesGeneric({\n   *   messagesInGeneral: {\n   *     name: \"listMessages\",\n   *     args: [\"#general\"]\n   *   }\n   * });\n   * \\`\\`\\`\n   * then the result would look like:\n   * \\`\\`\\`typescript\n   * {\n   *   messagesInGeneral: [{\n   *     channel: \"#general\",\n   *     body: \"hello\"\n   *     _id: ...,\n   *     _creationTime: ...\n   *   }]\n   * }\n   * \\`\\`\\`\n   *\n   * This React hook contains internal state that will cause a rerender\n   * whenever any of the query results change.\n   *\n   * Throws an error if not used under {@link ConvexProvider}.\n   *\n   * @param queries - An object mapping identifiers to objects of\n   * \\`{name: string, args: Value[] }\\` describing which query functions to fetch.\n   * @returns An object with the same keys as the input. The values are the result\n   * of the query function, \\`undefined\\` if it's still loading, or an \\`Error\\` if\n   * it threw an exception.\n   */\n  export declare const useQueries: UseQueriesForAPI<API>;\n\n  /**\n   * A view of the query results currently in the Convex client for use within\n   * optimistic updates.\n   */\n  export type OptimisticLocalStore = GenericOptimisticLocalStore<API>;\n  `;\n  return {\n    JS: reactJS,\n    DTS: reactDTS,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6C;AAEtC,SAAS,eAAqC;AACnD,QAAM,UAAU;AAAA,QACd,sBAAO,wBAAwjC,QAAM,WAAW,OAAG,sBAAO,wBAAwnD,SAAO;AAAA,IACL,IAAI;AAAA,IACJ,KAAK;AAAA,EACP;AACF;",
  "names": []
}
