{
  "version": 3,
  "sources": ["../../../../src/cli/codegen_templates/server.ts"],
  "sourcesContent": ["import { GeneratedJsWithTypes, header } from \"./common.js\";\n\nexport function serverCodegen(): GeneratedJsWithTypes {\n  const serverDTS = `\n    ${header(\n      \"Generated utilities for implementing server-side Convex query and mutation functions.\"\n    )}\n    import {\n      ActionBuilderForAPI,\n      HttpEndpointBuilderForAPI,\n      MutationBuilder,\n      QueryBuilderForDataModel,\n      ActionCtx as GenericActionCtx,\n      HttpEndpointCtx as GenericHttpEndpointCtx,\n      MutationCtx as GenericMutationCtx,\n      QueryCtx as GenericQueryCtx,\n      DatabaseReader as GenericDatabaseReader,\n      DatabaseWriter as GenericDatabaseWriter,\n    } from \"convex/server\";\n    import type { DataModel } from \"./dataModel.js\";\n    import type { API } from \"./api.js\";\n\n    /**\n     * Define a query in this Convex app's public API.\n     *\n     * This function will be allowed to read your Convex database and will be accessible from the client.\n     *\n     * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n     * @returns The wrapped query. Include this as an \\`export\\` to name it and make it accessible.\n     */\n    export declare const query: QueryBuilderForDataModel<DataModel>;\n\n    /**\n     * Define a mutation in this Convex app's public API.\n     *\n     * This function will be allowed to modify your Convex database and will be accessible from the client.\n     *\n     * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n     * @returns The wrapped mutation. Include this as an \\`export\\` to name it and make it accessible.\n     */\n    export declare const mutation: MutationBuilder<DataModel, API>;\n\n    /**\n     * Define an action in this Convex app's public API.\n     *\n     * An action is a function which can execute any JavaScript code, including non-deterministic\n     * code and code with side-effects. Actions are often used to call into third-party services.\n     * Actions execute in a Node.js environment and can interact with the database indirectly by\n     * calling queries and mutations via the provided {@link ActionCtx} object. Actions need to be defined\n     * in the \\`/convex/actions  directory\\`. Queries and mutations, on the other hand, must be defined\n     * outside of the \\`/convex/actions directory\\`.\n     *\n     * @param func - The action. It receives a {@link ActionCtx} as its first argument.\n     * @returns The wrapped action. Include this as an \\`export\\` to name it and make it accessible.\n     */\n    export declare const action: ActionBuilderForAPI<API>;\n\n    /**\n     * Define an HTTP endpoint.\n     *\n     * This function will be used to respond to HTTP requests received by a Convex\n     * deployment if the requests matches the path and method where this endpoint\n     * is routed. Be sure to route your endpoint in \\`convex/http.js\\`.\n     *\n     * @param func - The endpoint function. It receives a {@link HttpEndpointCtx} as its first argument.\n     * @returns The wrapped endpoint function. Import this function from \\`convex/http.js\\` and route it to hook it up.\n     */\n    export declare const httpEndpoint: HttpEndpointBuilderForAPI<API>;\n\n    /**\n     * A set of services for use within Convex query functions.\n     *\n     * The query context is passed as the first argument to any Convex query\n     * function run on the server.\n     *\n     * This differs from the {@link MutationCtx} because all of the services are\n     * read-only.\n     */\n    export type QueryCtx = GenericQueryCtx<DataModel>;\n\n    /**\n     * A set of services for use within Convex mutation functions.\n     *\n     * The mutation context is passed as the first argument to any Convex mutation\n     * function run on the server.\n     */\n    export type MutationCtx = GenericMutationCtx<DataModel, API>;\n\n    /**\n     * A set of services for use within Convex action functions.\n     *\n     * The action context is passed as the first argument to any Convex action\n     * function run on the server.\n     */\n    export type ActionCtx = GenericActionCtx<API>;\n\n    /**\n     * A set of services for use within Convex HTTP endpoints.\n     *\n     * The HttpEndpointCtx is passed as the first argument to any Convex HTTP\n     * endpoint run on the server.\n     */\n    export type HttpEndpointCtx = GenericHttpEndpointCtx<API>;\n\n    /**\n     * An interface to read from the database within Convex query functions.\n     *\n     * The two entry points are {@link DatabaseReader.get}, which fetches a single\n     * document by its {@link Id}, or {@link DatabaseReader.query}, which starts\n     * building a query.\n     */\n    export type DatabaseReader = GenericDatabaseReader<DataModel>;\n\n    /**\n     * An interface to read from and write to the database within Convex mutation\n     * functions.\n     *\n     * Convex guarantees that all writes within a single mutation are\n     * executed atomically, so you never have to worry about partial writes leaving\n     * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)\n     * for the guarantees Convex provides your functions.\n     */\n    export type DatabaseWriter = GenericDatabaseWriter<DataModel>;`;\n\n  const serverJS = `\n    ${header(\n      \"Generated utilities for implementing server-side Convex query and mutation functions.\"\n    )}\n    import {\n      actionGeneric,\n      httpEndpointGeneric,\n      queryGeneric,\n      mutationGeneric,\n    } from \"convex/server\";\n\n    /**\n     * Define a query in this Convex app's public API.\n     *\n     * This function will be allowed to read your Convex database and will be accessible from the client.\n     *\n     * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n     * @returns The wrapped query. Include this as an \\`export\\` to name it and make it accessible.\n     */\n    export const query = queryGeneric;\n\n    /**\n     * Define a mutation in this Convex app's public API.\n     *\n     * This function will be allowed to modify your Convex database and will be accessible from the client.\n     *\n     * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n     * @returns The wrapped mutation. Include this as an \\`export\\` to name it and make it accessible.\n     */\n    export const mutation = mutationGeneric;\n\n    /**\n     * Define an action in this Convex app's public API.\n     *\n     * An action is a function which can execute any JavaScript code, including non-deterministic\n     * code and code with side-effects. Actions are often used to call into third-party services.\n     * Actions execute in a Node.js environment and can interact with the database indirectly by\n     * calling queries and mutations via the provided {@link ActionCtx} object. Actions need to be defined\n     * in the \\`/convex/actions  directory\\`. Queries and mutations, on the other hand, must be defined\n     * outside of the \\`/convex/actions directory\\`.\n     *\n     * @param func - The action. It receives a {@link ActionCtx} as its first argument.\n     * @returns The wrapped action. Include this as an \\`export\\` to name it and make it accessible.\n     */\n    export const action = actionGeneric;\n\n    /**\n     * Define a Convex HTTP endpoint.\n     *\n     * @param func - The function. It receives an {@link HttpEndpointCtx} as its first argument, and a \\`Request\\` object\n     * as its second.\n     * @returns The wrapped endpoint function. Route a URL path to this function in \\`convex/http.js\\`.\n     */\n    export const httpEndpoint = httpEndpointGeneric;\n    `;\n\n  return {\n    DTS: serverDTS,\n    JS: serverJS,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6C;AAEtC,SAAS,gBAAsC;AACpD,QAAM,YAAY;AAAA,UACdsHF,QAAM,WAAW;AAAA,UACb;AAAA,IACA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDF,SAAO;AAAA,IACL,KAAK;AAAA,IACL,IAAI;AAAA,EACN;AACF;",
  "names": []
}
