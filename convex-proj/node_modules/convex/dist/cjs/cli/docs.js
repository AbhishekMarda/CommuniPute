"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var docs_exports = {};
__export(docs_exports, {
  docs: () => docs
});
module.exports = __toCommonJS(docs_exports);
var import_commander = require("commander");
var import_open = __toESM(require("open"));
var import_config = require("./lib/config.js");
var import_chalk = __toESM(require("chalk"));
var import_utils = require("./lib/utils.js");
var import_context = require("./lib/context.js");
async function openDocs(toOpen, cookie) {
  let docsUrl = "https://docs.convex.dev";
  if (cookie !== void 0) {
    docsUrl += "/?t=" + cookie;
  }
  if (toOpen) {
    await (0, import_open.default)(docsUrl);
    console.log(import_chalk.default.green("Docs have launched! Check your browser."));
  } else {
    console.log(import_chalk.default.green(`Find Convex docs here: ${docsUrl}`));
  }
}
const docs = new import_commander.Command("docs").description("Launch Convex docs").option("--no-open", "Print docs URL instead of opening it in your browser").action(async (options) => {
  const ctx = import_context.oneoffContext;
  const configPath = await (0, import_config.configFilepath)(ctx);
  let config;
  try {
    config = (0, import_config.parseProjectConfig)(JSON.parse(ctx.fs.readUtf8File(configPath)));
  } catch (err) {
    await openDocs(options.open);
    return;
  }
  const getCookieUrl = `get_cookie_for_project/${config.team}/${config.project}`;
  const client = await (0, import_utils.bigBrainClient)(ctx);
  try {
    const res = await client.get(getCookieUrl);
    (0, import_utils.deprecationCheckWarning)(ctx, res);
    await openDocs(options.open, res.data.cookie);
  } catch {
    await openDocs(options.open);
  }
});
//# sourceMappingURL=docs.js.map
