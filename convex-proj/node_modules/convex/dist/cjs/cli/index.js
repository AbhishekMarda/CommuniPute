#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_commander = require("commander");
var import_init = require("./init.js");
var import_dashboard = require("./dashboard.js");
var import_deployments = require("./deployments.js");
var import_docs = require("./docs.js");
var import__ = require("../index.js");
var import_auth = require("./auth.js");
var import_codegen = require("./codegen.js");
var import_reinit = require("./reinit.js");
var import_update = require("./update.js");
var import_typecheck = require("./typecheck.js");
var import_login = require("./login.js");
var import_chalk = __toESM(require("chalk"));
var Sentry = __toESM(require("@sentry/node"));
var import_tracing = require("@sentry/tracing");
var import_strip_ansi = __toESM(require("strip-ansi"));
var import_config = require("./lib/config.js");
var import_convexImport = require("./convexImport.js");
var import_dev = require("./dev.js");
var import_deploy = require("./deploy.js");
const MINIMUM_MAJOR_VERSION = 14;
async function main() {
  if (!process.env.CI && import_config.provisionHost === import_config.productionProvisionHost) {
    Sentry.init({
      dsn: "https://f9fa0306e3d540079cf40ce8c2ad9644@o1192621.ingest.sentry.io/6390839",
      release: "cli@" + import__.version,
      tracesSampleRate: 0.2,
      beforeBreadcrumb: (breadcrumb) => {
        if (breadcrumb.message) {
          breadcrumb.message = (0, import_strip_ansi.default)(breadcrumb.message);
        }
        return breadcrumb;
      }
    });
  }
  const nodeVersion = process.versions.node;
  const majorVersion = parseInt(nodeVersion.split(".")[0], 10);
  if (majorVersion < MINIMUM_MAJOR_VERSION) {
    console.log(
      import_chalk.default.red(
        `Your Node version ${nodeVersion} is too old. Convex requires at least Node v${MINIMUM_MAJOR_VERSION}.`
      )
    );
    console.log(
      import_chalk.default.gray(
        `You can use ${import_chalk.default.bold(
          "nvm"
        )} (https://github.com/nvm-sh/nvm#installing-and-updating) to manage different versions of Node.`
      )
    );
    console.log(
      import_chalk.default.gray(
        "After installing `nvm`, install the latest version of Node with " + import_chalk.default.bold("`nvm install node`.")
      )
    );
    console.log(
      import_chalk.default.gray(
        "Then, activate the installed version in your terminal with " + import_chalk.default.bold("`nvm use`.")
      )
    );
    process.exit(1);
  }
  if (process.platform === "win32") {
    console.log(
      import_chalk.default.yellow(
        "Convex has preliminary support for development on Windows. Some functionality may be missing or broken. Please report issues at https://convex.dev/community. Read the docs for more information: https://docs.convex.dev/understanding/state#windows-development."
      )
    );
  }
  const program = new import_commander.Command();
  program.name("convex");
  program.description("The Convex project management CLI");
  program.usage("command [options]");
  program.addCommand(import_login.login);
  program.addCommand(import_init.init);
  program.addCommand(import_reinit.reinit);
  program.addCommand(import_dev.dev);
  program.addCommand(import_deploy.deploy);
  program.addCommand(import_deployments.deployments, { noHelp: true });
  program.addCommand(import_codegen.codegen);
  program.addCommand(import_typecheck.typecheck);
  program.addCommand(import_auth.auth);
  program.addCommand(import_dashboard.dashboard);
  program.addCommand(import_docs.docs);
  program.addCommand(import_convexImport.convexImport);
  program.addCommand(import_update.update);
  program.version(import__.version);
  try {
    await program.parseAsync(process.argv);
  } catch (e) {
    Sentry.captureException(e);
    process.exitCode = 1;
    throw e;
  } finally {
    await Sentry.close();
  }
  process.exit();
}
void main();
//# sourceMappingURL=index.js.map
