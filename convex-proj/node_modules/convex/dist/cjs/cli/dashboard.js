"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dashboard_exports = {};
__export(dashboard_exports, {
  dashboard: () => dashboard,
  dashboardUrl: () => dashboardUrl
});
module.exports = __toCommonJS(dashboard_exports);
var import_commander = require("commander");
var import_chalk = __toESM(require("chalk"));
var import_config = require("./lib/config.js");
var import_open = __toESM(require("open"));
var import_context = require("./lib/context.js");
const dashboard = new import_commander.Command("dashboard").description("Open the dashboard in the browser").option(
  "--no-open",
  "Don't automatically open the dashboard in the default browser"
).action(async (options) => {
  const ctx = import_context.oneoffContext;
  const loginUrl = await dashboardUrl(ctx);
  if (options.open) {
    console.log(import_chalk.default.gray(`Opening ${loginUrl} in the default browser...`));
    await (0, import_open.default)(loginUrl);
  } else {
    console.log(loginUrl);
  }
});
async function dashboardUrl(ctx) {
  const { projectConfig } = await (0, import_config.readProjectConfig)(ctx);
  const { project, team, prodUrl } = projectConfig;
  const host = process.env.CONVEX_PROVISION_HOST ? "http://localhost:3000" : "https://dashboard.convex.dev";
  if (process.env.CONVEX_PROVISION_HOST) {
    return host;
  }
  const deployment = prodUrl.match(/https?:\/\/([^.]*)[.]/)[1];
  return `${host}/${team}/${project}/${deployment}`;
}
//# sourceMappingURL=dashboard.js.map
