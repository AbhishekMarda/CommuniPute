"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var typecheck_exports = {};
__export(typecheck_exports, {
  typecheck: () => typecheck
});
module.exports = __toCommonJS(typecheck_exports);
var import_chalk = __toESM(require("chalk"));
var import_utils = require("./lib/utils");
var import_commander = require("commander");
var import_config = require("./lib/config");
var import_typecheck = require("./lib/typecheck");
var import_context = require("./lib/context");
const typecheck = new import_commander.Command("typecheck").description(
  "Run TypeScript typechecking on your Convex functions with `tsc --noEmit`."
).action(async () => {
  const ctx = import_context.oneoffContext;
  const { configPath, config: localConfig } = await (0, import_config.readConfig)(ctx, false);
  await (0, import_utils.ensureHasConvexDependency)(ctx, "typecheck");
  const typecheckResult = await (0, import_typecheck.typeCheckFunctions)(
    ctx,
    (0, import_utils.functionsDir)(configPath, localConfig.projectConfig)
  );
  if (typecheckResult === "typecheckFailed") {
    console.error(import_chalk.default.gray("Typecheck failed"));
    return await ctx.fatalError(1, "fs");
  } else if (typecheckResult === "cantTypeCheck") {
    console.error(
      import_chalk.default.gray("Unable to typecheck; is TypeScript installed?")
    );
    return await ctx.fatalError(1, "fs");
  } else {
    console.error(
      import_chalk.default.green(
        "Typecheck passed: `tsc --noEmit` completed with exit code 0."
      )
    );
    return await ctx.fatalError(0);
  }
});
//# sourceMappingURL=typecheck.js.map
