"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var deployments_exports = {};
__export(deployments_exports, {
  deployments: () => deployments
});
module.exports = __toCommonJS(deployments_exports);
var import_commander = require("commander");
var import_config = require("./lib/config.js");
var import_chalk = __toESM(require("chalk"));
var import_utils = require("./lib/utils.js");
var import_context = require("./lib/context.js");
const deployments = new import_commander.Command("deployments").description("List deployments associated with a project").action(async () => {
  const ctx = import_context.oneoffContext;
  const { projectConfig: config } = await (0, import_config.readProjectConfig)(ctx);
  const url = `/teams/${config.team}/projects/${config.project}/deployments`;
  console.error(
    import_chalk.default.yellow(`Deployments for project ${config.team}/${config.project}`)
  );
  const deployments2 = await (0, import_utils.bigBrainAPI)(ctx, "GET", url);
  console.log(deployments2);
  if (deployments2.length === 0) {
    console.error(import_chalk.default.yellow(`No deployments exist for project`));
  }
});
//# sourceMappingURL=deployments.js.map
