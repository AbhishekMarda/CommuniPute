{
  "version": 3,
  "sources": ["../../../src/cli/reinit.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport ora from \"ora\";\nimport { Command, Option } from \"commander\";\nimport { getUrlAndAdminKey } from \"./lib/api.js\";\nimport { validateOrSelectProject, validateOrSelectTeam } from \"./lib/utils.js\";\nimport {\n  configName,\n  pullConfig,\n  readProjectConfig,\n  writeProjectConfig,\n} from \"./lib/config.js\";\nimport { oneoffContext } from \"./lib/context.js\";\nimport { doCodegen } from \"./lib/codegen.js\";\n\nexport const reinit = new Command(\"reinit\")\n  .description(\n    \"Reinitialize a Convex project in the local directory if you've lost your convex.json file\"\n  )\n  .addOption(\n    new Option(\n      \"--team <team_slug>\",\n      \"The identifier of the team the project belongs to.\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"--project <project_slug>\",\n      \"The identifier of the project you'd like to reinitialize.\"\n    )\n  )\n  .action(async options => {\n    const ctx = oneoffContext;\n    const configFn = configName();\n    if (ctx.fs.exists(configFn)) {\n      console.error(chalk.red(`File \"${configFn}\" already exists.`));\n      console.error(\n        \"If you'd like to regenerate it, delete the file and rerun `npx convex reinit`\"\n      );\n      return await ctx.fatalError(1, \"fs\");\n    }\n\n    const teamSlug = await validateOrSelectTeam(\n      ctx,\n      options.team,\n      \"Choose which team the project belongs to:\"\n    );\n\n    const projectSlug = await validateOrSelectProject(\n      ctx,\n      options.project,\n      teamSlug,\n      \"Reinitialize project:\",\n      \"Choose which project to reinitialize:\"\n    );\n    if (!projectSlug) {\n      console.log(\"Aborted\");\n      return;\n    }\n    const spinner = (ctx.spinner = ora({\n      text: `Reinitializing project ${projectSlug}...\\n`,\n      stream: process.stdout,\n    }).start());\n\n    const { url, adminKey } = await getUrlAndAdminKey(\n      ctx,\n      projectSlug,\n      teamSlug,\n      \"prod\"\n    );\n    {\n      const { projectConfig } = await pullConfig(\n        ctx,\n        projectSlug,\n        teamSlug,\n        url,\n        adminKey\n      );\n      await writeProjectConfig(ctx, projectConfig);\n    }\n\n    const { projectConfig, configPath } = await readProjectConfig(ctx);\n    await doCodegen({\n      ctx,\n      projectConfig,\n      configPath,\n      typeCheckMode: \"disable\",\n      quiet: true,\n    });\n\n    spinner.succeed(`Successfully reinitialized ${projectSlug}!`);\n    console.log(\n      \"Configuration settings have been written to\",\n      chalk.bold(configFn)\n    );\n  });\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,iBAAgB;AAChB,uBAAgC;AAChC,iBAAkC;AAClC,mBAA8D;AAC9D,oBAKO;AACP,qBAA8B;AAC9B,qBAA0B;AAEnB,MAAM,SAAS,IAAI,yBAAQ,QAAQ,EACvC;AAAA,EACC;AACF,EACC;AAAA,EACC,IAAI;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF,EACC;AAAA,EACC,IAAI;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF,EACC,OAAO,OAAM,YAAW;AACvB,QAAM,MAAM;AACZ,QAAM,eAAW,0BAAW;AAC5B,MAAI,IAAI,GAAG,OAAO,QAAQ,GAAG;AAC3B,YAAQ,MAAM,aAAAA,QAAM,IAAI,SAAS,2BAA2B,CAAC;AAC7D,YAAQ;AAAA,MACN;AAAA,IACF;AACA,WAAO,MAAM,IAAI,WAAW,GAAG,IAAI;AAAA,EACrC;AAEA,QAAM,WAAW,UAAM;AAAA,IACrB;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACF;AAEA,QAAM,cAAc,UAAM;AAAA,IACxB;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI,CAAC,aAAa;AAChB,YAAQ,IAAI,SAAS;AACrB;AAAA,EACF;AACA,QAAM,UAAW,IAAI,cAAU,WAAAC,SAAI;AAAA,IACjC,MAAM,0BAA0B;AAAA;AAAA,IAChC,QAAQ,QAAQ;AAAA,EAClB,CAAC,EAAE,MAAM;AAET,QAAM,EAAE,KAAK,SAAS,IAAI,UAAM;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA;AACE,UAAM,EAAE,eAAAC,eAAc,IAAI,UAAM;AAAA,MAC9B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,cAAM,kCAAmB,KAAKA,cAAa;AAAA,EAC7C;AAEA,QAAM,EAAE,eAAe,WAAW,IAAI,UAAM,iCAAkB,GAAG;AACjE,YAAM,0BAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,OAAO;AAAA,EACT,CAAC;AAED,UAAQ,QAAQ,8BAA8B,cAAc;AAC5D,UAAQ;AAAA,IACN;AAAA,IACA,aAAAF,QAAM,KAAK,QAAQ;AAAA,EACrB;AACF,CAAC;",
  "names": ["chalk", "ora", "projectConfig"]
}
