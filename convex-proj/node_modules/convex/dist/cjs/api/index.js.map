{
  "version": 3,
  "sources": ["../../../src/api/index.ts"],
  "sourcesContent": ["/**\n * All of the utility types to describe a Convex API of queries and mutations\n */\n\nimport { Expand, PickByValue, UnionToIntersection } from \"../type_utils.js\";\n\n/**\n * Description of the Convex functions available to an application.\n *\n * This is a generic type that expresses the shape of API types created by\n * `npx convex codegen`. It's used to make the Convex clients type-safe.\n *\n * @public\n */\nexport type GenericAPI = {\n  queries: Record<string, (...args: any[]) => any>;\n  mutations: Record<string, (...args: any[]) => any>;\n  actions: Record<string, (...args: any[]) => any>;\n};\n\n/**\n * Helper types for interacting with the overall API type\n */\n\n/**\n * The names of query functions in a Convex API.\n *\n * @public\n */\nexport type QueryNames<API extends GenericAPI> = keyof API[\"queries\"] & string;\n\n/**\n * The names of mutation functions in a Convex API.\n *\n * @public\n */\nexport type MutationNames<API extends GenericAPI> = keyof API[\"mutations\"] &\n  string;\n\n/**\n * The names of actions in a Convex API.\n *\n * @public\n */\nexport type ActionNames<API extends GenericAPI> = keyof API[\"actions\"] & string;\n\n/**\n * The type of a query function in a Convex API.\n *\n * @public\n */\nexport type NamedQuery<\n  API extends GenericAPI,\n  Name extends QueryNames<API>\n> = API[\"queries\"][Name];\n\n/**\n * The type of a mutation function in a Convex API.\n *\n * @public\n */\nexport type NamedMutation<\n  API extends GenericAPI,\n  Name extends MutationNames<API>\n> = API[\"mutations\"][Name];\n\n/**\n * The type of an action in a Convex API.\n *\n * @public\n */\nexport type NamedAction<\n  API extends GenericAPI,\n  Name extends MutationNames<API>\n> = API[\"actions\"][Name];\n\n/**\n * Internal Codegen Type Helpers\n */\n\n/**\n * Generate the fully-qualified query/mutation name of an export.\n *\n * This is `path/to/module:export` or `path/to/module` for the default export.\n */\ntype FunctionName<\n  FilePath extends string,\n  ExportName extends string\n> = ExportName extends \"default\" ? FilePath : `${FilePath}:${ExportName}`;\n\n/**\n * Generate a type of this module where each export is renamed to its\n * fully-qualified {@link FunctionName}.\n */\ntype NameModule<FilePath extends string, Module extends Record<string, any>> = {\n  [ExportName in keyof Module as FunctionName<\n    FilePath,\n    ExportName & string\n  >]: Module[ExportName];\n};\n\n/**\n * Name and merge together all of the exports in the `convex/` directory into\n * a flat object type.\n */\ntype MergeAllExports<Modules extends Record<string, Record<string, any>>> =\n  UnionToIntersection<\n    {\n      [FilePath in keyof Modules]: NameModule<\n        FilePath & string,\n        Modules[FilePath]\n      >;\n    }[keyof Modules]\n  >;\n\ntype UndefinedToNull<T> = T extends void ? null : T;\n\n/**\n * Converts a map of query and mutation types into their client form.\n *\n * This is done by:\n * - Unwrapping `Promise` if it's in the output.\n * - Switching functions that output `undefined` to `null`.\n *\n */\ntype ConvertToClientFunctions<FunctionsByName extends Record<string, any>> = {\n  [Name in keyof FunctionsByName]: (\n    ...args: FunctionsByName[Name][\"args\"]\n  ) => UndefinedToNull<Awaited<FunctionsByName[Name][\"output\"]>>;\n};\n\n/**\n * Create the API type from the types of all of the modules.\n *\n * Input is an object mapping file paths to the type of each module.\n *\n * For internal use by Convex code generation.\n *\n * @public\n */\nexport type ApiFromModules<\n  Modules extends Record<string, Record<string, any>>\n> = {\n  queries: Expand<\n    ConvertToClientFunctions<\n      PickByValue<MergeAllExports<Modules>, { isQuery: true }>\n    >\n  >;\n  mutations: Expand<\n    ConvertToClientFunctions<\n      PickByValue<MergeAllExports<Modules>, { isMutation: true }>\n    >\n  >;\n  actions: Expand<\n    ConvertToClientFunctions<\n      PickByValue<MergeAllExports<Modules>, { isAction: true }>\n    >\n  >;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
