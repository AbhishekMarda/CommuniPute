{
  "version": 3,
  "sources": ["../../../src/cli/deploy.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Command, Option } from \"commander\";\nimport { getUrlAndAdminKey } from \"./lib/api\";\nimport { readProjectConfig } from \"./lib/config\";\nimport { oneoffContext } from \"./lib/context\";\nimport { offerToWriteToEnv } from \"./lib/envvars\";\nimport { PushOptions, runPush } from \"./lib/push\";\n\nexport const deploy = new Command(\"deploy\")\n  .description(\n    \"Deploy your Convex functions to this project's production deployment\"\n  )\n  .option(\"-v, --verbose\", \"Show full listing of changes\")\n  .option(\n    \"--dry-run\",\n    \"Print out the generated configuration without deploying to your production deployment\"\n  )\n  .addOption(\n    new Option(\n      \"--typecheck <mode>\",\n      `Whether to check TypeScript files with \\`tsc --noEmit\\` before deploying.`\n    )\n      .choices([\"enable\", \"try\", \"disable\"])\n      .default(\"try\")\n  )\n  .addOption(\n    new Option(\n      \"--codegen <mode>\",\n      \"Whether to regenerate code in `convex/_generated/` before pushing.\"\n    )\n      .choices([\"enable\", \"disable\"])\n      .default(\"enable\")\n  )\n  .option(\n    \"--save-url\",\n    \"Save the production deployment URL to .env or .env.production.\"\n  )\n  .option(\n    \"--no-save-url\",\n    \"Do not save production deployment URL to a .env file.\"\n  )\n\n  .addOption(new Option(\"--debug-bundle-path <path>\").hideHelp())\n  .addOption(new Option(\"--debug\").hideHelp())\n  // harmless deprecated option\n  .addOption(new Option(\"-y, --yes\").hideHelp())\n  // Hidden options to pass in admin key and url for tests and local development\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  .action(async cmdOptions => {\n    const ctx = oneoffContext;\n    const saveUrl =\n      cmdOptions.saveUrl === true\n        ? \"yes\"\n        : cmdOptions.saveUrl === false\n        ? \"no\"\n        : \"ask\";\n    const projectConfig = (await readProjectConfig(ctx)).projectConfig;\n    let adminKey = cmdOptions.adminKey;\n    const url = cmdOptions.url ?? projectConfig.prodUrl;\n\n    if (process.env.CONVEX_DEPLOY_KEY) {\n      adminKey = process.env.CONVEX_DEPLOY_KEY;\n    }\n\n    const buildEnvironmentExpectsConvexDeployKey = process.env.VERCEL\n      ? \"Vercel\"\n      : process.env.NETLIFY\n      ? \"Netlify\"\n      : false;\n\n    if (!adminKey) {\n      if (buildEnvironmentExpectsConvexDeployKey) {\n        console.error(\n          chalk.yellow(\n            `${buildEnvironmentExpectsConvexDeployKey} build environment detected but CONVEX_DEPLOY_KEY is not set. Set this environment variable to deploy from this environment.`\n          )\n        );\n        await ctx.fatalError(1);\n      }\n      adminKey = (\n        await getUrlAndAdminKey(\n          ctx,\n          projectConfig.project,\n          projectConfig.team,\n          \"prod\"\n        )\n      ).adminKey;\n    }\n\n    await offerToWriteToEnv(ctx, \"prod\", url, saveUrl);\n\n    const options: PushOptions = {\n      adminKey,\n      verbose: !!cmdOptions.verbose,\n      dryRun: !!cmdOptions.dryRun,\n      typecheck: cmdOptions.typecheck,\n      debug: !!cmdOptions.debug,\n      debugBundlePath: cmdOptions.debugBundlePath,\n      codegen: cmdOptions.codegen === \"enable\",\n      url,\n    };\n    console.log(`Deploying to ${url}...${options.dryRun ? \" [dry run]\" : \"\"}`);\n    await runPush(oneoffContext, options);\n    console.log(\n      chalk.green(\n        `${\n          options.dryRun ? \"Would have deployed\" : \"Deployed\"\n        } Convex functions to ${url}`\n      )\n    );\n  });\n"],
  "mappings": ";AAAA,OAAO,WAAW;AAClB,SAAS,SAAS,cAAc;AAChC,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,SAAS,qBAAqB;AAC9B,SAAS,yBAAyB;AAClC,SAAsB,eAAe;AAE9B,aAAM,SAAS,IAAI,QAAQ,QAAQ,EACvC;AAAA,EACC;AACF,EACC,OAAO,iBAAiB,8BAA8B,EACtD;AAAA,EACC;AAAA,EACA;AACF,EACC;AAAA,EACC,IAAI;AAAA,IACF;AAAA,IACA;AAAA,EACF,EACG,QAAQ,CAAC,UAAU,OAAO,SAAS,CAAC,EACpC,QAAQ,KAAK;AAClB,EACC;AAAA,EACC,IAAI;AAAA,IACF;AAAA,IACA;AAAA,EACF,EACG,QAAQ,CAAC,UAAU,SAAS,CAAC,EAC7B,QAAQ,QAAQ;AACrB,EACC;AAAA,EACC;AAAA,EACA;AACF,EACC;AAAA,EACC;AAAA,EACA;AACF,EAEC,UAAU,IAAI,OAAO,4BAA4B,EAAE,SAAS,CAAC,EAC7D,UAAU,IAAI,OAAO,SAAS,EAAE,SAAS,CAAC,EAE1C,UAAU,IAAI,OAAO,WAAW,EAAE,SAAS,CAAC,EAE5C,UAAU,IAAI,OAAO,wBAAwB,EAAE,SAAS,CAAC,EACzD,UAAU,IAAI,OAAO,aAAa,EAAE,SAAS,CAAC,EAC9C,OAAO,OAAM,eAAc;AAC1B,QAAM,MAAM;AACZ,QAAM,UACJ,WAAW,YAAY,OACnB,QACA,WAAW,YAAY,QACvB,OACA;AACN,QAAM,iBAAiB,MAAM,kBAAkB,GAAG,GAAG;AACrD,MAAI,WAAW,WAAW;AAC1B,QAAM,MAAM,WAAW,OAAO,cAAc;AAE5C,MAAI,QAAQ,IAAI,mBAAmB;AACjC,eAAW,QAAQ,IAAI;AAAA,EACzB;AAEA,QAAM,yCAAyC,QAAQ,IAAI,SACvD,WACA,QAAQ,IAAI,UACZ,YACA;AAEJ,MAAI,CAAC,UAAU;AACb,QAAI,wCAAwC;AAC1C,cAAQ;AAAA,QACN,MAAM;AAAA,UACJ,GAAG;AAAA,QACL;AAAA,MACF;AACA,YAAM,IAAI,WAAW,CAAC;AAAA,IACxB;AACA,gBACE,MAAM;AAAA,MACJ;AAAA,MACA,cAAc;AAAA,MACd,cAAc;AAAA,MACd;AAAA,IACF,GACA;AAAA,EACJ;AAEA,QAAM,kBAAkB,KAAK,QAAQ,KAAK,OAAO;AAEjD,QAAM,UAAuB;AAAA,IAC3B;AAAA,IACA,SAAS,CAAC,CAAC,WAAW;AAAA,IACtB,QAAQ,CAAC,CAAC,WAAW;AAAA,IACrB,WAAW,WAAW;AAAA,IACtB,OAAO,CAAC,CAAC,WAAW;AAAA,IACpB,iBAAiB,WAAW;AAAA,IAC5B,SAAS,WAAW,YAAY;AAAA,IAChC;AAAA,EACF;AACA,UAAQ,IAAI,gBAAgB,SAAS,QAAQ,SAAS,eAAe,IAAI;AACzE,QAAM,QAAQ,eAAe,OAAO;AACpC,UAAQ;AAAA,IACN,MAAM;AAAA,MACJ,GACE,QAAQ,SAAS,wBAAwB,kCACnB;AAAA,IAC1B;AAAA,EACF;AACF,CAAC;",
  "names": []
}
