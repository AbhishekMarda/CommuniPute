{
  "version": 3,
  "sources": ["../../../../src/cli/lib/typecheck.ts"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport chalk from \"chalk\";\nimport path from \"path\";\nimport { Context } from \"./context\";\nimport * as Sentry from \"@sentry/node\";\n\nexport type TypecheckResult = \"cantTypeCheck\" | \"success\" | \"typecheckFailed\";\n\nexport type TypeCheckMode = \"enable\" | \"try\" | \"disable\";\n\n/**\n * Conditionally run a typecheck function and interpret the result.\n *\n * If typeCheckMode === \"disable\", never run the typecheck function.\n * If typeCheckMode === \"enable\", run the typecheck and crash if typechecking\n * fails or we can't find tsc.\n * If typeCheckMode === \"try\", try and run the typecheck. crash if typechecking\n * fails but don't worry if tsc is missing and we can't run it.\n */\nexport async function processTypeCheckResult(\n  ctx: Context,\n  typeCheckMode: TypeCheckMode,\n  runTypeCheck: () => Promise<TypecheckResult>\n): Promise<void> {\n  if (typeCheckMode === \"disable\") {\n    return;\n  }\n  const result = await runTypeCheck();\n  if (\n    (result === \"cantTypeCheck\" && typeCheckMode === \"enable\") ||\n    result === \"typecheckFailed\"\n  ) {\n    console.error(\n      chalk.gray(\"To ignore failing typecheck, use `--typecheck=disable`.\")\n    );\n    return await ctx.fatalError(1, \"fs\");\n  }\n}\n\n// Runs TypeScript compiler to typecheck Convex query and mutation functions.\nexport async function typeCheckFunctions(\n  ctx: Context,\n  functionsDir: string\n): Promise<TypecheckResult> {\n  const tsconfig = path.join(functionsDir, \"tsconfig.json\");\n  if (!ctx.fs.exists(tsconfig)) {\n    console.error(\n      \"Can't find convex/tsconfig.json to use to typecheck Convex functions.\"\n    );\n    console.error(\"Run `npx convex codegen --init` to create one.\");\n    return \"cantTypeCheck\";\n  }\n  return runTsc(ctx, [\"--project\", functionsDir]);\n}\n\nasync function runTsc(\n  ctx: Context,\n  tscArgs: string[]\n): Promise<TypecheckResult> {\n  const tscPath = path.join(\n    \"node_modules\",\n    \".bin\",\n    process.platform === \"win32\" ? \"tsc.CMD\" : \"tsc\"\n  );\n  if (!ctx.fs.exists(tscPath)) {\n    return \"cantTypeCheck\";\n  }\n  // Run `tsc` once and have it print out the files it touched. This output won't\n  // be very useful if there's an error, but we'll run it again to get a nice\n  // user-facing error in this exceptional case.\n  // The `--listFiles` command prints out files touched on success or error.\n  const result = child_process.spawnSync(\n    tscPath,\n    tscArgs.concat(\"--listFiles\")\n  );\n  if (result.status === null) {\n    console.error(chalk.red(`TypeScript typecheck timed out.`));\n    if (result.error) {\n      console.error(chalk.red(`${result.error}`));\n    }\n    return \"typecheckFailed\";\n  }\n  // Okay, we may have failed `tsc` but at least it returned. Try to parse its\n  // output to discover which files it touched.\n  const filesTouched = result.stdout\n    .toString(\"utf-8\")\n    .split(\"\\n\")\n    .map(s => s.trim())\n    .filter(s => s.length > 0);\n  let anyPathsFound = false;\n  for (const fileTouched of filesTouched) {\n    const absPath = path.resolve(fileTouched);\n    let st;\n    try {\n      st = ctx.fs.stat(absPath);\n      anyPathsFound = true;\n    } catch (err: any) {\n      // Just move on if we have a bogus path from `tsc`. We'll log below if\n      // we fail to stat *any* of the paths emitted by `tsc`.\n      // TODO: Switch to using their JS API so we can get machine readable output.\n      continue;\n    }\n    ctx.fs.registerPath(absPath, st);\n  }\n  if (filesTouched.length > 0 && !anyPathsFound) {\n    const err = new Error(\n      `Failed to stat any files emitted by tsc (received ${filesTouched.length})`\n    );\n    Sentry.captureException(err);\n  }\n\n  if (!result.error && result.status === 0) {\n    return \"success\";\n  }\n  // At this point we know that `tsc` failed. Rerun it without `--listFiles`\n  // and with stderr redirected to have it print out a nice error.\n  try {\n    // prettier-ignore\n    child_process.execFileSync(\n      tscPath,\n      tscArgs,\n      { stdio: \"inherit\" }\n    );\n    // If this passes, we had a concurrent file change that'll overlap with\n    // our observations in the first run. Invalidate our context's filesystem\n    // but allow the rest of the system to observe the success.\n    ctx.fs.invalidate();\n    return \"success\";\n  } catch (e) {\n    console.error(chalk.red(\"TypeScript typecheck via `tsc` failed.\"));\n    return \"typecheckFailed\";\n  }\n}\n"],
  "mappings": ";AAAA,OAAO,mBAAmB;AAC1B,OAAO,WAAW;AAClB,OAAO,UAAU;AAEjB,YAAY,YAAY;AAexB,sBAAsB,uBACpB,KACA,eACA,cACe;AACf,MAAI,kBAAkB,WAAW;AAC/B;AAAA,EACF;AACA,QAAM,SAAS,MAAM,aAAa;AAClC,MACG,WAAW,mBAAmB,kBAAkB,YACjD,WAAW,mBACX;AACA,YAAQ;AAAA,MACN,MAAM,KAAK,yDAAyD;AAAA,IACtE;AACA,WAAO,MAAM,IAAI,WAAW,GAAG,IAAI;AAAA,EACrC;AACF;AAGA,sBAAsB,mBACpB,KACA,cAC0B;AAC1B,QAAM,WAAW,KAAK,KAAK,cAAc,eAAe;AACxD,MAAI,CAAC,IAAI,GAAG,OAAO,QAAQ,GAAG;AAC5B,YAAQ;AAAA,MACN;AAAA,IACF;AACA,YAAQ,MAAM,gDAAgD;AAC9D,WAAO;AAAA,EACT;AACA,SAAO,OAAO,KAAK,CAAC,aAAa,YAAY,CAAC;AAChD;AAEA,eAAe,OACb,KACA,SAC0B;AAC1B,QAAM,UAAU,KAAK;AAAA,IACnB;AAAA,IACA;AAAA,IACA,QAAQ,aAAa,UAAU,YAAY;AAAA,EAC7C;AACA,MAAI,CAAC,IAAI,GAAG,OAAO,OAAO,GAAG;AAC3B,WAAO;AAAA,EACT;AAKA,QAAM,SAAS,cAAc;AAAA,IAC3B;AAAA,IACA,QAAQ,OAAO,aAAa;AAAA,EAC9B;AACA,MAAI,OAAO,WAAW,MAAM;AAC1B,YAAQ,MAAM,MAAM,IAAI,iCAAiC,CAAC;AAC1D,QAAI,OAAO,OAAO;AAChB,cAAQ,MAAM,MAAM,IAAI,GAAG,OAAO,OAAO,CAAC;AAAA,IAC5C;AACA,WAAO;AAAA,EACT;AAGA,QAAM,eAAe,OAAO,OACzB,SAAS,OAAO,EAChB,MAAM,IAAI,EACV,IAAI,OAAK,EAAE,KAAK,CAAC,EACjB,OAAO,OAAK,EAAE,SAAS,CAAC;AAC3B,MAAI,gBAAgB;AACpB,aAAW,eAAe,cAAc;AACtC,UAAM,UAAU,KAAK,QAAQ,WAAW;AACxC,QAAI;AACJ,QAAI;AACF,WAAK,IAAI,GAAG,KAAK,OAAO;AACxB,sBAAgB;AAAA,IAClB,SAAS,KAAP;AAIA;AAAA,IACF;AACA,QAAI,GAAG,aAAa,SAAS,EAAE;AAAA,EACjC;AACA,MAAI,aAAa,SAAS,KAAK,CAAC,eAAe;AAC7C,UAAM,MAAM,IAAI;AAAA,MACd,qDAAqD,aAAa;AAAA,IACpE;AACA,WAAO,iBAAiB,GAAG;AAAA,EAC7B;AAEA,MAAI,CAAC,OAAO,SAAS,OAAO,WAAW,GAAG;AACxC,WAAO;AAAA,EACT;AAGA,MAAI;AAEF,kBAAc;AAAA,MACZ;AAAA,MACA;AAAA,MACA,EAAE,OAAO,UAAU;AAAA,IACrB;AAIA,QAAI,GAAG,WAAW;AAClB,WAAO;AAAA,EACT,SAAS,GAAP;AACA,YAAQ,MAAM,MAAM,IAAI,wCAAwC,CAAC;AACjE,WAAO;AAAA,EACT;AACF;",
  "names": []
}
