{
  "version": 3,
  "sources": ["../../../../src/cli/codegen_templates/dataModel.ts"],
  "sourcesContent": ["import { GeneratedJsWithTypes, header } from \"./common.js\";\n\nconst dataModelDTS = `\n  ${header(\"Generated data model types.\")}\n  import type {\n     DataModelFromSchemaDefinition,\n  } from \"convex/schema\";\n  import type { DocumentByName, TableNamesInDataModel } from \"convex/server\";\n  import { GenericId, GenericIdConstructor } from \"convex/values\";\n  import schema from \"../schema\";\n  \n  /**\n   * The names of all of your Convex tables.\n   */\n  export type TableNames = TableNamesInDataModel<DataModel>;\n  \n  /**\n   * The type of a document stored in Convex.\n   * \n   * @typeParam TableName - A string literal type of the table name (like \"users\").\n   */\n  export type Document<TableName extends TableNames> = DocumentByName<DataModel, TableName>;\n\n  /**\n   * An identifier for a document in Convex.\n   *\n   * Convex documents are uniquely identified by their \\`Id\\`, which is accessible\n   * on the \\`_id\\` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).\n   *\n   * Documents can be loaded using \\`db.get(id)\\` in query and mutation functions.\n   *\n   * **Important**: Use \\`myId.equals(otherId)\\` to check for equality.\n   * Using \\`===\\` will not work because two different instances of \\`Id\\` can refer\n   * to the same document.\n   * \n   * @typeParam TableName - A string literal type of the table name (like \"users\").\n   */\n  export type Id<TableName extends TableNames> = GenericId<TableName>;\n\n  /**\n   * An identifier for a document in Convex.\n   *\n   * Convex documents are uniquely identified by their \\`Id\\`, which is accessible\n   * on the \\`_id\\` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).\n   *\n   * Documents can be loaded using \\`db.get(id)\\` in query and mutation functions.\n   *\n   * **Important**: Use \\`myId.equals(otherId)\\` to check for equality.\n   * Using \\`===\\` will not work because two different instances of \\`Id\\` can refer\n   * to the same document.\n   */\n  export declare const Id: GenericIdConstructor<TableNames>;\n\n  /**\n   * A type describing your Convex data model.\n   * \n   * This type includes information about what tables you have, the type of\n   * documents stored in those tables, and the indexes defined on them.\n   * \n   * This type is used to parameterize methods like \\`queryGeneric\\` and \n   * \\`mutationGeneric\\` to make them type-safe. \n   */\n  export type DataModel = DataModelFromSchemaDefinition<typeof schema>;\n  `;\n\nconst dataModelJS = `\n  ${header(\"Generated data model types.\")}\n  import { GenericId } from \"convex/values\";\n\n  /**\n   * An identifier for a document in Convex.\n   *\n   * Convex documents are uniquely identified by their \\`Id\\`, which is accessible\n   * on the \\`_id\\` field. To learn more, see [Data Modeling](https://docs.convex.dev/using/data-modeling).\n   *\n   * Documents can be loaded using \\`db.get(id)\\` in query and mutation functions.\n   *\n   * **Important**: Use \\`myId.equals(otherId)\\` to check for equality.\n   * Using \\`===\\` will not work because two different instances of \\`Id\\` can refer\n   * to the same document.\n   */\n   export const Id = GenericId;\n`;\n\nexport const dataModel: GeneratedJsWithTypes = {\n  DTS: dataModelDTS,\n  JS: dataModelJS,\n};\n\nconst dataModelWithoutSchemaDTS = `\n  ${header(\"Generated data model types.\")}\n  import { AnyDataModel } from \"convex/server\";\n  import { GenericId } from \"convex/values\";\n\n  /**\n   * No \\`schema.ts\\` file found!\n   * \n   * This generated code has permissive types like \\`Document = any\\` because\n   * Convex doesn't know your schema. If you'd like more type safety, see\n   * https://docs.convex.dev/using/schemas for instructions on how to add a\n   * schema file.\n   * \n   * After you write a schema, rerun codegen with \\`npx convex codegen\\`.\n   */\n  \n  /**\n   * The names of all of your Convex tables.\n   */\n  export type TableNames = string;\n    \n  /**\n   * The type of a document stored in Convex.\n   */\n  export type Document = any;\n\n  /**\n   * An identifier for a document in Convex.\n   *\n   * Convex documents are uniquely identified by their \\`Id\\`, which is accessible\n   * on the \\`_id\\` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).\n   *\n   * Documents can be loaded using \\`db.get(id)\\` in query and mutation functions.\n   *\n   * **Important**: Use \\`myId.equals(otherId)\\` to check for equality.\n   * Using \\`===\\` will not work because two different instances of \\`Id\\` can refer\n   * to the same document.\n   */\n  export type Id<TableName extends TableNames = TableNames> = GenericId<TableName>;\n  export declare const Id: typeof GenericId;\n\n  /**\n   * A type describing your Convex data model.\n   * \n   * This type includes information about what tables you have, the type of\n   * documents stored in those tables, and the indexes defined on them.\n   * \n   * This type is used to parameterize methods like \\`queryGeneric\\` and \n   * \\`mutationGeneric\\` to make them type-safe. \n   */\n  export type DataModel = AnyDataModel;`;\n\n/**\n * Codegen used when there isn't a `schema.ts` file yet.\n *\n * Make sure that the exports of this are the same as the real version above.\n */\nexport const dataModelWithoutSchema: GeneratedJsWithTypes = {\n  DTS: dataModelWithoutSchemaDTS,\n\n  // If you don't have a schema, the JS is still the same.\n  JS: dataModelJS,\n};\n"],
  "mappings": ";AAAA,SAA+B,cAAc;AAE7C,MAAM,eAAe;AAAA,IACjB,OAAO,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DxC,MAAM,cAAc;AAAA,IAChB,OAAO,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBjC,aAAM,YAAkC;AAAA,EAC7C,KAAK;AAAA,EACL,IAAI;AACN;AAEA,MAAM,4BAA4B;AAAA,IAC9B,OAAO,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwDjC,aAAM,yBAA+C;AAAA,EAC1D,KAAK;AAAA,EAGL,IAAI;AACN;",
  "names": []
}
