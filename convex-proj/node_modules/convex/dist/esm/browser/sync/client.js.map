{
  "version": 3,
  "sources": ["../../../../src/browser/sync/client.ts"],
  "sourcesContent": ["import { v4 as uuidv4 } from \"uuid\";\nimport { GenericAPI } from \"../../api/index.js\";\nimport { version } from \"../../index.js\";\nimport { convexToJson, JSONValue, Value } from \"../../values/index.js\";\nimport { logFatalError } from \"../logging.js\";\nimport { ActionManager } from \"./action_manager.js\";\nimport { LocalSyncState } from \"./local_state.js\";\nimport { RequestManager } from \"./request_manager.js\";\nimport {\n  OptimisticLocalStore,\n  OptimisticUpdate,\n} from \"./optimistic_updates.js\";\nimport {\n  OptimisticQueryResults,\n  QueryResultsMap,\n} from \"./optimistic_updates_impl.js\";\nimport {\n  ActionRequest,\n  AuthError,\n  MutationRequest,\n  QueryId,\n  QueryJournal,\n  RequestId,\n  ServerMessage,\n} from \"./protocol.js\";\nimport { QueryResult, RemoteQuerySet } from \"./remote_query_set.js\";\nimport { QueryToken, serializePathAndArgs } from \"./udf_path_utils.js\";\nimport { ReconnectMetadata, WebSocketManager } from \"./web_socket_manager.js\";\n\n/**\n * Options for {@link InternalConvexClient}.\n *\n * @public\n */\nexport interface ClientOptions {\n  /**\n   * Whether to prompt the user if they have unsaved changes pending\n   * when navigating away or closing a web page.\n   *\n   * This is only possible when the `window` object exists, i.e. in a browser.\n   *\n   * The default value is `true`.\n   */\n  unsavedChangesWarning?: boolean;\n  /**\n   * Specifies an alternate\n   * [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n   * constructor to use for client communication with the Convex cloud.\n   * The default behavior is to use `WebSocket` from the global environment.\n   */\n  webSocketConstructor?: typeof WebSocket;\n}\n\n/**\n * State describing the client's connection with the Convex backend.\n *\n * @public\n */\nexport type ConnectionState = {\n  hasInflightRequests: boolean;\n  isWebSocketConnected: boolean;\n};\n\n/**\n * An async function returning the JWT-encoded OpenID Connect Identity Token\n * if available.\n * See {@link ConvexReactClient.setAuth}.\n *\n * @public\n */\nexport type AuthTokenFetcher = () => Promise<string | null | undefined>;\n\nconst DEFAULT_OPTIONS = {\n  unsavedChangesWarning: true,\n};\n\n/**\n * Low-level client for directly integrating state management libraries\n * with Convex.\n *\n * Most developers should use higher level clients, like\n * the {@link ConvexHttpClient} or the React hook based {@link react.ConvexReactClient}.\n *\n * @public\n */\nexport class InternalConvexClient {\n  private readonly state: LocalSyncState;\n  private readonly requestManager: RequestManager;\n  private readonly actionManager: ActionManager;\n  private readonly webSocketManager: WebSocketManager;\n  private remoteQuerySet: RemoteQuerySet;\n  private readonly optimisticQueryResults: OptimisticQueryResults;\n  private readonly onTransition: (updatedQueries: QueryToken[]) => void;\n  private nextRequestId: RequestId;\n  private readonly sessionId: string;\n  private fetchToken: null | (() => Promise<string | null | undefined>) = null;\n\n  /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed.\n   * @param options - See {@link ClientOptions} for a full description.\n   */\n  constructor(\n    address: string,\n    onTransition: (updatedQueries: QueryToken[]) => void,\n    options?: ClientOptions\n  ) {\n    if (typeof address === \"object\") {\n      throw new Error(\n        \"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\"\n      );\n    }\n    options = { ...DEFAULT_OPTIONS, ...options };\n    let webSocketConstructor = options.webSocketConstructor;\n    if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n      throw new Error(\n        \"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\"\n      );\n    }\n    webSocketConstructor = webSocketConstructor || WebSocket;\n\n    // Substitute http(s) with ws(s)\n    const i = address.search(\"://\");\n    if (i === -1) {\n      throw new Error(\"Provided address was not an absolute URL.\");\n    }\n    const origin = address.substring(i + 3); // move past the double slash\n    const protocol = address.substring(0, i);\n    let wsProtocol;\n    if (protocol === \"http\") {\n      wsProtocol = \"ws\";\n    } else if (protocol === \"https\") {\n      wsProtocol = \"wss\";\n    } else {\n      throw new Error(`Unknown parent protocol ${protocol}`);\n    }\n    const wsUri = `${wsProtocol}://${origin}/api/${version}/sync`;\n\n    this.state = new LocalSyncState();\n    this.remoteQuerySet = new RemoteQuerySet(queryId =>\n      this.state.queryPath(queryId)\n    );\n    this.requestManager = new RequestManager();\n    this.actionManager = new ActionManager();\n    this.optimisticQueryResults = new OptimisticQueryResults();\n    this.onTransition = onTransition;\n    this.nextRequestId = 0;\n    this.sessionId = uuidv4();\n\n    const { unsavedChangesWarning } = options;\n    if (typeof window === \"undefined\" && unsavedChangesWarning) {\n      throw new Error(\n        \"unsavedChangesWarning enabled, but no window object found! Navigating away from the page could cause in-flight mutations to be dropped. Pass {unsavedChangesWarning: false} in Convex client options to disable this feature.\"\n      );\n    }\n\n    // Listen for tab close events and notify the user on unsaved changes.\n    unsavedChangesWarning &&\n      window.addEventListener(\"beforeunload\", e => {\n        if (\n          this.requestManager.hasIncompleteRequests() ||\n          this.actionManager.hasInflightActions()\n        ) {\n          // There are 3 different ways to trigger this pop up so just try all of\n          // them.\n\n          e.preventDefault();\n          // This confirmation message doesn't actually appear in most modern\n          // browsers but we tried.\n          const confirmationMessage =\n            \"Are you sure you want to leave? Your changes may not be saved.\";\n          (e || window.event).returnValue = confirmationMessage;\n          return confirmationMessage;\n        }\n      });\n\n    this.webSocketManager = new WebSocketManager(\n      wsUri,\n      (reconnectMetadata: ReconnectMetadata) => {\n        // We have a new WebSocket!\n\n        this.webSocketManager.sendMessage({\n          ...reconnectMetadata,\n          type: \"Connect\",\n          sessionId: this.sessionId,\n        });\n\n        // Throw out our remote query, reissue queries\n        // and outstanding mutations, and reauthenticate.\n        this.remoteQuerySet = new RemoteQuerySet(queryId =>\n          this.state.queryPath(queryId)\n        );\n        const [querySetModification, authModification] = this.state.restart();\n        if (authModification) {\n          this.webSocketManager.sendMessage(authModification);\n        }\n        this.webSocketManager.sendMessage(querySetModification);\n        this.actionManager.restart();\n        for (const message of this.requestManager.restart()) {\n          this.webSocketManager.sendMessage(message);\n        }\n      },\n      (serverMessage: ServerMessage) => {\n        switch (serverMessage.type) {\n          case \"Transition\": {\n            this.remoteQuerySet.transition(serverMessage);\n            this.state.saveQueryJournals(serverMessage);\n            // No optimistic updates for workflows.\n            const completedMutations = this.requestManager.removeCompleted(\n              this.remoteQuerySet.timestamp()\n            );\n            this.notifyOnQueryResultChanges(completedMutations);\n            break;\n          }\n          case \"MutationResponse\": {\n            const completedMutationId =\n              this.requestManager.onResponse(serverMessage);\n            if (completedMutationId) {\n              this.notifyOnQueryResultChanges(new Set([completedMutationId]));\n            }\n            break;\n          }\n          case \"ActionResponse\": {\n            this.actionManager.onResponse(serverMessage);\n            break;\n          }\n          case \"AuthError\": {\n            this.tryToReauthenticate(serverMessage)\n              .then()\n              .catch(error => {\n                logFatalError(error);\n                // TODO(CX-3070): This ignores a failed Promise\n                void this.webSocketManager.stop();\n              });\n            break;\n          }\n          case \"FatalError\": {\n            const error = logFatalError(serverMessage.error);\n            void this.webSocketManager.stop();\n            throw error;\n          }\n          case \"Ping\":\n            break; // do nothing\n          default: {\n            const _typeCheck: never = serverMessage;\n          }\n        }\n      },\n      webSocketConstructor\n    );\n  }\n\n  /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */\n  private notifyOnQueryResultChanges(completedMutations: Set<RequestId>) {\n    const remoteQueryResults: Map<QueryId, QueryResult> =\n      this.remoteQuerySet.remoteQueryResults();\n    const queryTokenToValue: QueryResultsMap = new Map();\n    for (const [queryId, result] of remoteQueryResults) {\n      const queryToken = this.state.queryToken(queryId);\n      // It's possible that we've already unsubscribed to this query but\n      // the server hasn't learned about that yet. If so, ignore this one.\n\n      if (queryToken !== null) {\n        const query = {\n          result,\n          udfPath: this.state.queryPath(queryId)!,\n          args: this.state.queryArgs(queryId)!,\n        };\n        queryTokenToValue.set(queryToken, query);\n      }\n    }\n\n    this.onTransition(\n      this.optimisticQueryResults.ingestQueryResultsFromServer(\n        queryTokenToValue,\n        completedMutations\n      )\n    );\n  }\n\n  async setAuth(fetchToken: AuthTokenFetcher) {\n    this.fetchToken = fetchToken;\n    const token = await fetchToken();\n    if (token) {\n      this.authenticate(token);\n    } else if (this.state.hasAuth()) {\n      this.clearAuth();\n    }\n  }\n\n  // Stop the webSocket so that we don't retry with bad auth\n  private async tryToReauthenticate(serverMessage: AuthError) {\n    if (!this.fetchToken) {\n      throw new Error(serverMessage.error);\n    }\n    console.log(\"Attempting to reauthenticate\");\n    await this.webSocketManager.pause();\n    const token = await this.fetchToken();\n    if (token && this.state.isNewAuth(token)) {\n      this.state.setAuth(token);\n    } else if (this.state.hasAuth()) {\n      console.log(\"Reauthentication failed, clearing auth\");\n      this.state.clearAuth();\n    }\n    await this.webSocketManager.resume();\n  }\n\n  private authenticate(token: string) {\n    const message = this.state.setAuth(token);\n    this.webSocketManager.sendMessage(message);\n  }\n\n  /** @internal */\n  setAdminAuth(value: string) {\n    const message = this.state.setAdminAuth(value);\n    this.webSocketManager.sendMessage(message);\n  }\n\n  clearAuth() {\n    const message = this.state.clearAuth();\n    this.webSocketManager.sendMessage(message);\n  }\n\n  /**\n   * Subscribe to a query function.\n   *\n   * Whenever this query's result changes, the `onTransition` callback\n   * passed into the constructor will be called.\n   *\n   * @param name - The name of the query.\n   * @param args - An array of the arguments to the query.\n   * @param journal - An (optional) journal produced from a previous\n   * execution of this query function. Note that if this query function with\n   * these arguments has already been requested the journal will have no effect.\n   * @returns An object containing a {@link QueryToken} corresponding to this\n   * query and an `unsubscribe` callback.\n   */\n  subscribe(\n    name: string,\n    args: any[],\n    journal?: QueryJournal\n  ): { queryToken: QueryToken; unsubscribe: () => void } {\n    // `subscribe` used to collect the arguments with a rest operator\n    // (like `...args`). Double check that it's an array to make sure developers\n    // have updated their code.\n    if (!Array.isArray(args)) {\n      throw new Error(\n        `Query arguments to \\`InternalConvexClient.subcribe\\` must be an array. Received ${args}.`\n      );\n    }\n\n    const { modification, queryToken, unsubscribe } = this.state.subscribe(\n      name,\n      args,\n      journal\n    );\n    if (modification !== null) {\n      this.webSocketManager.sendMessage(modification);\n    }\n    // TODO: Use FinalizationRegistry?\n    return {\n      queryToken,\n      unsubscribe: () => {\n        const modification = unsubscribe();\n        if (modification) {\n          this.webSocketManager.sendMessage(modification);\n        }\n      },\n    };\n  }\n\n  /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   */\n  localQueryResult(udfPath: string, args: any[]): Value | undefined {\n    const queryToken = serializePathAndArgs(udfPath, args);\n    return this.optimisticQueryResults.queryResult(queryToken);\n  }\n\n  /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - An array of arguments to this query.\n   * @returns The query's {@link QueryJournal} or `undefined`.\n   */\n  queryJournal(name: string, args: any[]): QueryJournal | undefined {\n    const queryToken = serializePathAndArgs(name, args);\n    return this.state.queryJournal(queryToken);\n  }\n\n  /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */\n  connectionState(): ConnectionState {\n    return {\n      hasInflightRequests:\n        this.requestManager.hasInflightRequests() ||\n        this.actionManager.hasInflightActions(),\n      isWebSocketConnected: this.webSocketManager.socketState() === \"ready\",\n    };\n  }\n\n  async mutate<Args extends any[]>(\n    udfPath: string,\n    args: Args,\n    optimisticUpdate: OptimisticUpdate<GenericAPI, Args> | null = null\n  ): Promise<any> {\n    const requestId = this.nextRequestId;\n    this.nextRequestId++;\n\n    if (optimisticUpdate !== null) {\n      const wrappedUpdate = (localQueryStore: OptimisticLocalStore) => {\n        optimisticUpdate(localQueryStore, ...args);\n      };\n      const changedQueries = this.optimisticQueryResults.applyOptimisticUpdate(\n        wrappedUpdate,\n        requestId\n      );\n      this.onTransition(changedQueries);\n    }\n\n    const message: MutationRequest = {\n      type: \"Mutation\",\n      requestId,\n      udfPath,\n      args: convexToJson(args) as JSONValue[],\n    };\n    const result = this.requestManager.request(message);\n    this.webSocketManager.sendMessage(message);\n    return result;\n  }\n\n  async action<Args extends any[]>(udfPath: string, args: Args): Promise<any> {\n    const requestId = this.nextRequestId;\n    this.nextRequestId++;\n\n    const message: ActionRequest = {\n      type: \"Action\",\n      requestId,\n      udfPath,\n      args: convexToJson(args) as JSONValue[],\n    };\n\n    const result = this.actionManager.request(message);\n    this.webSocketManager.sendMessage(message);\n    return result;\n  }\n\n  async close(): Promise<void> {\n    return this.webSocketManager.stop();\n  }\n}\n"],
  "mappings": "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",
  "names": ["modification"]
}
