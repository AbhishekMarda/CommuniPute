import { Value } from "../../values/index.js";
import { OptimisticLocalStore } from "./optimistic_updates.js";
import { RequestId } from "./protocol.js";
import { QueryResult } from "./remote_query_set.js";
import { QueryToken } from "./udf_path_utils.js";
/**
 * An optimistic update function that has been curried over its arguments.
 */
declare type WrappedOptimisticUpdate = (locaQueryStore: OptimisticLocalStore) => void;
declare type Query = {
    result: QueryResult | undefined;
    udfPath: string;
    args: Value[];
};
export declare type QueryResultsMap = Map<QueryToken, Query>;
declare type ChangedQueries = QueryToken[];
/**
 * A view of all of our query results with optimistic updates applied on top.
 */
export declare class OptimisticQueryResults {
    private queryResults;
    private optimisticUpdates;
    constructor();
    ingestQueryResultsFromServer(serverQueryResults: QueryResultsMap, optimisticUpdatesToDrop: Set<RequestId>): ChangedQueries;
    applyOptimisticUpdate(update: WrappedOptimisticUpdate, mutationId: RequestId): ChangedQueries;
    queryResult(queryToken: QueryToken): Value | undefined;
}
export {};
//# sourceMappingURL=optimistic_updates_impl.d.ts.map