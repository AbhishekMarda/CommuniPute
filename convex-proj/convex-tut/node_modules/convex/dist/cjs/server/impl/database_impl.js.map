{
  "version": 3,
  "sources": ["../../../../src/server/impl/database_impl.ts"],
  "sourcesContent": ["import {\n  convexToJson,\n  GenericId,\n  jsonToConvex,\n  Value,\n} from \"../../values/index.js\";\nimport { performAsyncSyscall } from \"./syscall.js\";\nimport { DatabaseReader, DatabaseWriter } from \"../database.js\";\nimport { QueryInitializerImpl } from \"./query_impl.js\";\nimport { GenericDataModel, GenericDocument } from \"../data_model.js\";\nimport { validateArg } from \"./validate.js\";\n\nexport function setupReader(): DatabaseReader<GenericDataModel> {\n  return {\n    get: async (id: GenericId<string>) => {\n      const args = { id: convexToJson(id) };\n      const syscallJSON = await performAsyncSyscall(\"get\", args);\n      return jsonToConvex(syscallJSON) as GenericDocument;\n    },\n    query: (tableName: string) => new QueryInitializerImpl(tableName),\n  };\n}\n\nexport function setupWriter(): DatabaseWriter<GenericDataModel> {\n  const reader = setupReader();\n  return {\n    get: reader.get,\n    query: reader.query,\n\n    insert: async (table, value) => {\n      validateArg(table, 1, \"insert\", \"table\");\n      validateArg(value, 2, \"insert\", \"value\");\n      const syscallJSON = await performAsyncSyscall(\"insert\", {\n        table,\n        value: convexToJson(value),\n      });\n      const syscallResult = jsonToConvex(syscallJSON) as any;\n      return syscallResult._id;\n    },\n    patch: async (id, value) => {\n      validateArg(id, 1, \"patch\", \"id\");\n      validateArg(value, 2, \"patch\", \"value\");\n      await performAsyncSyscall(\"update\", {\n        id: convexToJson(id),\n        value: convexToJson(value as Value),\n      });\n    },\n    replace: async (id, value) => {\n      validateArg(id, 1, \"replace\", \"id\");\n      validateArg(value, 2, \"replace\", \"value\");\n      await performAsyncSyscall(\"replace\", {\n        id: convexToJson(id),\n        value: convexToJson(value),\n      });\n    },\n    delete: async id => {\n      validateArg(id, 1, \"delete\", \"id\");\n      await performAsyncSyscall(\"remove\", { id: convexToJson(id) });\n    },\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKO;AACP,qBAAoC;AAEpC,wBAAqC;AAErC,sBAA4B;AAErB,SAAS,cAAgD;AAC9D,SAAO;AAAA,IACL,KAAK,OAAO,OAA0B;AACpC,YAAM,OAAO,EAAE,QAAI,4BAAa,EAAE,EAAE;AACpC,YAAM,cAAc,UAAM,oCAAoB,OAAO,IAAI;AACzD,iBAAO,4BAAa,WAAW;AAAA,IACjC;AAAA,IACA,OAAO,CAAC,cAAsB,IAAI,uCAAqB,SAAS;AAAA,EAClE;AACF;AAEO,SAAS,cAAgD;AAC9D,QAAM,SAAS,YAAY;AAC3B,SAAO;AAAA,IACL,KAAK,OAAO;AAAA,IACZ,OAAO,OAAO;AAAA,IAEd,QAAQ,OAAO,OAAO,UAAU;AAC9B,uCAAY,OAAO,GAAG,UAAU,OAAO;AACvC,uCAAY,OAAO,GAAG,UAAU,OAAO;AACvC,YAAM,cAAc,UAAM,oCAAoB,UAAU;AAAA,QACtD;AAAA,QACA,WAAO,4BAAa,KAAK;AAAA,MAC3B,CAAC;AACD,YAAM,oBAAgB,4BAAa,WAAW;AAC9C,aAAO,cAAc;AAAA,IACvB;AAAA,IACA,OAAO,OAAO,IAAI,UAAU;AAC1B,uCAAY,IAAI,GAAG,SAAS,IAAI;AAChC,uCAAY,OAAO,GAAG,SAAS,OAAO;AACtC,gBAAM,oCAAoB,UAAU;AAAA,QAClC,QAAI,4BAAa,EAAE;AAAA,QACnB,WAAO,4BAAa,KAAc;AAAA,MACpC,CAAC;AAAA,IACH;AAAA,IACA,SAAS,OAAO,IAAI,UAAU;AAC5B,uCAAY,IAAI,GAAG,WAAW,IAAI;AAClC,uCAAY,OAAO,GAAG,WAAW,OAAO;AACxC,gBAAM,oCAAoB,WAAW;AAAA,QACnC,QAAI,4BAAa,EAAE;AAAA,QACnB,WAAO,4BAAa,KAAK;AAAA,MAC3B,CAAC;AAAA,IACH;AAAA,IACA,QAAQ,OAAM,OAAM;AAClB,uCAAY,IAAI,GAAG,UAAU,IAAI;AACjC,gBAAM,oCAAoB,UAAU,EAAE,QAAI,4BAAa,EAAE,EAAE,CAAC;AAAA,IAC9D;AAAA,EACF;AACF;",
  "names": []
}
