{
  "version": 3,
  "sources": ["../../../src/react-auth0/ConvexProviderWithAuth0.tsx"],
  "sourcesContent": ["import { Auth0Provider, useAuth0 } from \"@auth0/auth0-react\";\n\nimport React, { useEffect, useState, ReactNode, ReactElement } from \"react\";\nimport { AuthTokenFetcher, ConvexProvider } from \"../react/index.js\";\n\n// Duplicate type from CLI, which doesn't export types for users.\n// Careful if removing, if this entry point exports no interfaces or classes\n// doc generation works differently: the sidebar label cannot be overriden.\n/**\n * Type representing authentication configuration, from the authInfo array\n * of a convex.json config file.\n *\n * @public\n */\nexport interface AuthInfo {\n  domain: string;\n  applicationID: string;\n}\n\n// Until we can import from our own entry points (requires TypeScript 4.7),\n// just describe the interface enough to help users pass the right type.\ntype IConvexReactClient = {\n  setAuth(fetchToken: AuthTokenFetcher): Promise<void>;\n  clearAuth(): void;\n};\n\n/**\n * A wrapper React component which provides a {@link react.ConvexReactClient}\n * authenticated with Auth0.\n *\n * Using this component requires\n * 1. Installing the Auth0 React SDK with `npm install @auth0/auth0-react`\n * 2. [Setting up an Auth0 app](https://docs.convex.dev/using/auth#auth0), and\n * 3. [Registering that app](https://docs.convex.dev/using/auth#configuring-convex) with `npx convex auth add`.\n *\n *\n * ```tsx\n * function AppWrapper() {\n *   return (\n *     <ConvexProviderWithAuth0 client={convex} authInfo={authInfo}>\n *       <App/>\n *     </ConvexProviderWithAuth0>\n *   );\n * }\n * ```\n *\n * Using this component instead of {@link react.ConvexProvider}\n * makes the [useAuth0](https://auth0.com/docs/libraries/auth0-react)\n * hook available.\n *\n * If a user is not logged in, this component renders the loading prop\n * with a fallback of a simple \"Log in\" button if that prop is not passed in.\n * To write your own login component, use the\n * `loginWithRedirect` property of the return value of `useAuth0()`\n * in the click handler of your login button.\n *\n * ```tsx\n * function YourLoggedOutComponent() {\n *   const { loginWithRedirect } = useAuth0();\n *   return (\n *     <div>\n *       <h1>Please log in :)</h1>\n *       <button onClick={loginWithRedirect}>Log in</button>\n *     </div>\n *   );\n * }\n *\n * <ConvexProviderWithAuth0\n *   client={convex}\n *   authInfo={authInfo}\n *   loggedOut={<YourLoggedOutComponent/>}\n * >\n *   <App/>\n * </ConvexProviderWithAuth0>\n * ```\n *\n * @public\n */\nexport const ConvexProviderWithAuth0: React.FC<{\n  children: ReactNode;\n  client: IConvexReactClient;\n  authInfo: AuthInfo;\n  loading?: ReactElement;\n  loggedOut?: ReactElement;\n}> = ({ children, client, authInfo, loading, loggedOut }) => {\n  if (!authInfo) {\n    throw new Error(\n      \"ConvexProviderWithAuth0 component requires authInfo. \" +\n        \"Run `npx convex auth add` to register your auth provider \" +\n        \"and pass config.authInfo[0] as the authInfo prop.\"\n    );\n  }\n  let domain = authInfo.domain;\n  if (domain.startsWith(\"https://\")) {\n    domain = domain.slice(8);\n  }\n  if (domain.endsWith(\"/\")) {\n    domain = domain.slice(0, -1);\n  }\n\n  return React.createElement(\n    Auth0Provider,\n    {\n      domain: domain,\n      clientId: authInfo.applicationID,\n      redirectUri:\n        typeof window === \"undefined\" ? undefined : window.location.origin,\n      // allows auth0 to cache the authentication state locally\n      cacheLocation: \"localstorage\",\n    },\n    React.createElement(\n      ConvexProviderUsingAuth0,\n      {\n        client,\n        loading,\n        loggedOut,\n      },\n      children\n    )\n  );\n};\n\nfunction ConvexProviderUsingAuth0({\n  children,\n  client,\n  loading,\n  loggedOut,\n}: {\n  children?: React.ReactNode;\n  client: IConvexReactClient;\n  loading?: ReactElement;\n  loggedOut?: ReactElement;\n}) {\n  const {\n    isAuthenticated,\n    isLoading,\n    getAccessTokenSilently,\n    loginWithRedirect,\n  } = useAuth0();\n  const [clientAuthSynced, setClientAuthSynced] = useState(false);\n\n  // default logged out and loading views\n  loggedOut =\n    loggedOut ||\n    React.createElement(\"button\", { onClick: loginWithRedirect }, \"Log in\");\n  loading = loading || React.createElement(React.Fragment, null, null);\n\n  useEffect(() => {\n    async function setToken() {\n      await client.setAuth(async () => {\n        try {\n          const response = await getAccessTokenSilently({\n            detailedResponse: true,\n          });\n          return response.id_token as string;\n        } catch (_error) {\n          return null;\n        }\n      });\n      setClientAuthSynced(true);\n    }\n\n    if (isAuthenticated) {\n      // TODO(CX-3070): This ignores a failed Promise\n      void setToken();\n      return () => client.clearAuth();\n    }\n  }, [isAuthenticated, getAccessTokenSilently, isLoading, client]);\n\n  if (isLoading || (isAuthenticated && !clientAuthSynced)) {\n    // Do not add ConvexProvider for loading state because\n    // convex and auth0 hooks can be mutually inconsistent\n    return loading;\n  } else if (!isAuthenticated) {\n    return React.createElement(\n      ConvexProvider,\n      { client: client as any },\n      loggedOut\n    );\n  }\n  return React.createElement(\n    ConvexProvider,\n    { client: client as any },\n    children\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAwC;AAExC,mBAAoE;AACpE,IAAAA,gBAAiD;AA2E1C,MAAM,0BAMR,CAAC,EAAE,UAAU,QAAQ,UAAU,SAAS,UAAU,MAAM;AAC3D,MAAI,CAAC,UAAU;AACb,UAAM,IAAI;AAAA,MACR;AAAA,IAGF;AAAA,EACF;AACA,MAAI,SAAS,SAAS;AACtB,MAAI,OAAO,WAAW,UAAU,GAAG;AACjC,aAAS,OAAO,MAAM,CAAC;AAAA,EACzB;AACA,MAAI,OAAO,SAAS,GAAG,GAAG;AACxB,aAAS,OAAO,MAAM,GAAG,EAAE;AAAA,EAC7B;AAEA,SAAO,aAAAC,QAAM;AAAA,IACX;AAAA,IACA;AAAA,MACE;AAAA,MACA,UAAU,SAAS;AAAA,MACnB,aACE,OAAO,WAAW,cAAc,SAAY,OAAO,SAAS;AAAA,MAE9D,eAAe;AAAA,IACjB;AAAA,IACA,aAAAA,QAAM;AAAA,MACJ;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAS,yBAAyB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,QAAI,6BAAS;AACb,QAAM,CAAC,kBAAkB,mBAAmB,QAAI,uBAAS,KAAK;AAG9D,cACE,aACA,aAAAA,QAAM,cAAc,UAAU,EAAE,SAAS,kBAAkB,GAAG,QAAQ;AACxE,YAAU,WAAW,aAAAA,QAAM,cAAc,aAAAA,QAAM,UAAU,MAAM,IAAI;AAEnE,8BAAU,MAAM;AACd,mBAAe,WAAW;AACxB,YAAM,OAAO,QAAQ,YAAY;AAC/B,YAAI;AACF,gBAAM,WAAW,MAAM,uBAAuB;AAAA,YAC5C,kBAAkB;AAAA,UACpB,CAAC;AACD,iBAAO,SAAS;AAAA,QAClB,SAAS,QAAP;AACA,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AACD,0BAAoB,IAAI;AAAA,IAC1B;AAEA,QAAI,iBAAiB;AAEnB,WAAK,SAAS;AACd,aAAO,MAAM,OAAO,UAAU;AAAA,IAChC;AAAA,EACF,GAAG,CAAC,iBAAiB,wBAAwB,WAAW,MAAM,CAAC;AAE/D,MAAI,aAAc,mBAAmB,CAAC,kBAAmB;AAGvD,WAAO;AAAA,EACT,WAAW,CAAC,iBAAiB;AAC3B,WAAO,aAAAA,QAAM;AAAA,MACX;AAAA,MACA,EAAE,OAAsB;AAAA,MACxB;AAAA,IACF;AAAA,EACF;AACA,SAAO,aAAAA,QAAM;AAAA,IACX;AAAA,IACA,EAAE,OAAsB;AAAA,IACxB;AAAA,EACF;AACF;",
  "names": ["import_react", "React"]
}
