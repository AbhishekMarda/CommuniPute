{
  "version": 3,
  "sources": ["../../../src/cli/index.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n/* eslint-disable no-restricted-syntax */\nimport { Command } from \"commander\";\nimport { init } from \"./init.js\";\nimport { dashboard } from \"./dashboard.js\";\nimport { deployments } from \"./deployments.js\";\nimport { docs } from \"./docs.js\";\nimport { version } from \"../index.js\";\nimport { auth } from \"./auth.js\";\nimport { codegen } from \"./codegen.js\";\nimport { reinit } from \"./reinit.js\";\nimport { update } from \"./update.js\";\nimport { typecheck } from \"./typecheck.js\";\nimport { login } from \"./login.js\";\nimport chalk from \"chalk\";\nimport * as Sentry from \"@sentry/node\";\nimport \"@sentry/tracing\";\nimport stripAnsi from \"strip-ansi\";\nimport { productionProvisionHost, provisionHost } from \"./lib/config.js\";\nimport { convexImport } from \"./convexImport.js\";\nimport { dev } from \"./dev.js\";\nimport { deploy } from \"./deploy.js\";\n\nconst MINIMUM_MAJOR_VERSION = 14;\n\nasync function main() {\n  // If you want to use `@sentry/tracing` in your project directly, use a named import instead:\n  // import * as SentryTracing from \"@sentry/tracing\"\n  // Unused named imports are not guaranteed to patch the global hub.\n\n  if (!process.env.CI && provisionHost === productionProvisionHost) {\n    Sentry.init({\n      dsn: \"https://f9fa0306e3d540079cf40ce8c2ad9644@o1192621.ingest.sentry.io/6390839\",\n      release: \"cli@\" + version,\n      tracesSampleRate: 0.2,\n      beforeBreadcrumb: breadcrumb => {\n        // Strip ANSI color codes from log lines that are sent as breadcrumbs.\n        if (breadcrumb.message) {\n          breadcrumb.message = stripAnsi(breadcrumb.message);\n        }\n        return breadcrumb;\n      },\n    });\n  }\n\n  const nodeVersion = process.versions.node;\n  const majorVersion = parseInt(nodeVersion.split(\".\")[0], 10);\n  if (majorVersion < MINIMUM_MAJOR_VERSION) {\n    console.log(\n      chalk.red(\n        `Your Node version ${nodeVersion} is too old. Convex requires at least Node v${MINIMUM_MAJOR_VERSION}.`\n      )\n    );\n    console.log(\n      chalk.gray(\n        `You can use ${chalk.bold(\n          \"nvm\"\n        )} (https://github.com/nvm-sh/nvm#installing-and-updating) to manage different versions of Node.`\n      )\n    );\n    console.log(\n      chalk.gray(\n        \"After installing `nvm`, install the latest version of Node with \" +\n          chalk.bold(\"`nvm install node`.\")\n      )\n    );\n    console.log(\n      chalk.gray(\n        \"Then, activate the installed version in your terminal with \" +\n          chalk.bold(\"`nvm use`.\")\n      )\n    );\n    process.exit(1);\n  }\n\n  if (process.platform === \"win32\") {\n    console.log(\n      chalk.yellow(\n        \"Convex has preliminary support for development on Windows. Some functionality may be missing or broken. Please report issues at https://convex.dev/community. Read the docs for more information: https://docs.convex.dev/understanding/state#windows-development.\"\n      )\n    );\n  }\n\n  const program = new Command();\n  program.name(\"convex\");\n  program.description(\"The Convex project management CLI\");\n  program.usage(\"command [options]\");\n  program.addCommand(login);\n  program.addCommand(init);\n  program.addCommand(reinit);\n  program.addCommand(dev);\n  program.addCommand(deploy);\n  program.addCommand(deployments, { noHelp: true });\n  program.addCommand(codegen);\n  program.addCommand(typecheck);\n  program.addCommand(auth);\n  program.addCommand(dashboard);\n  program.addCommand(docs);\n  program.addCommand(convexImport);\n  program.addCommand(update);\n  program.version(version);\n\n  // Run the command and be sure to flush Sentry before exiting.\n  try {\n    await program.parseAsync(process.argv);\n  } catch (e) {\n    Sentry.captureException(e);\n    process.exitCode = 1;\n    throw e;\n  } finally {\n    await Sentry.close();\n  }\n  process.exit();\n}\nvoid main();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAEA,uBAAwB;AACxB,kBAAqB;AACrB,uBAA0B;AAC1B,yBAA4B;AAC5B,kBAAqB;AACrB,eAAwB;AACxB,kBAAqB;AACrB,qBAAwB;AACxB,oBAAuB;AACvB,oBAAuB;AACvB,uBAA0B;AAC1B,mBAAsB;AACtB,mBAAkB;AAClB,aAAwB;AACxB,qBAAO;AACP,wBAAsB;AACtB,oBAAuD;AACvD,0BAA6B;AAC7B,iBAAoB;AACpB,oBAAuB;AAEvB,MAAM,wBAAwB;AAE9B,eAAe,OAAO;AAKpB,MAAI,CAAC,QAAQ,IAAI,MAAM,gCAAkB,uCAAyB;AAChE,WAAO,KAAK;AAAA,MACV,KAAK;AAAA,MACL,SAAS,SAAS;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB,gBAAc;AAE9B,YAAI,WAAW,SAAS;AACtB,qBAAW,cAAU,kBAAAA,SAAU,WAAW,OAAO;AAAA,QACnD;AACA,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,cAAc,QAAQ,SAAS;AACrC,QAAM,eAAe,SAAS,YAAY,MAAM,GAAG,EAAE,IAAI,EAAE;AAC3D,MAAI,eAAe,uBAAuB;AACxC,YAAQ;AAAA,MACN,aAAAC,QAAM;AAAA,QACJ,qBAAqB,0DAA0D;AAAA,MACjF;AAAA,IACF;AACA,YAAQ;AAAA,MACN,aAAAA,QAAM;AAAA,QACJ,eAAe,aAAAA,QAAM;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,YAAQ;AAAA,MACN,aAAAA,QAAM;AAAA,QACJ,qEACE,aAAAA,QAAM,KAAK,qBAAqB;AAAA,MACpC;AAAA,IACF;AACA,YAAQ;AAAA,MACN,aAAAA,QAAM;AAAA,QACJ,gEACE,aAAAA,QAAM,KAAK,YAAY;AAAA,MAC3B;AAAA,IACF;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,MAAI,QAAQ,aAAa,SAAS;AAChC,YAAQ;AAAA,MACN,aAAAA,QAAM;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,QAAM,UAAU,IAAI,yBAAQ;AAC5B,UAAQ,KAAK,QAAQ;AACrB,UAAQ,YAAY,mCAAmC;AACvD,UAAQ,MAAM,mBAAmB;AACjC,UAAQ,WAAW,kBAAK;AACxB,UAAQ,WAAW,gBAAI;AACvB,UAAQ,WAAW,oBAAM;AACzB,UAAQ,WAAW,cAAG;AACtB,UAAQ,WAAW,oBAAM;AACzB,UAAQ,WAAW,gCAAa,EAAE,QAAQ,KAAK,CAAC;AAChD,UAAQ,WAAW,sBAAO;AAC1B,UAAQ,WAAW,0BAAS;AAC5B,UAAQ,WAAW,gBAAI;AACvB,UAAQ,WAAW,0BAAS;AAC5B,UAAQ,WAAW,gBAAI;AACvB,UAAQ,WAAW,gCAAY;AAC/B,UAAQ,WAAW,oBAAM;AACzB,UAAQ,QAAQ,gBAAO;AAGvB,MAAI;AACF,UAAM,QAAQ,WAAW,QAAQ,IAAI;AAAA,EACvC,SAAS,GAAP;AACA,WAAO,iBAAiB,CAAC;AACzB,YAAQ,WAAW;AACnB,UAAM;AAAA,EACR,UAAE;AACA,UAAM,OAAO,MAAM;AAAA,EACrB;AACA,UAAQ,KAAK;AACf;AACA,KAAK,KAAK;",
  "names": ["stripAnsi", "chalk"]
}
