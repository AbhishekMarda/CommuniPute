{
  "version": 3,
  "sources": ["../../../../src/cli/lib/push.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport {\n  pullConfig,\n  pushConfig,\n  diffConfig,\n  readProjectConfig,\n  configJSON,\n  configFromProjectConfig,\n} from \"./config.js\";\nimport { functionsDir, ensureHasConvexDependency } from \"./utils.js\";\nimport { processTypeCheckResult, typeCheckFunctions } from \"./typecheck.js\";\nimport { doCodegen } from \"./codegen\";\nimport { buildIndexes } from \"./indexes.js\";\nimport { Context } from \"./context.js\";\n\nexport type PushOptions = {\n  adminKey: string;\n  verbose: boolean;\n  dryRun: boolean;\n  typecheck: \"enable\" | \"try\" | \"disable\";\n  debug: boolean;\n  debugBundlePath?: string;\n  codegen: boolean;\n  url: string;\n};\n\nexport async function runPush(ctx: Context, options: PushOptions) {\n  const { configPath, projectConfig } = await readProjectConfig(ctx);\n  const origin = options.url;\n  const verbose = options.verbose || options.dryRun;\n  await ensureHasConvexDependency(ctx, \"push\");\n\n  if (!options.codegen) {\n    console.error(\n      chalk.gray(\"Skipping codegen. Remove --codegen=disable to enable.\")\n    );\n    // Codegen includes typechecking, so if we're skipping it, run the type\n    // check manually on the query and mutation functions\n    const funcDir = functionsDir(configPath, projectConfig);\n    await processTypeCheckResult(ctx, options.typecheck, () =>\n      typeCheckFunctions(ctx, funcDir)\n    );\n  } else {\n    await doCodegen({\n      ctx,\n      projectConfig,\n      configPath,\n      typeCheckMode: options.typecheck,\n      dryRun: options.dryRun,\n      debug: options.debug,\n      quiet: true,\n    });\n    if (verbose) {\n      console.error(chalk.green(\"Codegen finished.\"));\n    }\n  }\n\n  const localConfig = await configFromProjectConfig(\n    ctx,\n    projectConfig,\n    configPath,\n    verbose\n  );\n\n  if (options.debugBundlePath) {\n    const config = configJSON(localConfig, options.adminKey);\n    ctx.fs.writeUtf8File(options.debugBundlePath, JSON.stringify(config));\n    return;\n  }\n\n  await buildIndexes(\n    ctx,\n    origin,\n    options.adminKey,\n    functionsDir(configPath, localConfig.projectConfig),\n    options.dryRun\n  );\n\n  const remoteConfig = await pullConfig(\n    ctx,\n    localConfig.projectConfig.project,\n    localConfig.projectConfig.team,\n    origin,\n    options.adminKey\n  );\n\n  const diff = diffConfig(remoteConfig, localConfig);\n  if (diff === \"\") {\n    if (verbose) {\n      const msg =\n        localConfig.modules.length === 0\n          ? `No functions found in ${localConfig.projectConfig.functions}`\n          : \"Config already synced\";\n      console.log(\n        chalk.gray(\n          `${\n            options.dryRun\n              ? \"Command would skip function push\"\n              : \"Function push skipped\"\n          }: ${msg}.`\n        )\n      );\n    }\n    return;\n  }\n\n  if (verbose) {\n    console.log(\n      chalk.bold(\n        `Remote config ${\n          options.dryRun ? \"would\" : \"will\"\n        } be overwritten with the following changes:`\n      )\n    );\n    console.log(diff);\n  }\n\n  if (options.dryRun) {\n    return;\n  }\n\n  await pushConfig(ctx, localConfig, options.adminKey, options.url);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,oBAOO;AACP,mBAAwD;AACxD,uBAA2D;AAC3D,qBAA0B;AAC1B,qBAA6B;AAc7B,eAAsB,QAAQ,KAAc,SAAsB;AAChE,QAAM,EAAE,YAAY,cAAc,IAAI,UAAM,iCAAkB,GAAG;AACjE,QAAM,SAAS,QAAQ;AACvB,QAAM,UAAU,QAAQ,WAAW,QAAQ;AAC3C,YAAM,wCAA0B,KAAK,MAAM;AAE3C,MAAI,CAAC,QAAQ,SAAS;AACpB,YAAQ;AAAA,MACN,aAAAA,QAAM,KAAK,uDAAuD;AAAA,IACpE;AAGA,UAAM,cAAU,2BAAa,YAAY,aAAa;AACtD,cAAM;AAAA,MAAuB;AAAA,MAAK,QAAQ;AAAA,MAAW,UACnD,qCAAmB,KAAK,OAAO;AAAA,IACjC;AAAA,EACF,OAAO;AACL,cAAM,0BAAU;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAe,QAAQ;AAAA,MACvB,QAAQ,QAAQ;AAAA,MAChB,OAAO,QAAQ;AAAA,MACf,OAAO;AAAA,IACT,CAAC;AACD,QAAI,SAAS;AACX,cAAQ,MAAM,aAAAA,QAAM,MAAM,mBAAmB,CAAC;AAAA,IAChD;AAAA,EACF;AAEA,QAAM,cAAc,UAAM;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI,QAAQ,iBAAiB;AAC3B,UAAM,aAAS,0BAAW,aAAa,QAAQ,QAAQ;AACvD,QAAI,GAAG,cAAc,QAAQ,iBAAiB,KAAK,UAAU,MAAM,CAAC;AACpE;AAAA,EACF;AAEA,YAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,QACR,2BAAa,YAAY,YAAY,aAAa;AAAA,IAClD,QAAQ;AAAA,EACV;AAEA,QAAM,eAAe,UAAM;AAAA,IACzB;AAAA,IACA,YAAY,cAAc;AAAA,IAC1B,YAAY,cAAc;AAAA,IAC1B;AAAA,IACA,QAAQ;AAAA,EACV;AAEA,QAAM,WAAO,0BAAW,cAAc,WAAW;AACjD,MAAI,SAAS,IAAI;AACf,QAAI,SAAS;AACX,YAAM,MACJ,YAAY,QAAQ,WAAW,IAC3B,yBAAyB,YAAY,cAAc,cACnD;AACN,cAAQ;AAAA,QACN,aAAAA,QAAM;AAAA,UACJ,GACE,QAAQ,SACJ,qCACA,4BACD;AAAA,QACP;AAAA,MACF;AAAA,IACF;AACA;AAAA,EACF;AAEA,MAAI,SAAS;AACX,YAAQ;AAAA,MACN,aAAAA,QAAM;AAAA,QACJ,iBACE,QAAQ,SAAS,UAAU;AAAA,MAE/B;AAAA,IACF;AACA,YAAQ,IAAI,IAAI;AAAA,EAClB;AAEA,MAAI,QAAQ,QAAQ;AAClB;AAAA,EACF;AAEA,YAAM,0BAAW,KAAK,aAAa,QAAQ,UAAU,QAAQ,GAAG;AAClE;",
  "names": ["chalk"]
}
