"use strict";
import { STATUS_CODE_UDF_FAILED } from "../common/index.js";
import { version } from "../index.js";
import { convexToJson, jsonToConvex } from "../values/index.js";
import { logToConsole } from "./logging.js";
const fetch = globalThis.fetch || ((...args) => import("node-fetch").then(
  ({ default: fetch2 }) => fetch2(...args)
));
export class ConvexHttpClient {
  constructor(address) {
    this.address = `${address}/api`;
    this.debug = true;
  }
  backendUrl() {
    return this.address;
  }
  setAuth(value) {
    this.auth = value;
  }
  clearAuth() {
    this.auth = void 0;
  }
  setDebug(debug) {
    this.debug = debug;
  }
  query(name) {
    return async (...args) => {
      const body = JSON.stringify({
        path: name,
        args: convexToJson(args),
        debug: this.debug
      });
      const headers = {
        "Content-Type": "application/json",
        "Convex-Client": `npm-${version}`
      };
      if (this.auth) {
        headers["Authorization"] = `Bearer ${this.auth}`;
      }
      const response = await fetch(`${this.address}/query`, {
        body,
        method: "POST",
        headers,
        credentials: "include"
      });
      if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {
        throw new Error(await response.text());
      }
      const respJSON = await response.json();
      for (const line of respJSON.logLines ?? []) {
        logToConsole("info", "query", name, line);
      }
      switch (respJSON.status) {
        case "success":
          return jsonToConvex(respJSON.value);
        case "error":
          throw new Error(respJSON.errorMessage);
        default:
          throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);
      }
    };
  }
  mutation(name) {
    return async (...args) => {
      const body = JSON.stringify({
        path: name,
        args: convexToJson(args),
        debug: this.debug
      });
      const headers = {
        "Content-Type": "application/json",
        "Convex-Client": `npm-${version}`
      };
      if (this.auth) {
        headers["Authorization"] = `Bearer ${this.auth}`;
      }
      const response = await fetch(`${this.address}/mutation`, {
        body,
        method: "POST",
        headers,
        credentials: "include"
      });
      if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {
        throw new Error(await response.text());
      }
      const respJSON = await response.json();
      for (const line of respJSON.logLines ?? []) {
        logToConsole("info", "mutation", name, line);
      }
      switch (respJSON.status) {
        case "success":
          return jsonToConvex(respJSON.value);
        case "error":
          throw new Error(respJSON.errorMessage);
        default:
          throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);
      }
    };
  }
  action(name) {
    return async (...args) => {
      const body = JSON.stringify({
        path: name,
        args: convexToJson(args),
        debug: this.debug
      });
      const headers = {
        "Content-Type": "application/json",
        "Convex-Client": `npm-${version}`
      };
      if (this.auth) {
        headers["Authorization"] = `Bearer ${this.auth}`;
      }
      const response = await fetch(`${this.address}/action`, {
        body,
        method: "POST",
        headers,
        credentials: "include"
      });
      if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {
        throw new Error(await response.text());
      }
      const respJSON = await response.json();
      for (const line of respJSON.logLines ?? []) {
        logToConsole("info", "action", name, line);
      }
      switch (respJSON.status) {
        case "success":
          return jsonToConvex(respJSON.value);
        case "error":
          throw new Error(respJSON.errorMessage);
        default:
          throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);
      }
    };
  }
}
//# sourceMappingURL=http_client.js.map
