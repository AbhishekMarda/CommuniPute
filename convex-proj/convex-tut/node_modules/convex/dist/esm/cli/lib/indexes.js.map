{
  "version": 3,
  "sources": ["../../../../src/cli/lib/indexes.ts"],
  "sourcesContent": ["import axios, { AxiosResponse } from \"axios\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport path from \"path\";\nimport { bundleSchema } from \"../../bundler/index.js\";\nimport { version } from \"../../index.js\";\nimport { Context } from \"./context.js\";\nimport { poll, fatalServerErr, deprecationCheckWarning } from \"./utils.js\";\n\ntype IndexMetadata = {\n  table: string;\n  name: string;\n  fields:\n    | string[]\n    | {\n        searchField: string;\n        filterFields: string[];\n      };\n  backfill: {\n    state: \"in_progress\" | \"done\";\n  };\n};\n\nfunction stringifyIndex(index: IndexMetadata) {\n  return `${index.table}.${index.name} ${JSON.stringify(index.fields)}`;\n}\n\nfunction diffIndexes(indexes: {\n  added: IndexMetadata[];\n  dropped: IndexMetadata[];\n}) {\n  let indexDiff = \"\";\n  if (indexes.dropped.length > 0) {\n    indexDiff += \"Delete the following indexes:\\n\";\n    for (const index of indexes.dropped) {\n      indexDiff += `[-] ${stringifyIndex(index)}\\n`;\n    }\n  }\n  if (indexes.added.length > 0) {\n    indexDiff += \"Add the following indexes:\\n\";\n    for (const index of indexes.added) {\n      indexDiff += `[+] ${stringifyIndex(index)}\\n`;\n    }\n  }\n  return indexDiff;\n}\n\nexport async function buildIndexes(\n  ctx: Context,\n  origin: string,\n  adminKey: string,\n  schemaDir: string,\n  dryRun: boolean\n): Promise<void> {\n  if (!ctx.fs.exists(path.resolve(schemaDir, \"schema.ts\"))) {\n    // Don't do anything.\n    return;\n  }\n  const bundles = await bundleSchema(ctx.fs, schemaDir);\n  const spinner = (ctx.spinner = ora({\n    text: \"Checking for changed table indexes...\",\n    stream: process.stdout,\n  }));\n\n  if (!dryRun) {\n    spinner.start();\n  }\n\n  try {\n    const res = await axios.post<{\n      added: IndexMetadata[];\n      dropped: IndexMetadata[];\n    }>(`${origin}/api/${version}/build_indexes`, {\n      bundle: bundles[0],\n      adminKey,\n      dryRun,\n    });\n    deprecationCheckWarning(ctx, res);\n\n    const indexDiff = diffIndexes(res.data);\n    if (indexDiff !== \"\") {\n      console.log(\n        chalk.bold(\n          `\\nIndexes ${\n            dryRun ? \"would\" : \"will\"\n          } be overwritten with the following changes:`\n        )\n      );\n      console.log(indexDiff);\n    }\n\n    if (dryRun) {\n      return;\n    }\n    spinner.text = \"Waiting for all table indexes to be backfilled...\";\n    await waitForIndexesToBuild(origin, adminKey);\n    res.data.added.length > 0\n      ? spinner.succeed(chalk.green(\"Successfully backfilled table indexes.\"))\n      : res.data.dropped.length > 0\n      ? spinner.succeed(\n          chalk.green(\"Successfully dropped deleted table indexes.\")\n        )\n      : spinner.stop();\n  } catch (err) {\n    spinner.fail(chalk.red(\"Error: Unable to build indexes on\", origin));\n    return await fatalServerErr(ctx, err);\n  }\n}\n\nasync function waitForIndexesToBuild(origin: string, adminKey: string) {\n  const fetch = () =>\n    axios.get<{ indexes: IndexMetadata[] }>(\n      `${origin}/api/${version}/get_indexes`,\n      {\n        headers: { Authorization: `Convex ${adminKey}` },\n      }\n    );\n  const validate = (result: AxiosResponse<{ indexes: IndexMetadata[] }, any>) =>\n    result.data.indexes.every(index => index.backfill.state === \"done\");\n  await poll(fetch, validate);\n}\n"],
  "mappings": ";AAAA,OAAO,WAA8B;AACrC,OAAO,WAAW;AAClB,OAAO,SAAS;AAChB,OAAO,UAAU;AACjB,SAAS,oBAAoB;AAC7B,SAAS,eAAe;AAExB,SAAS,MAAM,gBAAgB,+BAA+B;AAgB9D,SAAS,eAAe,OAAsB;AAC5C,SAAO,GAAG,MAAM,SAAS,MAAM,QAAQ,KAAK,UAAU,MAAM,MAAM;AACpE;AAEA,SAAS,YAAY,SAGlB;AACD,MAAI,YAAY;AAChB,MAAI,QAAQ,QAAQ,SAAS,GAAG;AAC9B,iBAAa;AACb,eAAW,SAAS,QAAQ,SAAS;AACnC,mBAAa,OAAO,eAAe,KAAK;AAAA;AAAA,IAC1C;AAAA,EACF;AACA,MAAI,QAAQ,MAAM,SAAS,GAAG;AAC5B,iBAAa;AACb,eAAW,SAAS,QAAQ,OAAO;AACjC,mBAAa,OAAO,eAAe,KAAK;AAAA;AAAA,IAC1C;AAAA,EACF;AACA,SAAO;AACT;AAEA,sBAAsB,aACpB,KACA,QACA,UACA,WACA,QACe;AACf,MAAI,CAAC,IAAI,GAAG,OAAO,KAAK,QAAQ,WAAW,WAAW,CAAC,GAAG;AAExD;AAAA,EACF;AACA,QAAM,UAAU,MAAM,aAAa,IAAI,IAAI,SAAS;AACpD,QAAM,UAAW,IAAI,UAAU,IAAI;AAAA,IACjC,MAAM;AAAA,IACN,QAAQ,QAAQ;AAAA,EAClB,CAAC;AAED,MAAI,CAAC,QAAQ;AACX,YAAQ,MAAM;AAAA,EAChB;AAEA,MAAI;AACF,UAAM,MAAM,MAAM,MAAM,KAGrB,GAAG,cAAc,yBAAyB;AAAA,MAC3C,QAAQ,QAAQ;AAAA,MAChB;AAAA,MACA;AAAA,IACF,CAAC;AACD,4BAAwB,KAAK,GAAG;AAEhC,UAAM,YAAY,YAAY,IAAI,IAAI;AACtC,QAAI,cAAc,IAAI;AACpB,cAAQ;AAAA,QACN,MAAM;AAAA,UACJ;AAAA,UACE,SAAS,UAAU;AAAA,QAEvB;AAAA,MACF;AACA,cAAQ,IAAI,SAAS;AAAA,IACvB;AAEA,QAAI,QAAQ;AACV;AAAA,IACF;AACA,YAAQ,OAAO;AACf,UAAM,sBAAsB,QAAQ,QAAQ;AAC5C,QAAI,KAAK,MAAM,SAAS,IACpB,QAAQ,QAAQ,MAAM,MAAM,wCAAwC,CAAC,IACrE,IAAI,KAAK,QAAQ,SAAS,IAC1B,QAAQ;AAAA,MACN,MAAM,MAAM,6CAA6C;AAAA,IAC3D,IACA,QAAQ,KAAK;AAAA,EACnB,SAAS,KAAP;AACA,YAAQ,KAAK,MAAM,IAAI,qCAAqC,MAAM,CAAC;AACnE,WAAO,MAAM,eAAe,KAAK,GAAG;AAAA,EACtC;AACF;AAEA,eAAe,sBAAsB,QAAgB,UAAkB;AACrE,QAAM,QAAQ,MACZ,MAAM;AAAA,IACJ,GAAG,cAAc;AAAA,IACjB;AAAA,MACE,SAAS,EAAE,eAAe,UAAU,WAAW;AAAA,IACjD;AAAA,EACF;AACF,QAAM,WAAW,CAAC,WAChB,OAAO,KAAK,QAAQ,MAAM,WAAS,MAAM,SAAS,UAAU,MAAM;AACpE,QAAM,KAAK,OAAO,QAAQ;AAC5B;",
  "names": []
}
