{
  "version": 3,
  "sources": ["../../../../src/cli/codegen_templates/readme.ts"],
  "sourcesContent": ["export function readmeCodegen() {\n  return `# Welcome to your Convex functions directory!\n\nWrite your Convex functions here. See\nhttps://docs.convex.dev/using/writing-convex-functions for more.\n\nA query function that takes two arguments looks like:\n\n\\`\\`\\`javascript\n// myQueryFunction.js\nimport { query } from \"./_generated/server\";\n\nexport default query(async ({ db }, first, second) => {\n  // Validate arguments here.\n  if (typeof first !== 'number' || first < 0) {\n    throw new Error(\"First argument is not a non-negative number.\")\n  }\n  if (typeof second !== 'string' || second.length > 1000) {\n    throw new Error(\"Second argument is not a string of length 1000 or less.\");\n  }\n\n  // Query the database as many times as you need here.\n  // See https://docs.convex.dev/using/database-queries to learn how to write queries.\n  const documents = await db.query(\"tablename\").collect();\n\n  // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n  // remove non-public properties, or create new objects.\n  return documents\n});\n\\`\\`\\`\n\nUsing this query function in a React component looks like:\n\n\\`\\`\\`javascript\nconst data = useQuery(\"myQueryFunction\", 10, \"hello\");\n\\`\\`\\`\n\n\nA mutation function looks like:\n\n\\`\\`\\`javascript\n// myMutationFunction.js\nimport { mutation } from \"./_generated/server\";\n\nexport default mutation(async ({ db }, first, second) => {\n  // Validate arguments here.\n  if (typeof first !== 'string' || typeof second !== 'string') {\n    throw new Error(\"Both arguments must be strings\");\n  }\n\n  // Insert or modify documents in the database here.\n  // Mutations can also read from the database like queries.\n  const message = { body: first, author: second };\n  const id = await db.insert(\"messages\", message);\n\n  // Optionally, return a value from your mutation.\n  return await db.get(id);\n});\n\\`\\`\\`\n\nUsing this mutation function in a React component looks like:\n\n\\`\\`\\`javascript\nconst mutation = useMutation(\"myMutationFunction\");\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation(\"Hello!\", \"me\");\n  // OR\n  // use the result once the mutation has completed\n  mutation(\"Hello!\", \"me\").then(result => console.log(result));\n}\n\\`\\`\\`\n\nThe Convex CLI is your friend. See everything it can do by running\n\\`npx convex -h\\` in your project root directory. To learn more, launch the docs\nwith \\`npx convex docs\\`.\n`;\n}\n"],
  "mappings": ";AAAO,gBAAS,gBAAgB;AAC9B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4ET;",
  "names": []
}
