"use strict";
import { useEffect, useMemo, useState } from "react";
import { useConvexGeneric } from "./index.js";
import { QueriesObserver } from "./queries_observer.js";
import { useSubscription } from "./use_subscription.js";
export function useQueriesGeneric(queries) {
  const convex = useConvexGeneric();
  if (convex === void 0) {
    throw new Error(
      "Could not find Convex client! `useQueries` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app"
    );
  }
  const createWatch = useMemo(() => {
    return (name, args, journal) => {
      return convex.watchQuery(name, args, journal);
    };
  }, [convex]);
  return useQueriesHelper(queries, createWatch);
}
export function useQueriesHelper(queries, createWatch) {
  const [observer] = useState(() => new QueriesObserver(createWatch));
  const [effectRan, setEffectRan] = useState(false);
  if (observer.createWatch !== createWatch) {
    observer.setCreateWatch(createWatch);
  }
  useEffect(() => {
    setEffectRan(true);
    return () => {
      observer.destroy();
    };
  }, [observer]);
  const subscription = useMemo(() => {
    if (effectRan) {
      observer.setQueries(queries);
    }
    return {
      getCurrentValue: () => {
        if (effectRan) {
          return observer.getCurrentQueries();
        } else {
          const value = {};
          for (const identifier in Object.keys(queries)) {
            value[identifier] = void 0;
          }
          return value;
        }
      },
      subscribe: (callback) => observer.subscribe(callback)
    };
  }, [observer, queries, effectRan]);
  return useSubscription(subscription);
}
//# sourceMappingURL=use_queries.js.map
